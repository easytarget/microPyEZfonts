'''
    ezFBfont_06_tom_thumb_ascii : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original tom-thumb.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT """""MIT"""""

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: tom-thumb
# Cmd: [bdf2dict.py], ['Latin-1-bdf-sources/tom-thumb.bdf', './ascii-char.set', 'True']
# Date: 2024-06-11 17:35:38

version = '0.33'
name = '-Raccoon-Fixed4x6-Medium-R-Normal--6-60-75-75-P-40-ISO10646-1'
family = 'fixed4x6'
weight = 'medium'
size = 6

def height():
    return 6

def baseline():
    return 5

def max_width():
    return 4

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 126

_g = {
 32:[b'\x00\x00\x00\x00\x00\x00'],
 33:[b'@@@\x00@\x00'],
 34:[b'\xa0\xa0\x00\x00\x00\x00'],
 35:[b'\xa0\xe0\xa0\xe0\xa0\x00'],
 36:[b'`\xc0`\xc0@\x00'],
 37:[b'\x80 @\x80 \x00'],
 38:[b'\xc0\xc0\xe0\xa0`\x00'],
 39:[b'@@\x00\x00\x00\x00'],
 40:[b' @@@ \x00'],
 41:[b'\x80@@@\x80\x00'],
 42:[b'\xa0@\xa0\x00\x00\x00'],
 43:[b'\x00@\xe0@\x00\x00'],
 44:[b'\x00\x00\x00@\x80\x00'],
 45:[b'\x00\x00\xe0\x00\x00\x00'],
 46:[b'\x00\x00\x00\x00@\x00'],
 47:[b'  @\x80\x80\x00'],
 48:[b'`\xa0\xa0\xa0\xc0\x00'],
 49:[b'@\xc0@@@\x00'],
 50:[b'\xc0 @\x80\xe0\x00'],
 51:[b'\xc0 @ \xc0\x00'],
 52:[b'\xa0\xa0\xe0  \x00'],
 53:[b'\xe0\x80\xc0 \xc0\x00'],
 54:[b'`\x80\xe0\xa0\xe0\x00'],
 55:[b'\xe0 @\x80\x80\x00'],
 56:[b'\xe0\xa0\xe0\xa0\xe0\x00'],
 57:[b'\xe0\xa0\xe0 \xc0\x00'],
 58:[b'\x00@\x00@\x00\x00'],
 59:[b'\x00@\x00@\x80\x00'],
 60:[b' @\x80@ \x00'],
 61:[b'\x00\xe0\x00\xe0\x00\x00'],
 62:[b'\x80@ @\x80\x00'],
 63:[b'\xe0 @\x00@\x00'],
 64:[b'@\xa0\xe0\x80`\x00'],
 65:[b'@\xa0\xe0\xa0\xa0\x00'],
 66:[b'\xc0\xa0\xc0\xa0\xc0\x00'],
 67:[b'`\x80\x80\x80`\x00'],
 68:[b'\xc0\xa0\xa0\xa0\xc0\x00'],
 69:[b'\xe0\x80\xe0\x80\xe0\x00'],
 70:[b'\xe0\x80\xe0\x80\x80\x00'],
 71:[b'`\x80\xe0\xa0`\x00'],
 72:[b'\xa0\xa0\xe0\xa0\xa0\x00'],
 73:[b'\xe0@@@\xe0\x00'],
 74:[b'   \xa0@\x00'],
 75:[b'\xa0\xa0\xc0\xa0\xa0\x00'],
 76:[b'\x80\x80\x80\x80\xe0\x00'],
 77:[b'\xa0\xe0\xe0\xa0\xa0\x00'],
 78:[b'\xa0\xe0\xe0\xe0\xa0\x00'],
 79:[b'@\xa0\xa0\xa0@\x00'],
 80:[b'\xc0\xa0\xc0\x80\x80\x00'],
 81:[b'@\xa0\xa0\xe0`\x00'],
 82:[b'\xc0\xa0\xe0\xc0\xa0\x00'],
 83:[b'`\x80@ \xc0\x00'],
 84:[b'\xe0@@@@\x00'],
 85:[b'\xa0\xa0\xa0\xa0`\x00'],
 86:[b'\xa0\xa0\xa0@@\x00'],
 87:[b'\xa0\xa0\xe0\xe0\xa0\x00'],
 88:[b'\xa0\xa0@\xa0\xa0\x00'],
 89:[b'\xa0\xa0@@@\x00'],
 90:[b'\xe0 @\x80\xe0\x00'],
 91:[b'\xe0\x80\x80\x80\xe0\x00'],
 92:[b'\x00\x80@ \x00\x00'],
 93:[b'\xe0   \xe0\x00'],
 94:[b'@\xa0\x00\x00\x00\x00'],
 95:[b'\x00\x00\x00\x00\xe0\x00'],
 96:[b'\x80@\x00\x00\x00\x00'],
 97:[b'\x00\xc0`\xa0\xe0\x00'],
 98:[b'\x80\xc0\xa0\xa0\xc0\x00'],
 99:[b'\x00`\x80\x80`\x00'],
 100:[b' `\xa0\xa0`\x00'],
 101:[b'\x00`\xa0\xc0`\x00'],
 102:[b' @\xe0@@\x00'],
 103:[b'\x00`\xa0\xe0 @'],
 104:[b'\x80\xc0\xa0\xa0\xa0\x00'],
 105:[b'@\x00@@@\x00'],
 106:[b' \x00  \xa0@'],
 107:[b'\x80\xa0\xc0\xc0\xa0\x00'],
 108:[b'\xc0@@@\xe0\x00'],
 109:[b'\x00\xe0\xe0\xe0\xa0\x00'],
 110:[b'\x00\xc0\xa0\xa0\xa0\x00'],
 111:[b'\x00@\xa0\xa0@\x00'],
 112:[b'\x00\xc0\xa0\xa0\xc0\x80'],
 113:[b'\x00`\xa0\xa0` '],
 114:[b'\x00`\x80\x80\x80\x00'],
 115:[b'\x00`\xc0`\xc0\x00'],
 116:[b'@\xe0@@`\x00'],
 117:[b'\x00\xa0\xa0\xa0`\x00'],
 118:[b'\x00\xa0\xa0\xe0@\x00'],
 119:[b'\x00\xa0\xe0\xe0\xe0\x00'],
 120:[b'\x00\xa0@@\xa0\x00'],
 121:[b'\x00\xa0\xa0` @'],
 122:[b'\x00\xe0`\xc0\xe0\x00'],
 123:[b'`@\x80@`\x00'],
 124:[b'@@\x00@@\x00'],
 125:[b'\xc0@ @\xc0\x00'],
 126:[b'`\xc0\x00\x00\x00\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 6, 4

