'''
    ezFBfont_10_8x13_upper : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original 8x13.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Public domain font.  Share and enjoy."

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: 8x13
# Cmd: [bdf2dict.py], ['Latin-1-bdf-sources/8x13.bdf', '_', './upper-char.set']
# Date: 2024-06-12 20:07:07

version = '0.33'
name = '-Misc-Fixed-Medium-R-Normal--13-120-75-75-C-80-ISO10646-1'
family = 'fixed'
weight = 'medium'
size = 13

def height():
    return 10

def baseline():
    return 9

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 95

_g = {
 32:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 33:[b'\x10\x10\x10\x10\x10\x10\x10\x00\x10\x00'],
 34:[b'$$$\x00\x00\x00\x00\x00\x00\x00'],
 35:[b'\x00$$~$~$$\x00\x00'],
 36:[b'\x10<PP8\x14\x14x\x10\x00'],
 37:[b'"R$\x08\x08\x10$*D\x00'],
 38:[b'\x00\x000HH0JD:\x00'],
 39:[b'\x10\x10\x10\x00\x00\x00\x00\x00\x00\x00'],
 40:[b'\x04\x08\x08\x10\x10\x10\x08\x08\x04\x00'],
 41:[b' \x10\x10\x08\x08\x08\x10\x10 \x00'],
 42:[b'$\x18~\x18$\x00\x00\x00\x00\x00'],
 43:[b'\x00\x00\x10\x10|\x10\x10\x00\x00\x00'],
 44:[b'\x00\x00\x00\x00\x00\x00\x0080@'],
 45:[b'\x00\x00\x00\x00|\x00\x00\x00\x00\x00'],
 46:[b'\x00\x00\x00\x00\x00\x00\x00\x108\x10'],
 47:[b'\x02\x02\x04\x08\x10 @\x80\x80\x00'],
 48:[b'\x18$BBBBB$\x18\x00'],
 49:[b'\x100P\x10\x10\x10\x10\x10|\x00'],
 50:[b'<BB\x02\x04\x18 @~\x00'],
 51:[b'~\x02\x04\x08\x1c\x02\x02B<\x00'],
 52:[b'\x04\x0c\x14$DD~\x04\x04\x00'],
 53:[b'~@@\\b\x02\x02B<\x00'],
 54:[b'\x1c @@\\bBB<\x00'],
 55:[b'~\x02\x04\x08\x08\x10\x10  \x00'],
 56:[b'<BBB<BBB<\x00'],
 57:[b'<BBF:\x02\x02\x048\x00'],
 58:[b'\x00\x00\x108\x10\x00\x00\x108\x10'],
 59:[b'\x00\x00\x108\x10\x00\x0080@'],
 60:[b'\x02\x04\x08\x10 \x10\x08\x04\x02\x00'],
 61:[b'\x00\x00\x00~\x00\x00~\x00\x00\x00'],
 62:[b'@ \x10\x08\x04\x08\x10 @\x00'],
 63:[b'<BB\x02\x04\x08\x08\x00\x08\x00'],
 64:[b'<BBNRVJ@<\x00'],
 65:[b'\x18$BBB~BBB\x00'],
 66:[b'xDBDxDBDx\x00'],
 67:[b'<B@@@@@B<\x00'],
 68:[b'xDBBBBBDx\x00'],
 69:[b'~@@@x@@@~\x00'],
 70:[b'~@@@x@@@@\x00'],
 71:[b'<B@@@NBF:\x00'],
 72:[b'BBBB~BBBB\x00'],
 73:[b'|\x10\x10\x10\x10\x10\x10\x10|\x00'],
 74:[b'\x1f\x04\x04\x04\x04\x04\x04D8\x00'],
 75:[b'BDHP`PHDB\x00'],
 76:[b'@@@@@@@@~\x00'],
 77:[b'\x82\x82\xc6\xaa\x92\x92\x82\x82\x82\x00'],
 78:[b'BBbRJFBBB\x00'],
 79:[b'<BBBBBBB<\x00'],
 80:[b'|BBB|@@@@\x00'],
 81:[b'<BBBBBRJ<\x02'],
 82:[b'|BBB|PHDB\x00'],
 83:[b'<B@@<\x02\x02B<\x00'],
 84:[b'\xfe\x10\x10\x10\x10\x10\x10\x10\x10\x00'],
 85:[b'BBBBBBBB<\x00'],
 86:[b'\x82\x82DDD(((\x10\x00'],
 87:[b'\x82\x82\x82\x82\x92\x92\x92\xaaD\x00'],
 88:[b'\x82\x82D(\x10(D\x82\x82\x00'],
 89:[b'\x82\x82D(\x10\x10\x10\x10\x10\x00'],
 90:[b'~\x02\x04\x08\x10 @@~\x00'],
 91:[b'<       <\x00'],
 92:[b'\x80\x80@ \x10\x08\x04\x02\x02\x00'],
 93:[b'x\x08\x08\x08\x08\x08\x08\x08x\x00'],
 94:[b'\x10(D\x00\x00\x00\x00\x00\x00\x00'],
 95:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 10, 8

