'''
    ezFBfont_13_8x13B_supp : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original 8x13B.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: 8x13B
# Cmd: ['bdf2dict.py'], ['Latin-1-bdf-sources/8x13B.bdf', '_', './supp-char.set']
# Date: 2024-06-18 20:26:59
'''
    Original Copyright, Comments and Notices from source:

    COMMENT "Public domain font.  Share and enjoy."
'''
version = '0.33'
name = '-misc-fixed-bold-r-normal--13-120-75-75-c-80-iso10646-1'
family = 'fixed'
weight = 'bold'
size = 13

def height():
    return 13

def baseline():
    return 11

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 160

def max_ch():
    return 255

_g = {
  160:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  161:b'\x00\x18\x18\x00\x18\x18\x18\x18\x18\x18\x18\x00\x00',
  162:b'\x00\x00\x10|\xd4\xd0\xd0\xd4|\x10\x00\x00\x00',
  163:b'\x00<f``\xfc```\xf0\xbe\xe0\x00',
  164:b'\x00\x00\x00\xc6\xfelDl\xfe\xc6\x00\x00\x00',
  165:b'\x00fff<<~\x18~\x18\x18\x00\x00',
  166:b'\x00\x18\x18\x18\x18\x00\x00\x18\x18\x18\x18\x00\x00',
  167:b'\x00<f`<ff<\x06f<\x00\x00',
  168:b'\x00ll\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  169:b'\x00|\xc6\xba\xea\xe2\xea\xba\xc6|\x00\x00\x00',
  170:b'\x00x\x0c|L|\x00|\x00\x00\x00\x00\x00',
  171:b'\x00\x00\x006l\xd8\xb0\xd8l6\x00\x00\x00',
  172:b'\x00\x00\x00\x00\x00\xfc\xfc\x04\x04\x04\x00\x00\x00',
  173:b'\x00\x00\x00\x00\x00\x00|\x00\x00\x00\x00\x00\x00',
  174:b'\x00|\xc6\xba\xaa\xba\xb2\xaa\xc6|\x00\x00\x00',
  175:b'~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  176:b'\x00<ff<\x00\x00\x00\x00\x00\x00\x00\x00',
  177:b'\x00\x00\x00\x18\x18~\x18\x18\x00~\x00\x00\x00',
  178:b'\x00pX\x180`x\x00\x00\x00\x00\x00\x00',
  179:b'\x00pX0\x18Xp\x00\x00\x00\x00\x00\x00',
  180:b'\x00\x0c\x180\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  181:b'\x00\x00\x00\x00\xc6\xc6\xc6\xc6\xc6\xee\xfc\xc0\xc0',
  182:b'\x00>z\xca\xca\xcaz:\n\n\n\x0e\x00',
  183:b'\x00\x00\x00\x00\x00\x18\x18\x00\x00\x00\x00\x00\x00',
  184:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18H0',
  185:b'\x000p000x\x00\x00\x00\x00\x00\x00',
  186:b'\x008|D|8\x00|\x00\x00\x00\x00\x00',
  187:b'\x00\x00\x00\xd8l6\x1a6l\xd8\x00\x00\x00',
  188:b'\x00`\xe0``b\xf6\x0e\x1a\x1e\x06\x00\x00',
  189:b'\x00`\xe0``|\xf6\x06\x0c\x18\x1e\x00\x00',
  190:b'\x00\xe0\xb0`0\xb2\xe6\x0e\x1a\x1e\x06\x00\x00',
  191:b'\x00\x18\x18\x00\x18\x180`ff<\x00\x00',
  192:b'\x000\x18\x008|\xc6\xc6\xfe\xc6\xc6\x00\x00',
  193:b'\x00\x180\x008|\xc6\xc6\xfe\xc6\xc6\x00\x00',
  194:b'\x008l\x008|\xc6\xc6\xfe\xc6\xc6\x00\x00',
  195:b'\x004X\x008|\xc6\xc6\xfe\xc6\xc6\x00\x00',
  196:b'\x00ll\x008|\xc6\xc6\xfe\xc6\xc6\x00\x00',
  197:b'\x18$\x18\x008|\xc6\xc6\xfe\xc6\xc6\x00\x00',
  198:b'\x00~\xf8\xd8\xd8\xd8\xfc\xd8\xd8\xd8\xde\x00\x00',
  199:b'\x00|\xe6\xc0\xc0\xc0\xc0\xc0\xe6|\x18H0',
  200:b'\x000\x18\x00\xfe\xc0\xc0\xf8\xc0\xc0\xfe\x00\x00',
  201:b'\x00\x180\x00\xfe\xc0\xc0\xf8\xc0\xc0\xfe\x00\x00',
  202:b'\x008l\x00\xfe\xc0\xc0\xf8\xc0\xc0\xfe\x00\x00',
  203:b'\x00ll\x00\xfe\xc0\xc0\xf8\xc0\xc0\xfe\x00\x00',
  204:b'\x000\x18\x00<\x18\x18\x18\x18\x18<\x00\x00',
  205:b'\x00\x0c\x18\x00<\x18\x18\x18\x18\x18<\x00\x00',
  206:b'\x00\x1c6\x00<\x18\x18\x18\x18\x18<\x00\x00',
  207:b'\x0066\x00<\x18\x18\x18\x18\x18<\x00\x00',
  208:b'\x00\x00\x00\xfcff\xf6fff\xfc\x00\x00',
  209:b'\x004X\x00\xc6\xe6\xf6\xd6\xde\xce\xc6\x00\x00',
  210:b'0\x18\x00|\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  211:b'\x180\x00|\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  212:b'8l\x00|\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  213:b'4X\x00|\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  214:b'll\x00|\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  215:b'\x00\x00\x00\x00\xc6\xc6|8|\xc6\xc6\x00\x00',
  216:b'\x00\x00\x02|\xce\xd6\xd6\xd6\xd6\xe6|\x80\x00',
  217:b'\x000\x18\x00\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  218:b'\x00\x180\x00\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  219:b'\x008l\x00\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  220:b'\x00ll\x00\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  221:b'\x00\x0c\x18\x00f$<\x18\x18\x18\x18\x00\x00',
  222:b'\x00\x00\xc0\xfc\xc6\xc6\xc6\xfc\xc0\xc0\xc0\x00\x00',
  223:b'\x00<ffl\xeclfffl\x00\x00',
  224:b'\x000\x18\x00|\x06~\xc6\xc6\xcev\x00\x00',
  225:b'\x00\x180\x00|\x06~\xc6\xc6\xcev\x00\x00',
  226:b'\x008l\x00|\x06~\xc6\xc6\xcev\x00\x00',
  227:b'\x004X\x00|\x06~\xc6\xc6\xcev\x00\x00',
  228:b'\x00ll\x00|\x06~\xc6\xc6\xcev\x00\x00',
  229:b'\x18$\x18\x00|\x06~\xc6\xc6\xcev\x00\x00',
  230:b'\x00\x00\x00\x00l\xda\x1a|\xd8\xdal\x00\x00',
  231:b'\x00\x00\x00|\xe6\xc0\xc0\xc0\xe6|\x18H0',
  232:b'\x000\x18\x00|\xc6\xc6\xfe\xc0\xc6|\x00\x00',
  233:b'\x00\x180\x00|\xc6\xc6\xfe\xc0\xc6|\x00\x00',
  234:b'\x008l\x00|\xc6\xc6\xfe\xc0\xc6|\x00\x00',
  235:b'\x00ll\x00|\xc6\xc6\xfe\xc0\xc6|\x00\x00',
  236:b'\x000\x18\x008\x18\x18\x18\x18\x18<\x00\x00',
  237:b'\x00\x180\x008\x18\x18\x18\x18\x18<\x00\x00',
  238:b'\x008l\x008\x18\x18\x18\x18\x18<\x00\x00',
  239:b'\x00ll\x008\x18\x18\x18\x18\x18<\x00\x00',
  240:b'\x00l8x\x0c~\xc6\xc6\xc6\xc6|\x00\x00',
  241:b'\x004X\x00\xdc\xe6\xc6\xc6\xc6\xc6\xc6\x00\x00',
  242:b'\x000\x18\x00|\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  243:b'\x00\x180\x00|\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  244:b'\x008l\x00|\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  245:b'\x004X\x00|\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  246:b'\x00ll\x00|\xc6\xc6\xc6\xc6\xc6|\x00\x00',
  247:b'\x00\x00\x00\x18\x18\x00~\x00\x18\x18\x00\x00\x00',
  248:b'\x00\x00\x00\x02|\xce\xd6\xd6\xd6\xe6|\x80\x00',
  249:b'\x000\x18\x00\xc6\xc6\xc6\xc6\xc6\xcev\x00\x00',
  250:b'\x00\x180\x00\xc6\xc6\xc6\xc6\xc6\xcev\x00\x00',
  251:b'\x008l\x00\xc6\xc6\xc6\xc6\xc6\xcev\x00\x00',
  252:b'\x00ll\x00\xc6\xc6\xc6\xc6\xc6\xcev\x00\x00',
  253:b'\x00\x180\x00\xc6\xc6\xc6\xc6\xcev\x06\xc6|',
  254:b'\x00\x00\xc0\xc0\xdc\xe6\xc6\xc6\xc6\xe6\xdc\xc0\xc0',
  255:b'\x00ll\x00\xc6\xc6\xc6\xc6\xcev\x06\xc6|',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 13, 8
