'''
    ezFBfont_06_4x6_supp : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original 4x6.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Public domain font.  Share and enjoy."

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: 4x6
# Cmd: [bdf2dict.py], ['Latin-1-bdf-sources/4x6.bdf', './supp-char.set', 'True']
# Date: 2024-06-11 17:32:28

version = '0.33'
name = '-Misc-Fixed-Medium-R-Normal--6-60-75-75-C-40-ISO10646-1'
family = 'fixed'
weight = 'medium'
size = 6

def height():
    return 6

def baseline():
    return 5

def max_width():
    return 4

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 160

def max_ch():
    return 255

_g = {
 160:[b'\x00\x00\x00\x00\x00\x00'],
 161:[b'@\x00@@@\x00'],
 162:[b'@\xe0\x80\xe0@\x00'],
 163:[b' @`@\xa0\x00'],
 164:[b'\x00\x90``\x90\x00'],
 165:[b'\xa0@\xe0@@\x00'],
 166:[b'@@\x00@@\x00'],
 167:[b'`\xc0\xa0` \xc0'],
 168:[b'\xa0\x00\x00\x00\x00\x00'],
 169:[b'`\x90\xd0\xd0\x90`'],
 170:[b'`\xa0`\x00\xe0\x00'],
 171:[b'\x00P\xa0P\x00\x00'],
 172:[b'\x00\x00\xe0 \x00\x00'],
 173:[b'\x00\x00\xe0\x00\x00\x00'],
 174:[b'`\xf0\xd0`\x00\x00'],
 175:[b'\xe0\x00\x00\x00\x00\x00'],
 176:[b'@\xa0@\x00\x00\x00'],
 177:[b'@\xe0@\x00\xe0\x00'],
 178:[b'\xc0@\x80\xc0\x00\x00'],
 179:[b'\xc0@\x80@\x80\x00'],
 180:[b' @\x00\x00\x00\x00'],
 181:[b'\x00\xa0\xa0\xa0\xc0\x80'],
 182:[b'p\xd0\xd0PP\x00'],
 183:[b'\x00\x00@\x00\x00\x00'],
 184:[b'\x00\x00\x00 @\x00'],
 185:[b'@\xc0@@\x00\x00'],
 186:[b'@\xa0@\x00\xe0\x00'],
 187:[b'\x00\xa0P\xa0\x00\x00'],
 188:[b'\x80\x80\x80Pp\x10'],
 189:[b'\x80\x80\xb0\x10 0'],
 190:[b'\xc0@\x80P\xb0\x10'],
 191:[b'@\x00@\x80`\x00'],
 192:[b'\x80@\xa0\xe0\xa0\x00'],
 193:[b' @\xa0\xe0\xa0\x00'],
 194:[b'\xc0@\xa0\xe0\xa0\x00'],
 195:[b'`\xc0\xa0\xe0\xa0\x00'],
 196:[b'\xa0@\xa0\xe0\xa0\x00'],
 197:[b'@@\xa0\xe0\xa0\x00'],
 198:[b'p\xa0\xf0\xa0\xb0\x00'],
 199:[b'@\xa0\x80\xa0@\x80'],
 200:[b'\x80\xe0\xc0\x80\xe0\x00'],
 201:[b' \xe0\xc0\x80\xe0\x00'],
 202:[b'`\xe0\xc0\x80\xe0\x00'],
 203:[b'\xa0\xe0\xc0\x80\xe0\x00'],
 204:[b'\x80\xe0@@\xe0\x00'],
 205:[b' \xe0@@\xe0\x00'],
 206:[b'@\xe0@@\xe0\x00'],
 207:[b'\xa0@@@\xe0\x00'],
 208:[b'\xe0P\xd0P\xe0\x00'],
 209:[b'P\xa0\xe0\xe0\xa0\x00'],
 210:[b'\x80@\xa0\xa0@\x00'],
 211:[b' @\xa0\xa0@\x00'],
 212:[b'@@\xa0\xa0@\x00'],
 213:[b'p\xe0\xa0\xa0@\x00'],
 214:[b'\xa0@\xa0\xa0@\x00'],
 215:[b'\x00\xa0@\xa0\x00\x00'],
 216:[b'`\xa0\xe0\xa0\xc0\x00'],
 217:[b'\x80@\xa0\xa0\xe0\x00'],
 218:[b' @\xa0\xa0\xe0\x00'],
 219:[b'@\x00\xa0\xa0\xe0\x00'],
 220:[b'\xa0\x00\xa0\xa0\xe0\x00'],
 221:[b' \x00\xa0@@\x00'],
 222:[b'\x80\xc0\xa0\xc0\x80\x00'],
 223:[b'@\xa0\xc0\xa0\xe0\x80'],
 224:[b'\x80@`\xa0`\x00'],
 225:[b' @`\xa0`\x00'],
 226:[b'`\x00`\xa0`\x00'],
 227:[b'P\xa0`\xa0`\x00'],
 228:[b'\xa0\x00`\xa0`\x00'],
 229:[b'@\x00`\xa0`\x00'],
 230:[b'\x00p\xb0\xa0p\x00'],
 231:[b'\x00@\xa0\x80`@'],
 232:[b'\x80@\xa0\xc0`\x00'],
 233:[b' @\xa0\xc0`\x00'],
 234:[b'\xc0@\xa0\xc0`\x00'],
 235:[b'\xa0@\xa0\xc0`\x00'],
 236:[b'\x80@@@\xe0\x00'],
 237:[b' \xc0@@\xe0\x00'],
 238:[b'@\xa0@@\xe0\x00'],
 239:[b'\xa0\x00\xc0@\xe0\x00'],
 240:[b'\xa0@`\xa0@\x00'],
 241:[b'P\xa0\xc0\xa0\xa0\x00'],
 242:[b'\x80@@\xa0@\x00'],
 243:[b' @@\xa0@\x00'],
 244:[b'@\x00@\xa0@\x00'],
 245:[b'\xe0\x00@\xa0@\x00'],
 246:[b'\xa0\x00@\xa0@\x00'],
 247:[b'@\x00\xe0\x00@\x00'],
 248:[b'\x00`\xa0\xa0\xc0\x00'],
 249:[b'\x80@\xa0\xa0`\x00'],
 250:[b' @\xa0\xa0`\x00'],
 251:[b'@\x00\xa0\xa0`\x00'],
 252:[b'\xa0\x00\xa0\xa0`\x00'],
 253:[b' @\xa0\xe0 \xc0'],
 254:[b'\x80\x80\xc0\xa0\xc0\x80'],
 255:[b'\xa0\x00\xa0\xe0 \xc0'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 6, 4

