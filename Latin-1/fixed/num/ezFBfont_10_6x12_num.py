'''
    ezFBfont_10_6x12_num : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original 6x12.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: 6x12
# Cmd: ['bdf2dict.py'], ['Latin-1-bdf-sources/6x12.bdf', '_', './num-char.set']
# Date: 2024-06-18 20:26:46
'''
    Original Copyright, Comments and Notices from source:

    COMMENT "Public domain terminal emulator font.  Share and enjoy."
'''
version = '0.33'
name = '-misc-fixed-medium-r-semicondensed--12-110-75-75-c-60-iso10646-1'
family = 'fixed'
weight = 'medium'
size = 12

def height():
    return 10

def baseline():
    return 9

def max_width():
    return 6

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 176

_g = {
  32:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  37:b'\x00\x00\xc8\xc8\x10 @\x98\x98\x00',
  40:b'\x00\x10  @@@  \x10',
  41:b'\x00@  \x10\x10\x10  @',
  42:b'\x00\x00 \xa8p p\xa8 \x00',
  43:b'\x00\x00\x00  \xf8  \x00\x00',
  44:b'\x00\x00\x00\x00\x00\x00\x00``\xc0',
  45:b'\x00\x00\x00\x00\x00\xf8\x00\x00\x00\x00',
  46:b'\x00\x00\x00\x00\x00\x00\x00``\x00',
  47:b'\x00\x00\x08\x10\x10 @@\x80\x00',
  48:b'\x00\x000HHHHH0\x00',
  49:b'\x00\x00 `    p\x00',
  50:b'\x00\x00p\x88\x08\x10 @\xf8\x00',
  51:b'\x00\x00\xf8\x08\x100\x08\x88p\x00',
  52:b'\x00\x00\x100P\x90\xf8\x10\x10\x00',
  53:b'\x00\x00\xf8\x80\xf0\x08\x08\x88p\x00',
  54:b'\x00\x000@\x80\xf0\x88\x88p\x00',
  55:b'\x00\x00\xf8\x08\x10\x10   \x00',
  56:b'\x00\x00p\x88\x88p\x88\x88p\x00',
  57:b'\x00\x00p\x88\x88x\x08\x10`\x00',
  58:b'\x00\x00\x00\x00``\x00``\x00',
  176:b'0HH0\x00\x00\x00\x00\x00\x00',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 10, 6
