'''
    ezFBfont_08_amstrad_cpc_extended_upper : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original amstrad_cpc_extended.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Copyright ruboku 2008"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    COMMENT
    COMMENT Converted from OpenType font "Amstrad-CPC-extended.ttf" by "otf2bdf 3.0".
    COMMENT
'''
# Code generated by bdf2dict.py
# Font: amstrad_cpc_extended
# Cmd: [bdf2dict.py], ['Latin-1-bdf-sources/amstrad_cpc_extended.bdf', '_', './upper-char.set']
# Date: 2024-06-12 20:07:35

version = '0.33'
name = '-FreeType-Amstrad CPC extended-Medium-R-Normal--8-80-72-72-P-64-ISO10646-1'
family = 'amstrad cpc extended'
weight = 'medium'
size = 8

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 9

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 95

_g = {
 32:[b'\x00\x00\x00\x00\x00\x00\x00\x00',b'6'],
 33:[b'\xc0\xc0\xc0\xc0\xc0\x00\xc0\x00',b'6'],
 34:[b'\xd8\xd8\xd8\x00\x00\x00\x00\x00',b'7'],
 35:[b'll\xfe|\xfell\x00',b'8'],
 36:[b'0|\xb0x4\xf80\x00',b'8'],
 37:[b'\x00\xc6\xcc\x180f\xc6\x00',b'8'],
 38:[b'8l8v\xdc\xccv\x00',b'8'],
 39:[b'\xc0\xc0\xc0\x00\x00\x00\x00\x00',b'6'],
 40:[b'0`\xc0\xc0\xc0`0\x00',b'7'],
 41:[b'\xc0`000`\xc0\x00',b'7'],
 42:[b'\x00\x00f\x00<\x00\xff\x00<\x00f\x00\x00\x00\x00\x00',b'9'],
 43:[b'\x0000\xfc00\x00\x00',b'8'],
 44:[b'\x00\x00\x00\x00\x00``\xc0',b'6'],
 45:[b'\x00\x00\x00\xfc\x00\x00\x00\x00',b'8'],
 46:[b'\x00\x00\x00\x00\x00\xc0\xc0\x00',b'6'],
 47:[b'\x06\x0c\x180`\xc0\x80\x00',b'8'],
 48:[b'|\xc6\xce\xd6\xe6\xc6|\x00',b'8'],
 49:[b'0p0000\xfc\x00',b'8'],
 50:[b'x\xcc\x0cx\xc0\xcc\xfc\x00',b'8'],
 51:[b'x\x8c\x0c8\x0c\xccx\x00',b'8'],
 52:[b'\x188X\x98\xfe\x18<\x00',b'8'],
 53:[b'\xfc\xc4\xc0x\x0c\xccx\x00',b'8'],
 54:[b'x\xcc\xc0\xf8\xcc\xccx\x00',b'8'],
 55:[b'\xfc\x8c\x1c\x18000\x00',b'8'],
 56:[b'x\xcc\xccx\xcc\xccx\x00',b'8'],
 57:[b'x\xcc\xcc|\x0c\xccx\x00',b'8'],
 58:[b'\x00\x00\xc0\xc0\x00\xc0\xc0\x00',b'6'],
 59:[b'\x00\x00``\x00``\xc0',b'6'],
 60:[b'\x180`\xc0`0\x18\x00',b'7'],
 61:[b'\x00\x00\xfc\x00\x00\xfc\x00\x00',b'8'],
 62:[b'\xc0`0\x180`\xc0\x00',b'7'],
 63:[b'x\xcc\x0c\x180\x000\x00',b'8'],
 64:[b'|\xc6\xde\xde\xde\xc0|\x00',b'8'],
 65:[b'0x\xcc\xcc\xfc\xcc\xcc\x00',b'8'],
 66:[b'\xfcff|ff\xfc\x00',b'8'],
 67:[b'<f\xc0\xc0\xc0f<\x00',b'8'],
 68:[b'\xf8lfffl\xf8\x00',b'8'],
 69:[b'\xfebhxhb\xfe\x00',b'8'],
 70:[b'\xfebhxh`\xf0\x00',b'8'],
 71:[b'<f\xc0\xc0\xce\xc6~\x00',b'8'],
 72:[b'\xcc\xcc\xcc\xfc\xcc\xcc\xcc\x00',b'8'],
 73:[b'\xfc00000\xfc\x00',b'8'],
 74:[b'\x1e\x0c\x0c\x0c\xcc\xccx\x00',b'8'],
 75:[b'\xe6flxlf\xe6\x00',b'8'],
 76:[b'\xf0```bf\xfe\x00',b'8'],
 77:[b'\xc6\xee\xfe\xfe\xd6\xc6\xc6\x00',b'8'],
 78:[b'\xc6\xe6\xf6\xde\xce\xc6\xc6\x00',b'8'],
 79:[b'8l\xc6\xc6\xc6l8\x00',b'8'],
 80:[b'\xfcffx``\xf0\x00',b'8'],
 81:[b'8l\xc6\xc6\xda\xccv\x00',b'8'],
 82:[b'\xfcff|lf\xe2\x00',b'8'],
 83:[b'x\xcc\xc0x\x0c\xccx\x00',b'8'],
 84:[b'\xfc\xb40000x\x00',b'8'],
 85:[b'\xcc\xcc\xcc\xcc\xcc\xccx\x00',b'8'],
 86:[b'\xcc\xcc\xcc\xcc\xccx0\x00',b'8'],
 87:[b'\xc6\xc6\xc6\xd6\xfe\xee\xc6\x00',b'8'],
 88:[b'\xc6l88l\xc6\xc6\x00',b'8'],
 89:[b'\xcc\xcc\xccx00x\x00',b'8'],
 90:[b'\xfe\xc6\x8c\x182f\xfe\x00',b'8'],
 91:[b'\xf0\xc0\xc0\xc0\xc0\xc0\xf0\x00',b'7'],
 92:[b'\xc0`0\x18\x0c\x06\x02\x00',b'8'],
 93:[b'\xf000000\xf0\x00',b'7'],
 94:[b'\x108l\xc6\x00\x00\x00\x00',b'8'],
 95:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00',b'9'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 8, int(_g[c][1])

