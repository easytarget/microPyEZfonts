'''
    ezFBfont_08_amstrad_cpc_extended_ascii : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original amstrad_cpc_extended.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: amstrad_cpc_extended
# Cmd: ['bdf2dict.py'], ['Latin-1-bdf-sources/amstrad_cpc_extended.bdf', '_', './ascii-char.set']
# Date: 2024-06-18 20:27:07
'''
    Original Copyright, Comments and Notices from source:

    COPYRIGHT 
    COPYRIGHT Converted from OpenType font "Amstrad-CPC-extended.ttf" by "otf2bdf 3.0".
    COPYRIGHT 

    COMMENT "Copyright ruboku 2008"
'''
version = '0.33'
name = '-freetype-amstrad cpc extended-medium-r-normal--8-80-72-72-p-64-iso10646-1'
family = 'amstrad cpc extended'
weight = 'medium'
size = 8

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 126

_g = {
  32:b'\x00\x00\x00\x00\x00\x00\x00\x00\x06',
  33:b'\x18\x18\x18\x18\x18\x00\x18\x00\x06',
  34:b'lll\x00\x00\x00\x00\x00\x07',
  35:b'll\xfe|\xfell\x00\x08',
  36:b'\x18>X<\x1a|\x18\x00\x08',
  37:b'\x00\xc6\xcc\x180f\xc6\x00\x08',
  38:b'8l8v\xdc\xccv\x00\x08',
  39:b'\x18\x18\x18\x00\x00\x00\x00\x00\x06',
  40:b'\x0c\x18000\x18\x0c\x00\x07',
  41:b'0\x18\x0c\x0c\x0c\x180\x00\x07',
  42:b'\x00f<\xff<f\x00\x00\x08',
  43:b'\x00\x18\x18~\x18\x18\x00\x00\x08',
  44:b'\x00\x00\x00\x00\x00\x18\x180\x06',
  45:b'\x00\x00\x00~\x00\x00\x00\x00\x08',
  46:b'\x00\x00\x00\x00\x00\x18\x18\x00\x06',
  47:b'\x06\x0c\x180`\xc0\x80\x00\x08',
  48:b'|\xc6\xce\xd6\xe6\xc6|\x00\x08',
  49:b'\x188\x18\x18\x18\x18~\x00\x08',
  50:b'<f\x06<`f~\x00\x08',
  51:b'<F\x06\x1c\x06f<\x00\x08',
  52:b'\x188X\x98\xfe\x18<\x00\x08',
  53:b'~b`<\x06f<\x00\x08',
  54:b'<f`|ff<\x00\x08',
  55:b'~F\x0e\x0c\x18\x18\x18\x00\x08',
  56:b'<ff<ff<\x00\x08',
  57:b'<ff>\x06f<\x00\x08',
  58:b'\x00\x00\x18\x18\x00\x18\x18\x00\x06',
  59:b'\x00\x00\x18\x18\x00\x18\x180\x06',
  60:b'\x0c\x180`0\x18\x0c\x00\x07',
  61:b'\x00\x00~\x00\x00~\x00\x00\x08',
  62:b'`0\x18\x0c\x180`\x00\x07',
  63:b'<f\x06\x0c\x18\x00\x18\x00\x08',
  64:b'|\xc6\xde\xde\xde\xc0|\x00\x08',
  65:b'\x18<ff~ff\x00\x08',
  66:b'\xfcff|ff\xfc\x00\x08',
  67:b'<f\xc0\xc0\xc0f<\x00\x08',
  68:b'\xf8lfffl\xf8\x00\x08',
  69:b'\xfebhxhb\xfe\x00\x08',
  70:b'\xfebhxh`\xf0\x00\x08',
  71:b'<f\xc0\xc0\xce\xc6~\x00\x08',
  72:b'fff~fff\x00\x08',
  73:b'~\x18\x18\x18\x18\x18~\x00\x08',
  74:b'\x1e\x0c\x0c\x0c\xcc\xccx\x00\x08',
  75:b'\xe6flxlf\xe6\x00\x08',
  76:b'\xf0```bf\xfe\x00\x08',
  77:b'\xc6\xee\xfe\xfe\xd6\xc6\xc6\x00\x08',
  78:b'\xc6\xe6\xf6\xde\xce\xc6\xc6\x00\x08',
  79:b'8l\xc6\xc6\xc6l8\x00\x08',
  80:b'\xfcffx``\xf0\x00\x08',
  81:b'8l\xc6\xc6\xda\xccv\x00\x08',
  82:b'\xfcff|lf\xe2\x00\x08',
  83:b'<f`<\x06f<\x00\x08',
  84:b'~Z\x18\x18\x18\x18<\x00\x08',
  85:b'ffffff<\x00\x08',
  86:b'fffff<\x18\x00\x08',
  87:b'\xc6\xc6\xc6\xd6\xfe\xee\xc6\x00\x08',
  88:b'\xc6l88l\xc6\xc6\x00\x08',
  89:b'fff<\x18\x18<\x00\x08',
  90:b'\xfe\xc6\x8c\x182f\xfe\x00\x08',
  91:b'<00000<\x00\x07',
  92:b'\xc0`0\x18\x0c\x06\x02\x00\x08',
  93:b'<\x0c\x0c\x0c\x0c\x0c<\x00\x07',
  94:b'\x108l\xc6\x00\x00\x00\x00\x08',
  95:b'\x00\x00\x00\x00\x00\x00\x00\xff\x08',
  96:b'\x000\x18\x0c\x00\x00\x00\x00\x07',
  97:b'\x00\x00x\x0c|\xccv\x00\x08',
  98:b'\xe0\xe0|fff\xbc\x00\x08',
  99:b'\x00\x00<f`f<\x00\x08',
  100:b'\x1c\x0c|\xcc\xcc\xccv\x00\x08',
  101:b'\x00\x00<f~`<\x00\x08',
  102:b'\x1c60x00x\x00\x08',
  103:b'\x00\x00>ff>\x06|\x08',
  104:b'\xe0`lvff\xe6\x00\x08',
  105:b'\x18\x008\x18\x18\x18<\x00\x07',
  106:b'\x02\x00\x0e\x06\x06ff<\x08',
  107:b'\xe0`flxl\xe6\x00\x08',
  108:b'8\x18\x18\x18\x18\x18<\x00\x07',
  109:b'\x00\x00l\xfe\xd6\xd6\xc6\x00\x08',
  110:b'\x00\x00\xd8ffff\x00\x08',
  111:b'\x00\x00<fff<\x00\x08',
  112:b'\x00\x00\xdcff|`\xf0\x08',
  113:b'\x00\x00v\xcc\xcc|\x0c\x1e\x08',
  114:b'\x00\x00\xd8l``\xf0\x00\x07',
  115:b'\x00\x00<`<\x06|\x00\x08',
  116:b'00|006\x1c\x00\x08',
  117:b'\x00\x00ffff>\x00\x08',
  118:b'\x00\x00fff<\x18\x00\x08',
  119:b'\x00\x00\xc6\xd6\xd6\xfel\x00\x08',
  120:b'\x00\x00\xc6l8l\xc6\x00\x08',
  121:b'\x00\x00fff>\x06|\x08',
  122:b'\x00\x00~L\x180~\x00\x08',
  123:b'p\x18\x18\x0e\x18\x18p\x00\x08',
  124:b'\x18\x18\x18\x18\x18\x18\x18\x00\x06',
  125:b'\x0e\x18\x18p\x18\x18\x0e\x00\x08',
  126:b'v\xd8\x00\x00\x00\x00\x00\x00\x08',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 8, int(_g[c][-1])
