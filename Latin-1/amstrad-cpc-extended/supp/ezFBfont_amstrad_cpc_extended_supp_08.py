'''
    ezFBfont_amstrad_cpc_extended_supp_08 : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original amstrad_cpc_extended.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: amstrad_cpc_extended
# Cmd: ['bdf2dict.py'], ['Latin-1-bdf-sources/amstrad_cpc_extended.bdf', '_', './supp-char.set']
# Date: 2024-07-31 14:57:02
'''
    Original Copyright, Comments and Notices from source:

    COPYRIGHT 
    COPYRIGHT Converted from OpenType font "Amstrad-CPC-extended.ttf" by "otf2bdf 3.0".
    COPYRIGHT 

    COMMENT "Copyright ruboku 2008"
'''
version = '0.33'
name = '-freetype-amstrad cpc extended-medium-r-normal--8-80-72-72-p-64-iso10646-1'
family = 'amstrad cpc extended'
weight = 'medium'
size = 8

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 161

def max_ch():
    return 255

_g = {
  161:b'\x18\x00\x18\x18\x18\x18\x18\x00\x06',
  162:b'\x00\x10|\xd6\xd0\xd6|\x10\x08',
  163:b'<f`\xf8`f\xfe\x00\x08',
  164:b'\x00B<ff<B\x00\x08',
  165:b'f<~\x18~\x18<\x00\x08',
  166:b'\x18\x18\x18\x00\x18\x18\x18\x00\x06',
  167:b'\x1e08l80\xf0\x00\x08',
  168:b'ff\x00\x00\x00\x00\x00\x00\x08',
  169:b'8D\xba\xa2\xbaD8\x00\x08',
  170:b'p\x18x\xd8l\x00\xfc\x00\x07',
  171:b'\x006l\xd8l6\x00\x00\x08',
  172:b'\x00\x00\x00~\x02\x00\x00\x00\x08',
  173:b'\x00\x00\x00\x008\x00\x00\x00\x06',
  174:b'8D\xba\xb2\xaaD8\x00\x08',
  175:b'<\x00\x00\x00\x00\x00\x00\x00\x07',
  176:b'8lDl8\x00\x00\x00\x07',
  177:b'\x00\x18\x18~\x18\x18~\x00\x08',
  178:b'x\x0c8`|\x00\x00\x00\x07',
  179:b'x\x0c8\x0cx\x00\x00\x00\x07',
  180:b'\x18\x180\x00\x00\x00\x00\x00\x06',
  181:b'\x00\x00\x00fff|`\x08',
  182:b'~\xf4tt444\x00\x08',
  183:b'\x00\x00\x00\x18\x18\x00\x00\x00\x06',
  184:b'\x00\x00\x00\x00\x00\x088\x00\x06',
  185:b'8\x18\x18\x18<\x00\x00\x00\x07',
  186:b'8lDl8\x00|\x00\x07',
  187:b'\x00\xd8l6l\xd8\x00\x00\x08',
  188:b'@\xc0DLT\x1e\x04\x00\x08',
  189:b'@\xc0LRD\x08\x1e\x00\x08',
  190:b'\xe0\x10b\x16\xea\x0f\x02\x00\x08',
  191:b'\x18\x00\x180ff<\x00\x08',
  192:b'0\x00<f~ff\x00\x08',
  193:b'\x0c\x00<f~ff\x00\x08',
  194:b'\x18\x00<f~ff\x00\x08',
  195:b'<\x00<f~ff\x00\x08',
  196:b'f\x00<f~ff\x00\x08',
  197:b'\x18$<f~ff\x00\x08',
  198:b'\x1e:X\xde\xf8\xda\xde\x00\x08',
  199:b'<f\xc0\xc0f<\x18x\x08',
  200:b'`\x00\xfe`|`\xfe\x00\x08',
  201:b'\x18\x00\xfe`|`\xfe\x00\x08',
  202:b'<\x00\xfe`|`\xfe\x00\x08',
  203:b'l\x00\xfe`|`\xfe\x00\x08',
  204:b'0\x00~\x18\x18\x18~\x00\x08',
  205:b'\x0c\x00~\x18\x18\x18~\x00\x08',
  206:b'<\x00~\x18\x18\x18~\x00\x08',
  207:b'f\x00~\x18\x18\x18~\x00\x08',
  208:b'\xf8lf\xf6fl\xf8\x00\x08',
  209:b'2L\x00fvnf\x00\x08',
  210:b'0\x00|\xc6\xc6\xc6|\x00\x08',
  211:b'\x0c\x00|\xc6\xc6\xc6|\x00\x08',
  212:b'8\x00|\xc6\xc6\xc6|\x00\x08',
  213:b'|\x00|\xc6\xc6\xc6|\x00\x08',
  214:b'l\x00|\xc6\xc6\xc6|\x00\x08',
  215:b'\x00\xc6l88l\xc6\x00\x08',
  216:b';l\xde\xd6\xf6l\xb8\x00\x08',
  217:b'0\x00ffff<\x00\x08',
  218:b'\x0c\x00ffff<\x00\x08',
  219:b'<\x00ffff<\x00\x08',
  220:b'f\x00ffff<\x00\x08',
  221:b'0\x00ff<\x18<\x00\x08',
  222:b'\xc0\xf8\xc4\xc4\xc4\xf8\xc0\x00\x07',
  223:b'x\xc6\xc6\xfc\xc6\xc6\xf8\x00\x08',
  224:b'`\x00x\x0c|\xccv\x00\x08',
  225:b'\x18\x00x\x0c|\xccv\x00\x08',
  226:b'8\x00x\x0c|\xccv\x00\x08',
  227:b'|\x00x\x0c|\xccv\x00\x08',
  228:b'l\x00x\x0c|\xccv\x00\x08',
  229:b'0Hx\x0c|\xccv\x00\x08',
  230:b'\x00\x00|\x12~\xd8v\x00\x08',
  231:b'\x00\x00<b`>\x08\x18\x08',
  232:b'0\x00<f~`<\x00\x08',
  233:b'\x0c\x00<f~`<\x00\x08',
  234:b'<\x00<f~`<\x00\x08',
  235:b'f\x00<f~`<\x00\x08',
  236:b'0\x18\x008\x18\x18<\x00\x07',
  237:b'\x0c\x18\x008\x18\x18<\x00\x07',
  238:b'\x18$\x008\x18\x18<\x00\x07',
  239:b'\x00f\x008\x18\x18<\x00\x08',
  240:b'v\x18l\x1cff<\x00\x08',
  241:b'2L\x00\xdcfff\x00\x08',
  242:b'0\x18\x00<ff<\x00\x08',
  243:b'\x0c\x18\x00<ff<\x00\x08',
  244:b'\x18$\x00<ff<\x00\x08',
  245:b'2L\x00<ff<\x00\x08',
  246:b'\x00f\x00<ff<\x00\x08',
  247:b'\x18\x18\x00~\x00\x18\x18\x00\x08',
  248:b'\x00\x00\x03<nv<\xc0\x08',
  249:b'0\x18\x00fff>\x00\x08',
  250:b'\x0c\x18\x00fff>\x00\x08',
  251:b'\x18$\x00fff>\x00\x08',
  252:b'\x00f\x00fff>\x00\x08',
  253:b'\x0c\x18\x00ff>\x06|\x08',
  254:b'\x00@xDDx@\x00\x07',
  255:b'\x00f\x00ff>\x06|\x08',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 8, int(_g[c][-1])
