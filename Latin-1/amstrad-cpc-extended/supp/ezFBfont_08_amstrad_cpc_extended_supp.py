'''
    ezFBfont_08_amstrad_cpc_extended_supp : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original amstrad_cpc_extended.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Copyright ruboku 2008"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    COMMENT
    COMMENT Converted from OpenType font "Amstrad-CPC-extended.ttf" by "otf2bdf 3.0".
    COMMENT
'''
# Code generated by bdf2dict.py
# Font: amstrad_cpc_extended
# Cmd: [bdf2dict.py], ['Latin-1-bdf-sources/amstrad_cpc_extended.bdf', './supp-char.set', 'True']
# Date: 2024-06-11 17:33:38

version = '0.33'
name = '-FreeType-Amstrad CPC extended-Medium-R-Normal--8-80-72-72-P-64-ISO10646-1'
family = 'amstrad cpc extended'
weight = 'medium'
size = 8

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 9

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 161

def max_ch():
    return 255

_g = {
 161:[b'0\x0000000\x00',b'6'],
 162:[b'\x00\x10|\xd6\xd0\xd6|\x10',b'8'],
 163:[b'<f`\xf8`f\xfe\x00',b'8'],
 164:[b'\x00B<ff<B\x00',b'8'],
 165:[b'f<~\x18~\x18<\x00',b'8'],
 166:[b'000\x00000\x00',b'6'],
 167:[b'\x1e08l80\xf0\x00',b'8'],
 168:[b'ff\x00\x00\x00\x00\x00\x00',b'8'],
 169:[b'8D\xba\xa2\xbaD8\x00',b'8'],
 170:[b'p\x18x\xd8l\x00\xfc\x00',b'7'],
 171:[b'\x006l\xd8l6\x00\x00',b'8'],
 172:[b'\x00\x00\x00~\x02\x00\x00\x00',b'8'],
 173:[b'\x00\x00\x00\x00p\x00\x00\x00',b'6'],
 174:[b'8D\xba\xb2\xaaD8\x00',b'8'],
 175:[b'x\x00\x00\x00\x00\x00\x00\x00',b'7'],
 176:[b'8lDl8\x00\x00\x00',b'7'],
 177:[b'\x00\x18\x18~\x18\x18~\x00',b'8'],
 178:[b'x\x0c8`|\x00\x00\x00',b'7'],
 179:[b'x\x0c8\x0cx\x00\x00\x00',b'7'],
 180:[b'00`\x00\x00\x00\x00\x00',b'6'],
 181:[b'\x00\x00\x00fff|`',b'8'],
 182:[b'~\xf4tt444\x00',b'8'],
 183:[b'\x00\x00\x0000\x00\x00\x00',b'6'],
 184:[b'\x00\x00\x00\x00\x00\x10p\x00',b'6'],
 185:[b'p000x\x00\x00\x00',b'7'],
 186:[b'8lDl8\x00|\x00',b'7'],
 187:[b'\x00\xd8l6l\xd8\x00\x00',b'8'],
 188:[b'@\xc0DLT\x1e\x04\x00',b'8'],
 189:[b'@\xc0LRD\x08\x1e\x00',b'8'],
 190:[b'\xe0\x00\x10\x00b\x00\x16\x00\xea\x00\x0f\x00\x02\x00\x00\x00',b'9'],
 191:[b'\x18\x00\x180ff<\x00',b'8'],
 192:[b'0\x00<f~ff\x00',b'8'],
 193:[b'\x0c\x00<f~ff\x00',b'8'],
 194:[b'\x18\x00<f~ff\x00',b'8'],
 195:[b'<\x00<f~ff\x00',b'8'],
 196:[b'f\x00<f~ff\x00',b'8'],
 197:[b'\x18$<f~ff\x00',b'8'],
 198:[b'\x1e:X\xde\xf8\xda\xde\x00',b'8'],
 199:[b'<f\xc0\xc0f<\x18x',b'8'],
 200:[b'`\x00\xfe`|`\xfe\x00',b'8'],
 201:[b'\x18\x00\xfe`|`\xfe\x00',b'8'],
 202:[b'<\x00\xfe`|`\xfe\x00',b'8'],
 203:[b'l\x00\xfe`|`\xfe\x00',b'8'],
 204:[b'0\x00~\x18\x18\x18~\x00',b'8'],
 205:[b'\x0c\x00~\x18\x18\x18~\x00',b'8'],
 206:[b'<\x00~\x18\x18\x18~\x00',b'8'],
 207:[b'f\x00~\x18\x18\x18~\x00',b'8'],
 208:[b'\xf8lf\xf6fl\xf8\x00',b'8'],
 209:[b'2L\x00fvnf\x00',b'8'],
 210:[b'0\x00|\xc6\xc6\xc6|\x00',b'8'],
 211:[b'\x0c\x00|\xc6\xc6\xc6|\x00',b'8'],
 212:[b'8\x00|\xc6\xc6\xc6|\x00',b'8'],
 213:[b'|\x00|\xc6\xc6\xc6|\x00',b'8'],
 214:[b'l\x00|\xc6\xc6\xc6|\x00',b'8'],
 215:[b'\x00\xc6l88l\xc6\x00',b'8'],
 216:[b';\x00l\x00\xde\x00\xd6\x00\xf6\x00l\x00\xb8\x00\x00\x00',b'9'],
 217:[b'0\x00ffff<\x00',b'8'],
 218:[b'\x0c\x00ffff<\x00',b'8'],
 219:[b'<\x00ffff<\x00',b'8'],
 220:[b'f\x00ffff<\x00',b'8'],
 221:[b'0\x00ff<\x18<\x00',b'8'],
 222:[b'\xc0\xf8\xc4\xc4\xc4\xf8\xc0\x00',b'7'],
 223:[b'x\xc6\xc6\xfc\xc6\xc6\xf8\x00',b'8'],
 224:[b'`\x00x\x0c|\xccv\x00',b'8'],
 225:[b'\x18\x00x\x0c|\xccv\x00',b'8'],
 226:[b'8\x00x\x0c|\xccv\x00',b'8'],
 227:[b'|\x00x\x0c|\xccv\x00',b'8'],
 228:[b'l\x00x\x0c|\xccv\x00',b'8'],
 229:[b'0Hx\x0c|\xccv\x00',b'8'],
 230:[b'\x00\x00|\x12~\xd8v\x00',b'8'],
 231:[b'\x00\x00<b`>\x08\x18',b'8'],
 232:[b'0\x00<f~`<\x00',b'8'],
 233:[b'\x0c\x00<f~`<\x00',b'8'],
 234:[b'<\x00<f~`<\x00',b'8'],
 235:[b'f\x00<f~`<\x00',b'8'],
 236:[b'`0\x00p00x\x00',b'7'],
 237:[b'\x180\x00p00x\x00',b'7'],
 238:[b'0H\x00p00x\x00',b'7'],
 239:[b'\x00f\x008\x18\x18<\x00',b'8'],
 240:[b'v\x18l\x1cff<\x00',b'8'],
 241:[b'2L\x00\xdcfff\x00',b'8'],
 242:[b'0\x18\x00<ff<\x00',b'8'],
 243:[b'\x0c\x18\x00<ff<\x00',b'8'],
 244:[b'\x18$\x00<ff<\x00',b'8'],
 245:[b'2L\x00<ff<\x00',b'8'],
 246:[b'\x00f\x00<ff<\x00',b'8'],
 247:[b'\x18\x18\x00~\x00\x18\x18\x00',b'8'],
 248:[b'\x00\x00\x00\x00\x03\x00<\x00n\x00v\x00<\x00\xc0\x00',b'9'],
 249:[b'0\x18\x00fff>\x00',b'8'],
 250:[b'\x0c\x18\x00fff>\x00',b'8'],
 251:[b'\x18$\x00fff>\x00',b'8'],
 252:[b'\x00f\x00fff>\x00',b'8'],
 253:[b'\x0c\x18\x00ff>\x06|',b'8'],
 254:[b'\x00@xDDx@\x00',b'7'],
 255:[b'\x00f\x00ff>\x06|',b'8'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 8, int(_g[c][1])

