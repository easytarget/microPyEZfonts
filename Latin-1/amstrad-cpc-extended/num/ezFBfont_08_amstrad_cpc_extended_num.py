'''
    ezFBfont_08_amstrad_cpc_extended_num : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original amstrad_cpc_extended.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: amstrad_cpc_extended
# Cmd: ['bdf2dict.py'], ['Latin-1-bdf-sources/amstrad_cpc_extended.bdf', '_', './num-char.set']
# Date: 2024-06-18 20:27:07
'''
    Original Copyright, Comments and Notices from source:

    COPYRIGHT 
    COPYRIGHT Converted from OpenType font "Amstrad-CPC-extended.ttf" by "otf2bdf 3.0".
    COPYRIGHT 

    COMMENT "Copyright ruboku 2008"
'''
version = '0.33'
name = '-freetype-amstrad cpc extended-medium-r-normal--8-80-72-72-p-64-iso10646-1'
family = 'amstrad cpc extended'
weight = 'medium'
size = 8

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 176

_g = {
  32:b'\x00\x00\x00\x00\x00\x00\x00\x00\x06',
  37:b'\x00\xc6\xcc\x180f\xc6\x00\x08',
  40:b'\x0c\x18000\x18\x0c\x00\x07',
  41:b'0\x18\x0c\x0c\x0c\x180\x00\x07',
  42:b'\x00f<\xff<f\x00\x00\x08',
  43:b'\x00\x18\x18~\x18\x18\x00\x00\x08',
  44:b'\x00\x00\x00\x00\x00\x18\x180\x06',
  45:b'\x00\x00\x00~\x00\x00\x00\x00\x08',
  46:b'\x00\x00\x00\x00\x00\x18\x18\x00\x06',
  47:b'\x06\x0c\x180`\xc0\x80\x00\x08',
  48:b'|\xc6\xce\xd6\xe6\xc6|\x00\x08',
  49:b'\x188\x18\x18\x18\x18~\x00\x08',
  50:b'<f\x06<`f~\x00\x08',
  51:b'<F\x06\x1c\x06f<\x00\x08',
  52:b'\x188X\x98\xfe\x18<\x00\x08',
  53:b'~b`<\x06f<\x00\x08',
  54:b'<f`|ff<\x00\x08',
  55:b'~F\x0e\x0c\x18\x18\x18\x00\x08',
  56:b'<ff<ff<\x00\x08',
  57:b'<ff>\x06f<\x00\x08',
  58:b'\x00\x00\x18\x18\x00\x18\x18\x00\x06',
  176:b'8lDl8\x00\x00\x00\x07',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 8, int(_g[c][-1])
