'''
    ezFBfont_08_amstrad_cpc_extended_time : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original amstrad_cpc_extended.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Copyright ruboku 2008"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    COMMENT
    COMMENT Converted from OpenType font "Amstrad-CPC-extended.ttf" by "otf2bdf 3.0".
    COMMENT
'''
# Code generated by bdf2dict.py
# Font: amstrad_cpc_extended
# Cmd: [bdf2dict.py], ['Latin-1-bdf-sources/amstrad_cpc_extended.bdf', './time-char.set', 'True']
# Date: 2024-06-11 17:33:38

version = '0.33'
name = '-FreeType-Amstrad CPC extended-Medium-R-Normal--8-80-72-72-P-64-ISO10646-1'
family = 'amstrad cpc extended'
weight = 'medium'
size = 8

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 58

_g = {
 32:[b'\x00\x00\x00\x00\x00\x00\x00\x00',b'6'],
 43:[b'\x00\x18\x18~\x18\x18\x00\x00',b'8'],
 45:[b'\x00\x00\x00~\x00\x00\x00\x00',b'8'],
 46:[b'\x00\x00\x00\x00\x0000\x00',b'6'],
 48:[b'|\xc6\xce\xd6\xe6\xc6|\x00',b'8'],
 49:[b'\x188\x18\x18\x18\x18~\x00',b'8'],
 50:[b'<f\x06<`f~\x00',b'8'],
 51:[b'<F\x06\x1c\x06f<\x00',b'8'],
 52:[b'\x188X\x98\xfe\x18<\x00',b'8'],
 53:[b'~b`<\x06f<\x00',b'8'],
 54:[b'<f`|ff<\x00',b'8'],
 55:[b'~F\x0e\x0c\x18\x18\x18\x00',b'8'],
 56:[b'<ff<ff<\x00',b'8'],
 57:[b'<ff>\x06f<\x00',b'8'],
 58:[b'\x00\x0000\x0000\x00',b'6'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 8, int(_g[c][1])

