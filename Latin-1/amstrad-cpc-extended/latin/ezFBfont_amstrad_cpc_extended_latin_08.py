'''
    ezFBfont_amstrad_cpc_extended_latin_08 : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original amstrad_cpc_extended.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: amstrad_cpc_extended
# Cmd: ['bdf2dict.py'], ['Latin-1-bdf-sources/amstrad_cpc_extended.bdf', '_', './latin-char.set']
# Date: 2024-07-31 14:57:02
'''
    Original Copyright, Comments and Notices from source:

    COPYRIGHT 
    COPYRIGHT Converted from OpenType font "Amstrad-CPC-extended.ttf" by "otf2bdf 3.0".
    COPYRIGHT 

    COMMENT "Copyright ruboku 2008"
'''
version = '0.33'
name = '-freetype-amstrad cpc extended-medium-r-normal--8-80-72-72-p-64-iso10646-1'
family = 'amstrad cpc extended'
weight = 'medium'
size = 8

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 255

_g = {
  32:b'\x00\x00\x00\x00\x00\x00\x00\x00\x06',
  33:b'\x18\x18\x18\x18\x18\x00\x18\x00\x06',
  34:b'lll\x00\x00\x00\x00\x00\x07',
  35:b'll\xfe|\xfell\x00\x08',
  36:b'\x18>X<\x1a|\x18\x00\x08',
  37:b'\x00\xc6\xcc\x180f\xc6\x00\x08',
  38:b'8l8v\xdc\xccv\x00\x08',
  39:b'\x18\x18\x18\x00\x00\x00\x00\x00\x06',
  40:b'\x0c\x18000\x18\x0c\x00\x07',
  41:b'0\x18\x0c\x0c\x0c\x180\x00\x07',
  42:b'\x00f<\xff<f\x00\x00\x08',
  43:b'\x00\x18\x18~\x18\x18\x00\x00\x08',
  44:b'\x00\x00\x00\x00\x00\x18\x180\x06',
  45:b'\x00\x00\x00~\x00\x00\x00\x00\x08',
  46:b'\x00\x00\x00\x00\x00\x18\x18\x00\x06',
  47:b'\x06\x0c\x180`\xc0\x80\x00\x08',
  48:b'|\xc6\xce\xd6\xe6\xc6|\x00\x08',
  49:b'\x188\x18\x18\x18\x18~\x00\x08',
  50:b'<f\x06<`f~\x00\x08',
  51:b'<F\x06\x1c\x06f<\x00\x08',
  52:b'\x188X\x98\xfe\x18<\x00\x08',
  53:b'~b`<\x06f<\x00\x08',
  54:b'<f`|ff<\x00\x08',
  55:b'~F\x0e\x0c\x18\x18\x18\x00\x08',
  56:b'<ff<ff<\x00\x08',
  57:b'<ff>\x06f<\x00\x08',
  58:b'\x00\x00\x18\x18\x00\x18\x18\x00\x06',
  59:b'\x00\x00\x18\x18\x00\x18\x180\x06',
  60:b'\x0c\x180`0\x18\x0c\x00\x07',
  61:b'\x00\x00~\x00\x00~\x00\x00\x08',
  62:b'`0\x18\x0c\x180`\x00\x07',
  63:b'<f\x06\x0c\x18\x00\x18\x00\x08',
  64:b'|\xc6\xde\xde\xde\xc0|\x00\x08',
  65:b'\x18<ff~ff\x00\x08',
  66:b'\xfcff|ff\xfc\x00\x08',
  67:b'<f\xc0\xc0\xc0f<\x00\x08',
  68:b'\xf8lfffl\xf8\x00\x08',
  69:b'\xfebhxhb\xfe\x00\x08',
  70:b'\xfebhxh`\xf0\x00\x08',
  71:b'<f\xc0\xc0\xce\xc6~\x00\x08',
  72:b'fff~fff\x00\x08',
  73:b'~\x18\x18\x18\x18\x18~\x00\x08',
  74:b'\x1e\x0c\x0c\x0c\xcc\xccx\x00\x08',
  75:b'\xe6flxlf\xe6\x00\x08',
  76:b'\xf0```bf\xfe\x00\x08',
  77:b'\xc6\xee\xfe\xfe\xd6\xc6\xc6\x00\x08',
  78:b'\xc6\xe6\xf6\xde\xce\xc6\xc6\x00\x08',
  79:b'8l\xc6\xc6\xc6l8\x00\x08',
  80:b'\xfcffx``\xf0\x00\x08',
  81:b'8l\xc6\xc6\xda\xccv\x00\x08',
  82:b'\xfcff|lf\xe2\x00\x08',
  83:b'<f`<\x06f<\x00\x08',
  84:b'~Z\x18\x18\x18\x18<\x00\x08',
  85:b'ffffff<\x00\x08',
  86:b'fffff<\x18\x00\x08',
  87:b'\xc6\xc6\xc6\xd6\xfe\xee\xc6\x00\x08',
  88:b'\xc6l88l\xc6\xc6\x00\x08',
  89:b'fff<\x18\x18<\x00\x08',
  90:b'\xfe\xc6\x8c\x182f\xfe\x00\x08',
  91:b'<00000<\x00\x07',
  92:b'\xc0`0\x18\x0c\x06\x02\x00\x08',
  93:b'<\x0c\x0c\x0c\x0c\x0c<\x00\x07',
  94:b'\x108l\xc6\x00\x00\x00\x00\x08',
  95:b'\x00\x00\x00\x00\x00\x00\x00\xff\x08',
  96:b'\x000\x18\x0c\x00\x00\x00\x00\x07',
  97:b'\x00\x00x\x0c|\xccv\x00\x08',
  98:b'\xe0\xe0|fff\xbc\x00\x08',
  99:b'\x00\x00<f`f<\x00\x08',
  100:b'\x1c\x0c|\xcc\xcc\xccv\x00\x08',
  101:b'\x00\x00<f~`<\x00\x08',
  102:b'\x1c60x00x\x00\x08',
  103:b'\x00\x00>ff>\x06|\x08',
  104:b'\xe0`lvff\xe6\x00\x08',
  105:b'\x18\x008\x18\x18\x18<\x00\x07',
  106:b'\x02\x00\x0e\x06\x06ff<\x08',
  107:b'\xe0`flxl\xe6\x00\x08',
  108:b'8\x18\x18\x18\x18\x18<\x00\x07',
  109:b'\x00\x00l\xfe\xd6\xd6\xc6\x00\x08',
  110:b'\x00\x00\xd8ffff\x00\x08',
  111:b'\x00\x00<fff<\x00\x08',
  112:b'\x00\x00\xdcff|`\xf0\x08',
  113:b'\x00\x00v\xcc\xcc|\x0c\x1e\x08',
  114:b'\x00\x00\xd8l``\xf0\x00\x07',
  115:b'\x00\x00<`<\x06|\x00\x08',
  116:b'00|006\x1c\x00\x08',
  117:b'\x00\x00ffff>\x00\x08',
  118:b'\x00\x00fff<\x18\x00\x08',
  119:b'\x00\x00\xc6\xd6\xd6\xfel\x00\x08',
  120:b'\x00\x00\xc6l8l\xc6\x00\x08',
  121:b'\x00\x00fff>\x06|\x08',
  122:b'\x00\x00~L\x180~\x00\x08',
  123:b'p\x18\x18\x0e\x18\x18p\x00\x08',
  124:b'\x18\x18\x18\x18\x18\x18\x18\x00\x06',
  125:b'\x0e\x18\x18p\x18\x18\x0e\x00\x08',
  126:b'v\xd8\x00\x00\x00\x00\x00\x00\x08',
  161:b'\x18\x00\x18\x18\x18\x18\x18\x00\x06',
  162:b'\x00\x10|\xd6\xd0\xd6|\x10\x08',
  163:b'<f`\xf8`f\xfe\x00\x08',
  164:b'\x00B<ff<B\x00\x08',
  165:b'f<~\x18~\x18<\x00\x08',
  166:b'\x18\x18\x18\x00\x18\x18\x18\x00\x06',
  167:b'\x1e08l80\xf0\x00\x08',
  168:b'ff\x00\x00\x00\x00\x00\x00\x08',
  169:b'8D\xba\xa2\xbaD8\x00\x08',
  170:b'p\x18x\xd8l\x00\xfc\x00\x07',
  171:b'\x006l\xd8l6\x00\x00\x08',
  172:b'\x00\x00\x00~\x02\x00\x00\x00\x08',
  173:b'\x00\x00\x00\x008\x00\x00\x00\x06',
  174:b'8D\xba\xb2\xaaD8\x00\x08',
  175:b'<\x00\x00\x00\x00\x00\x00\x00\x07',
  176:b'8lDl8\x00\x00\x00\x07',
  177:b'\x00\x18\x18~\x18\x18~\x00\x08',
  178:b'x\x0c8`|\x00\x00\x00\x07',
  179:b'x\x0c8\x0cx\x00\x00\x00\x07',
  180:b'\x18\x180\x00\x00\x00\x00\x00\x06',
  181:b'\x00\x00\x00fff|`\x08',
  182:b'~\xf4tt444\x00\x08',
  183:b'\x00\x00\x00\x18\x18\x00\x00\x00\x06',
  184:b'\x00\x00\x00\x00\x00\x088\x00\x06',
  185:b'8\x18\x18\x18<\x00\x00\x00\x07',
  186:b'8lDl8\x00|\x00\x07',
  187:b'\x00\xd8l6l\xd8\x00\x00\x08',
  188:b'@\xc0DLT\x1e\x04\x00\x08',
  189:b'@\xc0LRD\x08\x1e\x00\x08',
  190:b'\xe0\x10b\x16\xea\x0f\x02\x00\x08',
  191:b'\x18\x00\x180ff<\x00\x08',
  192:b'0\x00<f~ff\x00\x08',
  193:b'\x0c\x00<f~ff\x00\x08',
  194:b'\x18\x00<f~ff\x00\x08',
  195:b'<\x00<f~ff\x00\x08',
  196:b'f\x00<f~ff\x00\x08',
  197:b'\x18$<f~ff\x00\x08',
  198:b'\x1e:X\xde\xf8\xda\xde\x00\x08',
  199:b'<f\xc0\xc0f<\x18x\x08',
  200:b'`\x00\xfe`|`\xfe\x00\x08',
  201:b'\x18\x00\xfe`|`\xfe\x00\x08',
  202:b'<\x00\xfe`|`\xfe\x00\x08',
  203:b'l\x00\xfe`|`\xfe\x00\x08',
  204:b'0\x00~\x18\x18\x18~\x00\x08',
  205:b'\x0c\x00~\x18\x18\x18~\x00\x08',
  206:b'<\x00~\x18\x18\x18~\x00\x08',
  207:b'f\x00~\x18\x18\x18~\x00\x08',
  208:b'\xf8lf\xf6fl\xf8\x00\x08',
  209:b'2L\x00fvnf\x00\x08',
  210:b'0\x00|\xc6\xc6\xc6|\x00\x08',
  211:b'\x0c\x00|\xc6\xc6\xc6|\x00\x08',
  212:b'8\x00|\xc6\xc6\xc6|\x00\x08',
  213:b'|\x00|\xc6\xc6\xc6|\x00\x08',
  214:b'l\x00|\xc6\xc6\xc6|\x00\x08',
  215:b'\x00\xc6l88l\xc6\x00\x08',
  216:b';l\xde\xd6\xf6l\xb8\x00\x08',
  217:b'0\x00ffff<\x00\x08',
  218:b'\x0c\x00ffff<\x00\x08',
  219:b'<\x00ffff<\x00\x08',
  220:b'f\x00ffff<\x00\x08',
  221:b'0\x00ff<\x18<\x00\x08',
  222:b'\xc0\xf8\xc4\xc4\xc4\xf8\xc0\x00\x07',
  223:b'x\xc6\xc6\xfc\xc6\xc6\xf8\x00\x08',
  224:b'`\x00x\x0c|\xccv\x00\x08',
  225:b'\x18\x00x\x0c|\xccv\x00\x08',
  226:b'8\x00x\x0c|\xccv\x00\x08',
  227:b'|\x00x\x0c|\xccv\x00\x08',
  228:b'l\x00x\x0c|\xccv\x00\x08',
  229:b'0Hx\x0c|\xccv\x00\x08',
  230:b'\x00\x00|\x12~\xd8v\x00\x08',
  231:b'\x00\x00<b`>\x08\x18\x08',
  232:b'0\x00<f~`<\x00\x08',
  233:b'\x0c\x00<f~`<\x00\x08',
  234:b'<\x00<f~`<\x00\x08',
  235:b'f\x00<f~`<\x00\x08',
  236:b'0\x18\x008\x18\x18<\x00\x07',
  237:b'\x0c\x18\x008\x18\x18<\x00\x07',
  238:b'\x18$\x008\x18\x18<\x00\x07',
  239:b'\x00f\x008\x18\x18<\x00\x08',
  240:b'v\x18l\x1cff<\x00\x08',
  241:b'2L\x00\xdcfff\x00\x08',
  242:b'0\x18\x00<ff<\x00\x08',
  243:b'\x0c\x18\x00<ff<\x00\x08',
  244:b'\x18$\x00<ff<\x00\x08',
  245:b'2L\x00<ff<\x00\x08',
  246:b'\x00f\x00<ff<\x00\x08',
  247:b'\x18\x18\x00~\x00\x18\x18\x00\x08',
  248:b'\x00\x00\x03<nv<\xc0\x08',
  249:b'0\x18\x00fff>\x00\x08',
  250:b'\x0c\x18\x00fff>\x00\x08',
  251:b'\x18$\x00fff>\x00\x08',
  252:b'\x00f\x00fff>\x00\x08',
  253:b'\x0c\x18\x00ff>\x06|\x08',
  254:b'\x00@xDDx@\x00\x07',
  255:b'\x00f\x00ff>\x06|\x08',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 8, int(_g[c][-1])
