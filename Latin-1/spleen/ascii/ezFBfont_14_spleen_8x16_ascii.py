'''
    ezFBfont_14_spleen_8x16_ascii : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original spleen_8x16.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: spleen_8x16
# Cmd: ['bdf2dict.py'], ['Latin-1-bdf-sources/spleen-8x16.bdf', '_', './ascii-char.set']
# Date: 2024-06-18 20:27:42
'''
    Original Copyright, Comments and Notices from source:

    COPYRIGHT /*
    COPYRIGHT * Spleen 8x16 1.9.1
    COPYRIGHT * Copyright (c) 2018-2022, Frederic Cambus
    COPYRIGHT * https://www.cambus.net/
    COPYRIGHT *
    COPYRIGHT * Created:      2018-08-11
    COPYRIGHT * Last Updated: 2020-10-10
    COPYRIGHT *
    COPYRIGHT * Spleen is released under the BSD 2-Clause license.
    COPYRIGHT * See LICENSE file for details.
    COPYRIGHT *
    COPYRIGHT * SPDX-License-Identifier: BSD-2-Clause
    COPYRIGHT */

    COMMENT "Copyright (c) 2018-2022, Frederic Cambus"
'''
version = '0.33'
name = '-misc-spleen-medium-r-normal--16-160-72-72-c-80-iso10646-1'
family = 'spleen'
weight = 'medium'
size = 16

def height():
    return 14

def baseline():
    return 11

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 126

_g = {
  32:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  33:b'\x00\x18\x18\x18\x18\x18\x18\x18\x00\x18\x18\x00\x00\x00',
  34:b'ffff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  35:b'\x00ll\xfellll\xfell\x00\x00\x00',
  36:b'\x10~\xd0\xd0\xd0|\x16\x16\x16\x16\xfc\x10\x00\x00',
  37:b'\x00\x06fl\x0c\x18\x1806f`\x00\x00\x00',
  38:b'\x008lll8p\xda\xcc\xccz\x00\x00\x00',
  39:b'\x18\x18\x18\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  40:b'\x0e\x1800````00\x18\x0e\x00\x00',
  41:b'p\x18\x0c\x0c\x06\x06\x06\x06\x0c\x0c\x18p\x00\x00',
  42:b'\x00\x00\x00f<\x18\xff\x18<f\x00\x00\x00\x00',
  43:b'\x00\x00\x00\x00\x18\x18~\x18\x18\x00\x00\x00\x00\x00',
  44:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x180\x00\x00',
  45:b'\x00\x00\x00\x00\x00\x00~\x00\x00\x00\x00\x00\x00\x00',
  46:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x18\x00\x00\x00',
  47:b'\x06\x06\x0c\x0c\x18\x1800``\xc0\xc0\x00\x00',
  48:b'\x00|\xc6\xc6\xce\xde\xf6\xe6\xc6\xc6|\x00\x00\x00',
  49:b'\x00\x188xX\x18\x18\x18\x18\x18~\x00\x00\x00',
  50:b'\x00|\xc6\x06\x06\x0c\x180`\xc6\xfe\x00\x00\x00',
  51:b'\x00|\xc6\x06\x06<\x06\x06\x06\xc6|\x00\x00\x00',
  52:b'\x00\xc0\xc0\xcc\xcc\xcc\xcc\xfe\x0c\x0c\x0c\x00\x00\x00',
  53:b'\x00\xfe\xc6\xc0\xc0\xfc\x06\x06\x06\xc6|\x00\x00\x00',
  54:b'\x00|\xc6\xc0\xc0\xfc\xc6\xc6\xc6\xc6|\x00\x00\x00',
  55:b'\x00\xfe\xc6\x06\x06\x0c\x180000\x00\x00\x00',
  56:b'\x00|\xc6\xc6\xc6|\xc6\xc6\xc6\xc6|\x00\x00\x00',
  57:b'\x00|\xc6\xc6\xc6\xc6~\x06\x06\xc6|\x00\x00\x00',
  58:b'\x00\x00\x00\x00\x18\x18\x00\x00\x00\x18\x18\x00\x00\x00',
  59:b'\x00\x00\x00\x00\x18\x18\x00\x00\x00\x18\x180\x00\x00',
  60:b'\x00\x06\x0c\x180``0\x18\x0c\x06\x00\x00\x00',
  61:b'\x00\x00\x00\x00~\x00\x00~\x00\x00\x00\x00\x00\x00',
  62:b'\x00`0\x18\x0c\x06\x06\x0c\x180`\x00\x00\x00',
  63:b'\x00|\xc6\x06\x0c\x1800\x0000\x00\x00\x00',
  64:b'\x00\x00|\xc2\xda\xda\xda\xda\xde\xc0|\x00\x00\x00',
  65:b'\x00|\xc6\xc6\xc6\xfe\xc6\xc6\xc6\xc6\xc6\x00\x00\x00',
  66:b'\x00\xfc\xc6\xc6\xc6\xfc\xc6\xc6\xc6\xc6\xfc\x00\x00\x00',
  67:b'\x00~\xc0\xc0\xc0\xc0\xc0\xc0\xc0\xc0~\x00\x00\x00',
  68:b'\x00\xfc\xc6\xc6\xc6\xc6\xc6\xc6\xc6\xc6\xfc\x00\x00\x00',
  69:b'\x00~\xc0\xc0\xc0\xf8\xc0\xc0\xc0\xc0~\x00\x00\x00',
  70:b'\x00~\xc0\xc0\xc0\xf8\xc0\xc0\xc0\xc0\xc0\x00\x00\x00',
  71:b'\x00~\xc0\xc0\xc0\xde\xc6\xc6\xc6\xc6~\x00\x00\x00',
  72:b'\x00\xc6\xc6\xc6\xc6\xfe\xc6\xc6\xc6\xc6\xc6\x00\x00\x00',
  73:b'\x00~\x18\x18\x18\x18\x18\x18\x18\x18~\x00\x00\x00',
  74:b'\x00~\x18\x18\x18\x18\x18\x18\x18\x18\xf0\x00\x00\x00',
  75:b'\x00\xc6\xc6\xc6\xcc\xf8\xcc\xc6\xc6\xc6\xc6\x00\x00\x00',
  76:b'\x00\xc0\xc0\xc0\xc0\xc0\xc0\xc0\xc0\xc0~\x00\x00\x00',
  77:b'\x00\xc6\xee\xfe\xd6\xc6\xc6\xc6\xc6\xc6\xc6\x00\x00\x00',
  78:b'\x00\xc6\xc6\xe6\xe6\xd6\xd6\xce\xce\xc6\xc6\x00\x00\x00',
  79:b'\x00|\xc6\xc6\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00\x00',
  80:b'\x00\xfc\xc6\xc6\xc6\xfc\xc0\xc0\xc0\xc0\xc0\x00\x00\x00',
  81:b'\x00|\xc6\xc6\xc6\xc6\xc6\xc6\xd6\xd6|\x18\x0c\x00',
  82:b'\x00\xfc\xc6\xc6\xc6\xfc\xc6\xc6\xc6\xc6\xc6\x00\x00\x00',
  83:b'\x00~\xc0\xc0\xc0|\x06\x06\x06\x06\xfc\x00\x00\x00',
  84:b'\x00\xff\x18\x18\x18\x18\x18\x18\x18\x18\x18\x00\x00\x00',
  85:b'\x00\xc6\xc6\xc6\xc6\xc6\xc6\xc6\xc6\xc6~\x00\x00\x00',
  86:b'\x00\xc6\xc6\xc6\xc6\xc6\xc6\xc6l8\x10\x00\x00\x00',
  87:b'\x00\xc6\xc6\xc6\xc6\xc6\xc6\xd6\xfe\xee\xc6\x00\x00\x00',
  88:b'\x00\xc6\xc6\xc6l8l\xc6\xc6\xc6\xc6\x00\x00\x00',
  89:b'\x00\xc6\xc6\xc6\xc6~\x06\x06\x06\x06\xfc\x00\x00\x00',
  90:b'\x00\xfe\x06\x06\x0c\x180`\xc0\xc0\xfe\x00\x00\x00',
  91:b'>0000000000>\x00\x00',
  92:b'\xc0\xc0``00\x18\x18\x0c\x0c\x06\x06\x00\x00',
  93:b'|\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c|\x00\x00',
  94:b'\x108l\xc6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  95:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe',
  96:b'0\x18\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  97:b'\x00\x00\x00\x00|\x06~\xc6\xc6\xc6~\x00\x00\x00',
  98:b'\x00\xc0\xc0\xc0\xfc\xc6\xc6\xc6\xc6\xc6\xfc\x00\x00\x00',
  99:b'\x00\x00\x00\x00~\xc0\xc0\xc0\xc0\xc0~\x00\x00\x00',
  100:b'\x00\x06\x06\x06~\xc6\xc6\xc6\xc6\xc6~\x00\x00\x00',
  101:b'\x00\x00\x00\x00~\xc6\xc6\xfe\xc0\xc0~\x00\x00\x00',
  102:b'\x00\x1e000|00000\x00\x00\x00',
  103:b'\x00\x00\x00\x00~\xc6\xc6\xc6\xc6\xc6|\x06\x06\xfc',
  104:b'\x00\xc0\xc0\xc0\xfc\xc6\xc6\xc6\xc6\xc6\xc6\x00\x00\x00',
  105:b'\x00\x18\x18\x008\x18\x18\x18\x18\x18\x1c\x00\x00\x00',
  106:b'\x00\x18\x18\x00\x18\x18\x18\x18\x18\x18\x18\x18\x18p',
  107:b'\x00\xc0\xc0\xc0\xcc\xd8\xf0\xf0\xd8\xcc\xc6\x00\x00\x00',
  108:b'\x00000000000\x1c\x00\x00\x00',
  109:b'\x00\x00\x00\x00\xec\xd6\xd6\xd6\xd6\xc6\xc6\x00\x00\x00',
  110:b'\x00\x00\x00\x00\xfc\xc6\xc6\xc6\xc6\xc6\xc6\x00\x00\x00',
  111:b'\x00\x00\x00\x00|\xc6\xc6\xc6\xc6\xc6|\x00\x00\x00',
  112:b'\x00\x00\x00\x00\xfc\xc6\xc6\xc6\xc6\xc6\xfc\xc0\xc0\xc0',
  113:b'\x00\x00\x00\x00~\xc6\xc6\xc6\xc6\xc6~\x06\x06\x06',
  114:b'\x00\x00\x00\x00~\xc6\xc0\xc0\xc0\xc0\xc0\x00\x00\x00',
  115:b'\x00\x00\x00\x00~\xc0\xc0|\x06\x06\xfc\x00\x00\x00',
  116:b'\x00000|00000\x1e\x00\x00\x00',
  117:b'\x00\x00\x00\x00\xc6\xc6\xc6\xc6\xc6\xc6~\x00\x00\x00',
  118:b'\x00\x00\x00\x00\xc6\xc6\xc6\xc6l8\x10\x00\x00\x00',
  119:b'\x00\x00\x00\x00\xc6\xc6\xd6\xd6\xd6\xd6n\x00\x00\x00',
  120:b'\x00\x00\x00\x00\xc6l88l\xc6\xc6\x00\x00\x00',
  121:b'\x00\x00\x00\x00\xc6\xc6\xc6\xc6\xc6\xc6~\x06\x06\xfc',
  122:b'\x00\x00\x00\x00\xfe\x06\x0c\x180`\xfe\x00\x00\x00',
  123:b'\x0e\x18\x18\x18\x18pp\x18\x18\x18\x18\x0e\x00\x00',
  124:b'\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x00\x00',
  125:b'p\x18\x18\x18\x18\x0e\x0e\x18\x18\x18\x18p\x00\x00',
  126:b'\x00\x00\x00\x00\x002~L\x00\x00\x00\x00\x00\x00',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 14, 8
