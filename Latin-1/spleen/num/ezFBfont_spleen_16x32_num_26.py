'''
    ezFBfont_spleen_16x32_num_26 : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original spleen_16x32.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: spleen_16x32
# Cmd: ['bdf2dict.py'], ['Latin-1-bdf-sources/spleen-16x32.bdf', '_', './num-char.set']
# Date: 2024-07-31 14:57:34
'''
    Original Copyright, Comments and Notices from source:

    COPYRIGHT /*
    COPYRIGHT * Spleen 16x32 1.9.1
    COPYRIGHT * Copyright (c) 2018-2022, Frederic Cambus
    COPYRIGHT * https://www.cambus.net/
    COPYRIGHT *
    COPYRIGHT * Created:      2018-08-12
    COPYRIGHT * Last Updated: 2020-10-10
    COPYRIGHT *
    COPYRIGHT * Spleen is released under the BSD 2-Clause license.
    COPYRIGHT * See LICENSE file for details.
    COPYRIGHT *
    COPYRIGHT * SPDX-License-Identifier: BSD-2-Clause
    COPYRIGHT */

    COMMENT "Copyright (c) 2018-2022, Frederic Cambus"
'''
version = '0.33'
name = '-misc-spleen-medium-r-normal--32-320-72-72-c-160-iso10646-1'
family = 'spleen'
weight = 'medium'
size = 32

def height():
    return 26

def baseline():
    return 23

def max_width():
    return 16

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 176

_g = {
  32:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  37:b'\x00\x00\x00\x00\x00\x00\x00\x0c\x0e\x0c\x1b\x18\x1b\x18\x1b0\x0e0\x00`\x00`\x00\xc0\x00\xc0\x01\x80\x01\x80\x03\x00\x03\x00\x068\x06l\x0cl\x0cl\x188\x18\x00\x00\x00\x00\x00\x00\x00',
  40:b'\x00<\x00\xfc\x01\xe0\x03\x80\x07\x00\x06\x00\x0e\x00\x0c\x00\x1c\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18\x00\x1c\x00\x0c\x00\x0e\x00\x06\x00\x07\x00\x03\x80\x01\xe0\x00\xfc\x00<',
  41:b'<\x00?\x00\x07\x80\x01\xc0\x00\xe0\x00`\x00p\x000\x008\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18\x008\x000\x00p\x00`\x00\xe0\x01\xc0\x07\x80?\x00<\x00',
  42:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x18\x1c8\x0ep\x07\xe0\x03\xc0\x03\xc0\x7f\xfe\x7f\xfe\x03\xc0\x03\xc0\x07\xe0\x0ep\x1c8\x18\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  43:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x80\x01\x80\x01\x80\x01\x80\x1f\xf8\x1f\xf8\x01\x80\x01\x80\x01\x80\x01\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  44:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x80\x01\x80\x01\x80\x03\x80\x07\x00\x06\x00\x00\x00',
  45:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xfc?\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  46:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x80\x01\x80\x01\x80\x00\x00\x00\x00\x00\x00',
  47:b'\x00\x06\x00\x06\x00\x0c\x00\x0c\x00\x18\x00\x18\x000\x000\x00`\x00`\x00\xc0\x00\xc0\x01\x80\x01\x80\x03\x00\x03\x00\x06\x00\x06\x00\x0c\x00\x0c\x00\x18\x00\x18\x000\x000\x00`\x00`\x00',
  48:b'\x00\x00\x00\x00\x00\x00\x0f\xf0\x1f\xf88\x1c0\x0c0\x0c0\x1c0<0|0\xec1\xcc3\x8c7\x0c>\x0c<\x0c8\x0c0\x0c0\x0c8\x1c\x1f\xf8\x0f\xf0\x00\x00\x00\x00\x00\x00',
  49:b'\x00\x00\x00\x00\x00\x00\x03\x80\x07\x80\r\x80\x19\x80\x11\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x1f\xf8\x1f\xf8\x00\x00\x00\x00\x00\x00',
  50:b'\x00\x00\x00\x00\x00\x00\x0f\xf0\x1f\xf88\x1c0\x0c\x00\x0c\x00\x0c\x00\x0c\x00\x18\x000\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x18\x000\x0c0\x0c?\xfc?\xfc\x00\x00\x00\x00\x00\x00',
  51:b'\x00\x00\x00\x00\x00\x00\x0f\xf0\x1f\xf88\x1c0\x0c\x00\x0c\x00\x0c\x00\x0c\x00\x18\x07\xf0\x07\xf0\x00\x18\x00\x0c\x00\x0c\x00\x0c\x00\x0c\x00\x0c0\x0c8\x1c\x1f\xf8\x0f\xf0\x00\x00\x00\x00\x00\x00',
  52:b'\x00\x00\x00\x00\x00\x000\x000\x000\x000\x000000000000000000?\xfc?\xfc\x000\x000\x000\x000\x000\x000\x00\x00\x00\x00\x00\x00',
  53:b'\x00\x00\x00\x00\x00\x00?\xfc?\xfc0\x0c0\x0c0\x000\x000\x000\x00?\xf0?\xf8\x00\x1c\x00\x0c\x00\x0c\x00\x0c\x00\x0c\x00\x0c0\x0c8\x1c\x1f\xf8\x0f\xf0\x00\x00\x00\x00\x00\x00',
  54:b'\x00\x00\x00\x00\x00\x00\x0f\xf0\x1f\xf88\x1c0\x0c0\x000\x000\x000\x00?\xf0?\xf80\x1c0\x0c0\x0c0\x0c0\x0c0\x0c0\x0c8\x1c\x1f\xf8\x0f\xf0\x00\x00\x00\x00\x00\x00',
  55:b'\x00\x00\x00\x00\x00\x00?\xfc?\xfc0\x0c0\x0c\x00\x0c\x00\x0c\x00\x0c\x00\x18\x000\x00`\x00\xc0\x01\x80\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x00\x00\x00\x00\x00\x00',
  56:b'\x00\x00\x00\x00\x00\x00\x0f\xf0\x1f\xf88\x1c0\x0c0\x0c0\x0c0\x0c\x18\x18\x0f\xf0\x0f\xf0\x18\x180\x0c0\x0c0\x0c0\x0c0\x0c0\x0c8\x1c\x1f\xf8\x0f\xf0\x00\x00\x00\x00\x00\x00',
  57:b'\x00\x00\x00\x00\x00\x00\x0f\xf0\x1f\xf88\x1c0\x0c0\x0c0\x0c0\x0c0\x0c0\x0c8\x0c\x1f\xfc\x0f\xfc\x00\x0c\x00\x0c\x00\x0c\x00\x0c0\x0c8\x1c\x1f\xf8\x0f\xf0\x00\x00\x00\x00\x00\x00',
  58:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x80\x01\x80\x01\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x80\x01\x80\x01\x80\x00\x00\x00\x00\x00\x00',
  176:b'\x00\x00\x00\x00\x03\xc0\x07\xe0\x0ep\x0c0\x0c0\x0c0\x0ep\x07\xe0\x03\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 26, 16
