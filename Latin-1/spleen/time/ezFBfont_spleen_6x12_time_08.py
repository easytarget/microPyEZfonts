'''
    ezFBfont_spleen_6x12_time_08 : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original spleen_6x12.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: spleen_6x12
# Cmd: ['bdf2dict.py'], ['Latin-1-bdf-sources/spleen-6x12.bdf', '_', './time-char.set']
# Date: 2024-07-31 14:57:37
'''
    Original Copyright, Comments and Notices from source:

    COPYRIGHT /*
    COPYRIGHT * Spleen 6x12 1.9.1
    COPYRIGHT * Copyright (c) 2018-2022, Frederic Cambus
    COPYRIGHT * https://www.cambus.net/
    COPYRIGHT *
    COPYRIGHT * Created:      2020-04-08
    COPYRIGHT * Last Updated: 2021-03-12
    COPYRIGHT *
    COPYRIGHT * Spleen is released under the BSD 2-Clause license.
    COPYRIGHT * See LICENSE file for details.
    COPYRIGHT *
    COPYRIGHT * SPDX-License-Identifier: BSD-2-Clause
    COPYRIGHT */

    COMMENT "Copyright (c) 2018-2022, Frederic Cambus"
'''
version = '0.33'
name = '-misc-spleen-medium-r-normal--12-120-72-72-c-60-iso10646-1'
family = 'spleen'
weight = 'medium'
size = 12

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 6

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 58

_g = {
  32:b'\x00\x00\x00\x00\x00\x00\x00\x00',
  43:b'\x00\x00  \xf8  \x00',
  45:b'\x00\x00\x00\x00\xf8\x00\x00\x00',
  46:b'\x00\x00\x00\x00\x00\x00\x00 ',
  48:b'p\x88\x98\xa8\xc8\x88\x88p',
  49:b' `     p',
  50:b'p\x88\x08\x08p\x80\x80\xf8',
  51:b'p\x88\x080\x08\x08\x88p',
  52:b'\x80\x80\x90\x90\x90\xf8\x10\x10',
  53:b'\xf8\x80\x80\xf0\x08\x08\x08\xf0',
  54:b'p\x80\x80\xf0\x88\x88\x88p',
  55:b'\xf8\x88\x08\x10    ',
  56:b'p\x88\x88p\x88\x88\x88p',
  57:b'p\x88\x88\x88x\x08\x08p',
  58:b'\x00\x00\x00 \x00\x00\x00 ',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 8, 6
