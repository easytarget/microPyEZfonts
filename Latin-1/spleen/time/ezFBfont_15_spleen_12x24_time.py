'''
    ezFBfont_15_spleen_12x24_time : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original spleen_12x24.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: spleen_12x24
# Cmd: ['bdf2dict.py'], ['Latin-1-bdf-sources/spleen-12x24.bdf', '_', './time-char.set']
# Date: 2024-06-18 20:27:38
'''
    Original Copyright, Comments and Notices from source:

    COPYRIGHT /*
    COPYRIGHT * Spleen 12x24 1.9.1
    COPYRIGHT * Copyright (c) 2018-2022, Frederic Cambus
    COPYRIGHT * https://www.cambus.net/
    COPYRIGHT *
    COPYRIGHT * Created:      2018-08-15
    COPYRIGHT * Last Updated: 2020-10-10
    COPYRIGHT *
    COPYRIGHT * Spleen is released under the BSD 2-Clause license.
    COPYRIGHT * See LICENSE file for details.
    COPYRIGHT *
    COPYRIGHT * SPDX-License-Identifier: BSD-2-Clause
    COPYRIGHT */

    COMMENT "Copyright (c) 2018-2022, Frederic Cambus"
'''
version = '0.33'
name = '-misc-spleen-medium-r-normal--24-240-72-72-c-120-iso10646-1'
family = 'spleen'
weight = 'medium'
size = 24

def height():
    return 15

def baseline():
    return 15

def max_width():
    return 12

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 58

_g = {
  32:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  43:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x06\x00\x06\x00?\xc0\x06\x00\x06\x00\x06\x00\x00\x00\x00\x00\x00\x00',
  45:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  46:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x06\x00',
  48:b'\x1f\x800\xc0`````\xe0a\xe0c`f`l`x`p`````0\xc0\x1f\x80',
  49:b'\x0e\x00\x1e\x006\x00&\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00?\xc0',
  50:b'\x1f\x800\xc0``\x00`\x00`\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x18\x000\x00``\x7f\xe0',
  51:b'\x1f\x800\xc0``\x00`\x00`\x00\xc0\x0f\x80\x00\xc0\x00`\x00`\x00`\x00```0\xc0\x1f\x80',
  52:b'`\x00`\x00`\x00a\x80a\x80a\x80a\x80a\x80a\x80a\x80\x7f\xe0\x01\x80\x01\x80\x01\x80\x01\x80',
  53:b'\x7f\xe0```\x00`\x00`\x00`\x00\x7f\x80\x00\xc0\x00`\x00`\x00`\x00```0\xc0\x1f\x80',
  54:b'\x1f\xc00``\x00`\x00`\x00`\x00\x7f\x80`\xc0``````````0\xc0\x1f\x80',
  55:b'\x7f\xe0``\x00`\x00`\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x0c\x00\x0c\x00\x0c\x00\x0c\x00\x0c\x00',
  56:b'\x1f\x800\xc0``````0\xc0\x1f\x800\xc0``````````0\xc0\x1f\x80',
  57:b'\x1f\x800\xc0``````````0`\x1f\xe0\x00`\x00`\x00`\x00``\xc0?\x80',
  58:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x06\x00',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 15, 12
