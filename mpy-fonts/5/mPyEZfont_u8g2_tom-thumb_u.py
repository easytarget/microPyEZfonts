'''
    mPyEZfont_u8g2_tom-thumb_u.py : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    Original tom-thumb.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    This font definition can be used with the "writer" class from Peter Hinches
      micropython font-to-py tool, and was generated using his tooling from
      https://github.com/peterhinch/micropython-font-to-py

    Original Copyright Notice from source:

    COPYRIGHT """""MIT"""""

    Original Comments from source (may include copyright info):

    None found:
'''

# Code generated by font_to_py.py.
# Font: tom-thumb.bdf Char set:  !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_
# Cmd: micropython-font-to-py/font_to_py.py -x -k mpy-fonts/u-char.set u8g2/tools/font/bdf/tom-thumb.bdf 0 tmp_mPyEZfont_u8g2_tom-thumb_u.py
version = '0.33'

def height():
    return 5

def baseline():
    return 5

def max_width():
    return 4

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 95

_font =\
b'\x04\x00\xe0\x20\x40\x00\x40\x04\x00\x00\x00\x00\x00\x00\x04\x00'\
b'\x40\x40\x40\x00\x40\x04\x00\xa0\xa0\x00\x00\x00\x04\x00\xa0\xe0'\
b'\xa0\xe0\xa0\x04\x00\x60\xc0\x60\xc0\x40\x04\x00\x80\x20\x40\x80'\
b'\x20\x04\x00\xc0\xc0\xe0\xa0\x60\x04\x00\x40\x40\x00\x00\x00\x04'\
b'\x00\x20\x40\x40\x40\x20\x04\x00\x80\x40\x40\x40\x80\x04\x00\xa0'\
b'\x40\xa0\x00\x00\x04\x00\x00\x40\xe0\x40\x00\x04\x00\x00\x00\x00'\
b'\x40\x80\x04\x00\x00\x00\xe0\x00\x00\x04\x00\x00\x00\x00\x00\x40'\
b'\x04\x00\x20\x20\x40\x80\x80\x04\x00\x60\xa0\xa0\xa0\xc0\x04\x00'\
b'\x40\xc0\x40\x40\x40\x04\x00\xc0\x20\x40\x80\xe0\x04\x00\xc0\x20'\
b'\x40\x20\xc0\x04\x00\xa0\xa0\xe0\x20\x20\x04\x00\xe0\x80\xc0\x20'\
b'\xc0\x04\x00\x60\x80\xe0\xa0\xe0\x04\x00\xe0\x20\x40\x80\x80\x04'\
b'\x00\xe0\xa0\xe0\xa0\xe0\x04\x00\xe0\xa0\xe0\x20\xc0\x04\x00\x00'\
b'\x40\x00\x40\x00\x04\x00\x00\x40\x00\x40\x80\x04\x00\x20\x40\x80'\
b'\x40\x20\x04\x00\x00\xe0\x00\xe0\x00\x04\x00\x80\x40\x20\x40\x80'\
b'\x04\x00\xe0\x20\x40\x00\x40\x04\x00\x40\xa0\xe0\x80\x60\x04\x00'\
b'\x40\xa0\xe0\xa0\xa0\x04\x00\xc0\xa0\xc0\xa0\xc0\x04\x00\x60\x80'\
b'\x80\x80\x60\x04\x00\xc0\xa0\xa0\xa0\xc0\x04\x00\xe0\x80\xe0\x80'\
b'\xe0\x04\x00\xe0\x80\xe0\x80\x80\x04\x00\x60\x80\xe0\xa0\x60\x04'\
b'\x00\xa0\xa0\xe0\xa0\xa0\x04\x00\xe0\x40\x40\x40\xe0\x04\x00\x20'\
b'\x20\x20\xa0\x40\x04\x00\xa0\xa0\xc0\xa0\xa0\x04\x00\x80\x80\x80'\
b'\x80\xe0\x04\x00\xa0\xe0\xe0\xa0\xa0\x04\x00\xa0\xe0\xe0\xe0\xa0'\
b'\x04\x00\x40\xa0\xa0\xa0\x40\x04\x00\xc0\xa0\xc0\x80\x80\x04\x00'\
b'\x40\xa0\xa0\xe0\x60\x04\x00\xc0\xa0\xe0\xc0\xa0\x04\x00\x60\x80'\
b'\x40\x20\xc0\x04\x00\xe0\x40\x40\x40\x40\x04\x00\xa0\xa0\xa0\xa0'\
b'\x60\x04\x00\xa0\xa0\xa0\x40\x40\x04\x00\xa0\xa0\xe0\xe0\xa0\x04'\
b'\x00\xa0\xa0\x40\xa0\xa0\x04\x00\xa0\xa0\x40\x40\x40\x04\x00\xe0'\
b'\x20\x40\x80\xe0\x04\x00\xe0\x80\x80\x80\xe0\x04\x00\x00\x80\x40'\
b'\x20\x00\x04\x00\xe0\x20\x20\x20\xe0\x04\x00\x40\xa0\x00\x00\x00'\
b'\x04\x00\x00\x00\x00\x00\xe0'

_index =\
b'\x00\x00\x07\x00\x0e\x00\x15\x00\x1c\x00\x23\x00\x2a\x00\x31\x00'\
b'\x38\x00\x3f\x00\x46\x00\x4d\x00\x54\x00\x5b\x00\x62\x00\x69\x00'\
b'\x70\x00\x77\x00\x7e\x00\x85\x00\x8c\x00\x93\x00\x9a\x00\xa1\x00'\
b'\xa8\x00\xaf\x00\xb6\x00\xbd\x00\xc4\x00\xcb\x00\xd2\x00\xd9\x00'\
b'\xe0\x00\xe7\x00\xee\x00\xf5\x00\xfc\x00\x03\x01\x0a\x01\x11\x01'\
b'\x18\x01\x1f\x01\x26\x01\x2d\x01\x34\x01\x3b\x01\x42\x01\x49\x01'\
b'\x50\x01\x57\x01\x5e\x01\x65\x01\x6c\x01\x73\x01\x7a\x01\x81\x01'\
b'\x88\x01\x8f\x01\x96\x01\x9d\x01\xa4\x01\xab\x01\xb2\x01\xb9\x01'\
b'\xc0\x01\xc7\x01'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 95 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 5
    return _mvfont[doff + 2:next_offs], 5, width
 
