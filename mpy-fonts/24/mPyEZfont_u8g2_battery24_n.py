'''
    mPyEZfont_u8g2_battery24_n.py : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    Original battery24.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    This font definition can be used with the "writer" class from Peter Hinches
      micropython font-to-py tool, and was generated using his tooling from
      https://github.com/peterhinch/micropython-font-to-py

    Original Copyright Notice from source:

    COPYRIGHT "Created with Fony 1.4.7"

    Original Comments from source (may include copyright info):

    COMMENT Exported by Fony v1.4.7
'''

# Code generated by font_to_py.py.
# Font: battery24.bdf Char set:  %*+,-./0123456789:Â°
# Cmd: micropython-font-to-py/font_to_py.py -x -k mpy-fonts/n-char.set u8g2/tools/font/bdf/battery24.bdf 0 tmp_mPyEZfont_u8g2_battery24_n.py
version = '0.33'

def height():
    return 24

def baseline():
    return 24

def max_width():
    return 20

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 48

def max_ch():
    return 176

_font =\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x20\x30\xc0\x60\x30\xc0\xc0\x30\xc0\x80\x30'\
b'\xc1\x8e\x30\xc3\xbe\x30\xc3\xfc\x30\xc7\xdc\x30\xc7\x18\x30\xc0'\
b'\x18\x30\xc0\x30\x30\xc0\x30\x30\xc0\x60\x30\xc0\xc0\x30\xc0\x80'\
b'\x30\xe0\x00\x70\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30'\
b'\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0'\
b'\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00'\
b'\x30\xe0\x00\x70\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30'\
b'\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0'\
b'\x00\x30\xc0\x00\x30\xc0\x00\x30\xdf\xff\xb0\xdf\xff\xb0\xcf\xff'\
b'\x30\xe0\x00\x70\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30'\
b'\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xdf\xff\xb0\xdf'\
b'\xff\xb0\xdf\xff\xb0\xc0\x00\x30\xdf\xff\xb0\xdf\xff\xb0\xcf\xff'\
b'\x30\xe0\x00\x70\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30'\
b'\xdf\xff\xb0\xdf\xff\xb0\xdf\xff\xb0\xc0\x00\x30\xdf\xff\xb0\xdf'\
b'\xff\xb0\xdf\xff\xb0\xc0\x00\x30\xdf\xff\xb0\xdf\xff\xb0\xcf\xff'\
b'\x30\xe0\x00\x70\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xcf\xff\x30\xdf\xff\xb0\xdf\xff\xb0\xc0\x00\x30'\
b'\xdf\xff\xb0\xdf\xff\xb0\xdf\xff\xb0\xc0\x00\x30\xdf\xff\xb0\xdf'\
b'\xff\xb0\xdf\xff\xb0\xc0\x00\x30\xdf\xff\xb0\xdf\xff\xb0\xcf\xff'\
b'\x30\xe0\x00\x70\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30'\
b'\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0'\
b'\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xff\xff'\
b'\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30'\
b'\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0'\
b'\x00\x30\xc0\x00\x30\xc0\x00\x30\xff\xff\xf0\xff\xff\xf0\xff\xff'\
b'\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30'\
b'\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0'\
b'\x00\x30\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff'\
b'\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30'\
b'\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xff\xff\xf0\xff'\
b'\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff'\
b'\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30'\
b'\xc0\x00\x30\xc0\x00\x30\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff'\
b'\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff'\
b'\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30\xc0\x00\x30'\
b'\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff'\
b'\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff'\
b'\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff'\
b'\xf0\xe0\x00\x70\xc0\x20\x30\xc0\x60\x30\xc0\xc0\x30\xc0\x80\x30'\
b'\xc1\x8e\x30\xc3\xbe\x30\xc3\xfc\x30\xc7\xdc\x30\xc7\x18\x30\xc0'\
b'\x18\x30\xc0\x30\x30\xc0\x30\x30\xc0\x60\x30\xc0\xc0\x30\xc0\x80'\
b'\x30\xe0\x00\x70\xff\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00'\
b'\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

_sparse =\
b'\x30\x00\x0a\x00\x31\x00\x14\x00\x32\x00\x1e\x00\x33\x00\x28\x00'\
b'\x34\x00\x32\x00\x35\x00\x3c\x00\x36\x00\x46\x00\x37\x00\x50\x00'\
b'\x38\x00\x5a\x00\x39\x00\x64\x00\x3a\x00\x6e\x00\x3f\x00\x78\x00'\
b'\xb0\x00\x82\x00'

_mvfont = memoryview(_font)
_mvsp = memoryview(_sparse)
ifb = lambda l : l[0] | (l[1] << 8)

def bs(lst, val):
    while True:
        m = (len(lst) & ~ 7) >> 1
        v = ifb(lst[m:])
        if v == val:
            return ifb(lst[m + 2:])
        if not m:
            return 0
        lst = lst[m:] if v < val else lst[:m]

def get_ch(ch):
    doff = bs(_mvsp, ord(ch)) << 3
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 24
    return _mvfont[doff + 2:next_offs], 24, width
 
