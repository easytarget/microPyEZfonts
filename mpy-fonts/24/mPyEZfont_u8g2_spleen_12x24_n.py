'''
    mPyEZfont_u8g2_spleen_12x24_n.py : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    Original spleen-12x24.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    This font definition can be used with the "writer" class from Peter Hinches
      micropython font-to-py tool, and was generated using his tooling from
      https://github.com/peterhinch/micropython-font-to-py

    Original Copyright Notice from source:

    COPYRIGHT "Copyright (c) 2018-2022, Frederic Cambus"

    Original Comments from source (may include copyright info):

    COMMENT /*
    COMMENT  * Spleen 12x24 1.9.1
    COMMENT  * Copyright (c) 2018-2022, Frederic Cambus
    COMMENT  * https://www.cambus.net/
    COMMENT  *
    COMMENT  * Created:      2018-08-15
    COMMENT  * Last Updated: 2020-10-10
    COMMENT  *
    COMMENT  * Spleen is released under the BSD 2-Clause license.
    COMMENT  * See LICENSE file for details.
    COMMENT  *
    COMMENT  * SPDX-License-Identifier: BSD-2-Clause
    COMMENT  */
'''

# Code generated by font_to_py.py.
# Font: spleen-12x24.bdf Char set:  *+,-./0123456789:
# Cmd: micropython-font-to-py/font_to_py.py -x -k mpy-fonts/n-char.set u8g2/tools/font/bdf/spleen-12x24.bdf 0 tmp_mPyEZfont_u8g2_spleen_12x24_n.py
version = '0.33'

def height():
    return 24

def baseline():
    return 19

def max_width():
    return 12

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 63

_font =\
b'\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x80\x30\xc0\x60\x60'\
b'\x00\x60\x00\x60\x00\xc0\x01\x80\x03\x00\x06\x00\x06\x00\x06\x00'\
b'\x00\x00\x00\x00\x06\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x30\xc0\x19\x80\x0f\x00\x06\x00\x7f\xe0'\
b'\x06\x00\x0f\x00\x19\x80\x30\xc0\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x06\x00\x06\x00'\
b'\x3f\xc0\x06\x00\x06\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x06\x00\x06\x00'\
b'\x0c\x00\x18\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x3f\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x06\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00'\
b'\x00\x00\x00\x00\x00\x30\x00\x30\x00\x60\x00\x60\x00\xc0\x00\xc0'\
b'\x01\x80\x01\x80\x03\x00\x03\x00\x06\x00\x06\x00\x0c\x00\x0c\x00'\
b'\x18\x00\x18\x00\x30\x00\x30\x00\x60\x00\x60\x00\x00\x00\x00\x00'\
b'\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x80\x30\xc0\x60\x60'\
b'\x60\x60\x60\xe0\x61\xe0\x63\x60\x66\x60\x6c\x60\x78\x60\x70\x60'\
b'\x60\x60\x60\x60\x30\xc0\x1f\x80\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x1e\x00'\
b'\x36\x00\x26\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00'\
b'\x06\x00\x06\x00\x06\x00\x06\x00\x3f\xc0\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x80'\
b'\x30\xc0\x60\x60\x00\x60\x00\x60\x00\x60\x00\xc0\x01\x80\x03\x00'\
b'\x06\x00\x0c\x00\x18\x00\x30\x00\x60\x60\x7f\xe0\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x1f\x80\x30\xc0\x60\x60\x00\x60\x00\x60\x00\xc0\x0f\x80\x00\xc0'\
b'\x00\x60\x00\x60\x00\x60\x00\x60\x60\x60\x30\xc0\x1f\x80\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x60\x00\x60\x00\x60\x00\x61\x80\x61\x80\x61\x80\x61\x80'\
b'\x61\x80\x61\x80\x61\x80\x7f\xe0\x01\x80\x01\x80\x01\x80\x01\x80'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x7f\xe0\x60\x60\x60\x00\x60\x00\x60\x00\x60\x00'\
b'\x7f\x80\x00\xc0\x00\x60\x00\x60\x00\x60\x00\x60\x60\x60\x30\xc0'\
b'\x1f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x1f\xc0\x30\x60\x60\x00\x60\x00\x60\x00'\
b'\x60\x00\x7f\x80\x60\xc0\x60\x60\x60\x60\x60\x60\x60\x60\x60\x60'\
b'\x30\xc0\x1f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xe0\x60\x60\x00\x60\x00\x60'\
b'\x00\x60\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x0c\x00\x0c\x00'\
b'\x0c\x00\x0c\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x80\x30\xc0\x60\x60'\
b'\x60\x60\x60\x60\x30\xc0\x1f\x80\x30\xc0\x60\x60\x60\x60\x60\x60'\
b'\x60\x60\x60\x60\x30\xc0\x1f\x80\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x80\x30\xc0'\
b'\x60\x60\x60\x60\x60\x60\x60\x60\x60\x60\x30\x60\x1f\xe0\x00\x60'\
b'\x00\x60\x00\x60\x00\x60\x60\xc0\x3f\x80\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x06\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x06\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00'

_index =\
b'\x00\x00\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x64\x00\x96\x00\xc8\x00\xfa\x00\x2c\x01'\
b'\x5e\x01\x90\x01\xc2\x01\xf4\x01\x26\x02\x58\x02\x8a\x02\xbc\x02'\
b'\xee\x02\x20\x03\x52\x03\x84\x03\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\xb6\x03'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 63 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 24
    return _mvfont[doff + 2:next_offs], 24, width
 
