'''
    mPyEZfont_u8g2_spleen_5x8_t.py : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    Original spleen-5x8.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    This font definition can be used with the "writer" class from Peter Hinches
      micropython font-to-py tool, and was generated using his tooling from
      https://github.com/peterhinch/micropython-font-to-py

    Original Copyright Notice from source:

    COPYRIGHT "Copyright (c) 2018-2022, Frederic Cambus"

    Original Comments from source (may include copyright info):

    COMMENT /*
    COMMENT  * Spleen 5x8 1.9.1
    COMMENT  * Copyright (c) 2018-2022, Frederic Cambus
    COMMENT  * https://www.cambus.net/
    COMMENT  *
    COMMENT  * Created:      2018-08-08
    COMMENT  * Last Updated: 2021-03-10
    COMMENT  *
    COMMENT  * Spleen is released under the BSD 2-Clause license.
    COMMENT  * See LICENSE file for details.
    COMMENT  *
    COMMENT  * SPDX-License-Identifier: BSD-2-Clause
    COMMENT  */
'''

# Code generated by font_to_py.py.
# Font: spleen-5x8.bdf Char set:  +-.0123456789:
# Cmd: ../micropython-font-to-py/font_to_py.py -x -k ./t-char.set -e 32 ../u8g2/tools/font/bdf/spleen-5x8.bdf 0 tmp_mPyEZfont_u8g2_spleen_5x8_t.py
version = '0.33'

def height():
    return 8

def baseline():
    return 7

def max_width():
    return 5

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 58

_font =\
b'\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x05\x00\x00\x00\x20\x20\xf8\x20\x20\x00\x05\x00'\
b'\x00\x00\x00\x00\xf0\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00'\
b'\x20\x00\x05\x00\x00\x60\x90\xb0\xd0\x90\x60\x00\x05\x00\x00\x20'\
b'\x60\x20\x20\x20\x70\x00\x05\x00\x00\x60\x90\x10\x60\x80\xf0\x00'\
b'\x05\x00\x00\x60\x90\x20\x10\x90\x60\x00\x05\x00\x00\x80\xa0\xa0'\
b'\xf0\x20\x20\x00\x05\x00\x00\xf0\x80\xe0\x10\x10\xe0\x00\x05\x00'\
b'\x00\x60\x80\xe0\x90\x90\x60\x00\x05\x00\x00\xf0\x90\x10\x20\x40'\
b'\x40\x00\x05\x00\x00\x60\x90\x60\x90\x90\x60\x00\x05\x00\x00\x60'\
b'\x90\x90\x70\x10\x60\x00\x05\x00\x00\x00\x00\x20\x00\x00\x20\x00'\

_index =\
b'\x00\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x1e\x00\x28\x00'\
b'\x00\x00\x32\x00\x3c\x00\x46\x00\x50\x00\x5a\x00\x64\x00\x6e\x00'\
b'\x78\x00\x82\x00\x8c\x00\x96\x00\xa0\x00'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 58 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 8
    return _mvfont[doff + 2:next_offs], 8, width
 
