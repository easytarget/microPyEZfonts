'''
    mPyEZfont_u8g2_u8g2_squeezed_bold_7_r.py : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    Original u8g2_squeezed_bold_7.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    This font definition can be used with the "writer" class from Peter Hinches
      micropython font-to-py tool, and was generated using his tooling from
      https://github.com/peterhinch/micropython-font-to-py

    Original Copyright Notice from source:

    COPYRIGHT "public domain"

    Original Comments from source (may include copyright info):

    COMMENT Exported by Fony v1.4.7
'''

# Code generated by font_to_py.py.
# Font: u8g2_squeezed_bold_7.bdf Char set:  !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
# Cmd: ../micropython-font-to-py/font_to_py.py -x -k ./r-char.set -e 32 ../u8g2/tools/font/bdf/u8g2_squeezed_bold_7.bdf 0 tmp_mPyEZfont_u8g2_u8g2_squeezed_bold_7_r.py
version = '0.33'

def height():
    return 8

def baseline():
    return 7

def max_width():
    return 9

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 126

_font =\
b'\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x03\x00\xc0\xc0\xc0\xc0\xc0\x00\xc0\x00\x06\x00'\
b'\xd8\xd8\x00\x00\x00\x00\x00\x00\x08\x00\x00\x6c\xfe\x6c\xfe\x6c'\
b'\x00\x00\x07\x00\x30\x7c\xf0\x78\x3c\xf8\x30\x00\x07\x00\xcc\xd8'\
b'\x18\x30\x60\x6c\xcc\x00\x07\x00\x70\xd8\xd8\x70\xdc\xd8\x7c\x00'\
b'\x03\x00\xc0\xc0\x00\x00\x00\x00\x00\x00\x04\x00\x60\xc0\xc0\xc0'\
b'\xc0\xc0\x60\x00\x04\x00\xc0\x60\x60\x60\x60\x60\xc0\x00\x06\x00'\
b'\x00\xd8\x70\xf8\x70\xd8\x00\x00\x05\x00\x00\x00\x60\xf0\x60\x00'\
b'\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xc0\xc0\x04\x00\x00\x00'\
b'\x00\xe0\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\xc0\xc0\x00'\
b'\x05\x00\x30\x30\x60\x60\x60\xc0\xc0\x00\x05\x00\x70\xd8\xd8\xd8'\
b'\xd8\xd8\x70\x00\x04\x00\x60\xe0\x60\x60\x60\x60\x60\x00\x05\x00'\
b'\xe0\x30\x30\x60\xc0\xc0\xf0\x00\x05\x00\xe0\x30\x30\xe0\x30\x30'\
b'\xe0\x00\x06\x00\xd8\xd8\xd8\xf8\x18\x18\x18\x00\x05\x00\xf0\xc0'\
b'\xe0\x30\x30\x30\xe0\x00\x06\x00\x70\xc0\xc0\xf0\xd8\xd8\x70\x00'\
b'\x05\x00\xf0\x30\x30\x60\x60\x60\x60\x00\x06\x00\x70\xd8\xd8\x70'\
b'\xd8\xd8\x70\x00\x06\x00\x70\xd8\xd8\x78\x18\xd8\x70\x00\x03\x00'\
b'\x00\x00\xc0\x00\x00\xc0\x00\x00\x03\x00\x00\x00\x00\xc0\x00\x00'\
b'\xc0\xc0\x05\x00\x00\x30\x60\xc0\x60\x30\x00\x00\x04\x00\x00\x00'\
b'\xe0\x00\xe0\x00\x00\x00\x05\x00\x00\xc0\x60\x30\x60\xc0\x00\x00'\
b'\x05\x00\xe0\x30\x30\x60\x60\x00\x60\x00\x07\x00\x78\xcc\xdc\xdc'\
b'\xdc\xc0\x78\x00\x06\x00\x70\xd8\xd8\xf8\xd8\xd8\xd8\x00\x06\x00'\
b'\xf0\xd8\xd8\xf0\xd8\xd8\xf0\x00\x05\x00\x70\xc0\xc0\xc0\xc0\xc0'\
b'\x70\x00\x06\x00\xf0\xd8\xd8\xd8\xd8\xd8\xf0\x00\x04\x00\xe0\xc0'\
b'\xc0\xe0\xc0\xc0\xe0\x00\x04\x00\xe0\xc0\xc0\xe0\xc0\xc0\xc0\x00'\
b'\x06\x00\x70\xc0\xc0\xf8\xd8\xd8\x70\x00\x06\x00\xd8\xd8\xd8\xf8'\
b'\xd8\xd8\xd8\x00\x03\x00\xc0\xc0\xc0\xc0\xc0\xc0\xc0\x00\x04\x00'\
b'\x60\x60\x60\x60\x60\x60\xe0\x00\x06\x00\xd8\xd8\xf0\xe0\xf0\xd8'\
b'\xd8\x00\x04\x00\xc0\xc0\xc0\xc0\xc0\xc0\xe0\x00\x08\x00\xc6\xee'\
b'\xfe\xd6\xc6\xc6\xc6\x00\x07\x00\xcc\xec\xfc\xdc\xcc\xcc\xcc\x00'\
b'\x06\x00\x70\xd8\xd8\xd8\xd8\xd8\x70\x00\x06\x00\xf0\xd8\xd8\xf0'\
b'\xc0\xc0\xc0\x00\x07\x00\x70\xd8\xd8\xd8\xd8\x58\x7c\x00\x06\x00'\
b'\xf0\xd8\xd8\xf0\xd8\xd8\xd8\x00\x04\x00\x60\xc0\xc0\x60\x60\x60'\
b'\xc0\x00\x05\x00\xf0\x60\x60\x60\x60\x60\x60\x00\x06\x00\xd8\xd8'\
b'\xd8\xd8\xd8\xd8\xf8\x00\x07\x00\xcc\xcc\xcc\xcc\xcc\x78\x30\x00'\
b'\x09\x00\xc3\x00\xc3\x00\xc3\x00\xc3\x00\xdb\x00\xff\x00\x66\x00'\
b'\x00\x00\x06\x00\xd8\xd8\x70\x70\xd8\xd8\xd8\x00\x07\x00\xcc\xcc'\
b'\x78\x30\x30\x30\x30\x00\x05\x00\xf0\x30\x70\xe0\xc0\xc0\xf0\x00'\
b'\x04\x00\xe0\xc0\xc0\xc0\xc0\xc0\xe0\x00\x05\x00\xc0\xc0\x60\x60'\
b'\x60\x30\x30\x00\x04\x00\xe0\x60\x60\x60\x60\x60\xe0\x00\x05\x00'\
b'\x60\xf0\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00'\
b'\xe0\x00\x04\x00\xc0\x60\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00'\
b'\x78\xd8\xd8\xd8\x78\x00\x06\x00\xc0\xc0\xf0\xd8\xd8\xd8\xf0\x00'\
b'\x05\x00\x00\x00\x70\xc0\xc0\xc0\x70\x00\x06\x00\x18\x18\x78\xd8'\
b'\xd8\xd8\x78\x00\x06\x00\x00\x00\x70\xd8\xf8\xc0\x70\x00\x04\x00'\
b'\x60\xc0\xe0\xc0\xc0\xc0\xc0\x00\x06\x00\x00\x00\x78\xd8\xd8\x78'\
b'\x38\xf0\x06\x00\xc0\xc0\xf0\xd8\xd8\xd8\xd8\x00\x03\x00\xc0\x00'\
b'\xc0\xc0\xc0\xc0\xc0\x00\x04\x00\x60\x00\x60\x60\x60\x60\x60\xc0'\
b'\x06\x00\xc0\xc0\xd8\xf0\xd8\xd8\xd8\x00\x03\x00\xc0\xc0\xc0\xc0'\
b'\xc0\xc0\xc0\x00\x09\x00\x00\x00\x00\x00\xfe\x00\xdb\x00\xdb\x00'\
b'\xdb\x00\xdb\x00\x00\x00\x06\x00\x00\x00\xf0\xd8\xd8\xd8\xd8\x00'\
b'\x06\x00\x00\x00\x70\xd8\xd8\xd8\x70\x00\x06\x00\x00\x00\xf0\xd8'\
b'\xd8\xd8\xf0\xc0\x06\x00\x00\x00\x78\xd8\xd8\xd8\x78\x18\x06\x00'\
b'\x00\x00\xd8\xf0\xc0\xc0\xc0\x00\x04\x00\x00\x00\x60\xc0\x60\x60'\
b'\xc0\x00\x04\x00\xc0\xc0\xe0\xc0\xc0\xc0\x60\x00\x06\x00\x00\x00'\
b'\xd8\xd8\xd8\xd8\xf8\x00\x06\x00\x00\x00\xd8\xd8\xd8\xd8\x70\x00'\
b'\x09\x00\x00\x00\x00\x00\xc3\x00\xc3\x00\xdb\x00\xdb\x00\x66\x00'\
b'\x00\x00\x06\x00\x00\x00\xd8\x70\x70\xd8\xd8\x00\x06\x00\x00\x00'\
b'\xd8\xd8\xd8\x78\x38\x70\x04\x00\x00\x00\xe0\x60\xc0\xc0\xe0\x00'\
b'\x05\x00\x30\x60\x60\xe0\x60\x60\x30\x00\x03\x00\xc0\xc0\xc0\xc0'\
b'\xc0\xc0\xc0\x00\x05\x00\xc0\x60\x60\x70\x60\x60\xc0\x00\x07\x00'\
b'\x6c\xd8\x00\x00\x00\x00\x00\x00'

_index =\
b'\x00\x00\x0a\x00\x14\x00\x1e\x00\x28\x00\x32\x00\x3c\x00\x46\x00'\
b'\x50\x00\x5a\x00\x64\x00\x6e\x00\x78\x00\x82\x00\x8c\x00\x96\x00'\
b'\xa0\x00\xaa\x00\xb4\x00\xbe\x00\xc8\x00\xd2\x00\xdc\x00\xe6\x00'\
b'\xf0\x00\xfa\x00\x04\x01\x0e\x01\x18\x01\x22\x01\x2c\x01\x36\x01'\
b'\x40\x01\x4a\x01\x54\x01\x5e\x01\x68\x01\x72\x01\x7c\x01\x86\x01'\
b'\x90\x01\x9a\x01\xa4\x01\xae\x01\xb8\x01\xc2\x01\xcc\x01\xd6\x01'\
b'\xe0\x01\xea\x01\xf4\x01\xfe\x01\x08\x02\x12\x02\x1c\x02\x26\x02'\
b'\x30\x02\x42\x02\x4c\x02\x56\x02\x60\x02\x6a\x02\x74\x02\x7e\x02'\
b'\x88\x02\x92\x02\x9c\x02\xa6\x02\xb0\x02\xba\x02\xc4\x02\xce\x02'\
b'\xd8\x02\xe2\x02\xec\x02\xf6\x02\x00\x03\x0a\x03\x14\x03\x26\x03'\
b'\x30\x03\x3a\x03\x44\x03\x4e\x03\x58\x03\x62\x03\x6c\x03\x76\x03'\
b'\x80\x03\x92\x03\x9c\x03\xa6\x03\xb0\x03\xba\x03\xc4\x03\xce\x03'\
b'\xd8\x03'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 126 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 8
    return _mvfont[doff + 2:next_offs], 8, width
 
