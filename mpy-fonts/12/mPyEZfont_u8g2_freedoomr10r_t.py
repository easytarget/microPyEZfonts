'''
    mPyEZfont_u8g2_freedoomr10r_t.py : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    Original freedoomr10r.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    This font definition can be used with the "writer" class from Peter Hinches
      micropython font-to-py tool, and was generated using his tooling from
      https://github.com/peterhinch/micropython-font-to-py

    Original Copyright Notice from source:

    COPYRIGHT "FreeUniveral (c) Stephen Wilson 2009    Original Font Sil-Sophia  Copyright (c) SIL International, 1994-2008."

    Original Comments from source (may include copyright info):

    COMMENT "Generated by fontforge, http://fontforge.sourceforge.net"
    COMMENT ""
    COMMENT "Converted from OpenType font "FreeUniversal-Bold.ttf" by "otf2bdf 3.0"."
    COMMENT ""
'''

# Code generated by font_to_py.py.
# Font: freedoomr10r.bdf Char set:  +-.0123456789:
# Cmd: ../micropython-font-to-py/font_to_py.py -x -k ./t-char.set -e 32 ../u8g2/tools/font/bdf/freedoomr10r.bdf 0 tmp_mPyEZfont_u8g2_freedoomr10r_t.py
version = '0.33'

def height():
    return 12

def baseline():
    return 12

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 58

_font =\
b'\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x10'\
b'\x10\x10\xfe\x10\x10\x10\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00'\
b'\xfe\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x30\x30\x00\x00\x07\x00\xfc\x84\x84\x84\x84\x84\x84\x84'\
b'\x84\xfc\x00\x00\x07\x00\x0c\x04\x04\x04\x04\x04\x04\x04\x04\x04'\
b'\x00\x00\x07\x00\xfc\x04\x04\x04\x04\xfc\x80\x80\x80\xfc\x00\x00'\
b'\x07\x00\xfc\x04\x04\x04\x3c\x04\x04\x04\x04\xfc\x00\x00\x07\x00'\
b'\x84\x84\x84\x84\x84\xfc\x04\x04\x04\x04\x00\x00\x07\x00\xfc\x80'\
b'\x80\x80\xfc\x04\x04\x04\x04\xfc\x00\x00\x07\x00\xfc\x80\x80\x80'\
b'\xfc\x84\x84\x84\x84\xfc\x00\x00\x07\x00\xfc\x04\x04\x04\x04\x04'\
b'\x04\x04\x04\x04\x00\x00\x07\x00\xfc\x84\x84\x84\xfc\x84\x84\x84'\
b'\x84\xfc\x00\x00\x07\x00\xfc\x84\x84\x84\xfc\x04\x04\x04\x04\xfc'\
b'\x00\x00\x07\x00\x00\x00\x00\x30\x30\x00\x00\x00\x30\x30\x00\x00'\

_index =\
b'\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x2a\x00\x38\x00'\
b'\x00\x00\x46\x00\x54\x00\x62\x00\x70\x00\x7e\x00\x8c\x00\x9a\x00'\
b'\xa8\x00\xb6\x00\xc4\x00\xd2\x00\xe0\x00'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 58 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 12
    return _mvfont[doff + 2:next_offs], 12, width
 
