'''
    mPyEZfont_u8g2_freedoomr25n_n.py : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    Original freedoomr25n.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    This font definition can be used with the "writer" class from Peter Hinches
      micropython font-to-py tool, and was generated using his tooling from
      https://github.com/peterhinch/micropython-font-to-py

    Original Copyright Notice from source:

    COPYRIGHT "FreeUniveral (c) Stephen Wilson 2009    Original Font Sil-Sophia  Copyright (c) SIL International, 1994-2008."

    Original Comments from source (may include copyright info):

    COMMENT "Generated by fontforge, http://fontforge.sourceforge.net"
    COMMENT ""
    COMMENT "Converted from OpenType font "FreeUniversal-Bold.ttf" by "otf2bdf 3.0"."
    COMMENT ""
'''

# Code generated by font_to_py.py.
# Font: freedoomr25n.bdf Char set:  %*+,-./0123456789:Ã¸
# Cmd: micropython-font-to-py/font_to_py.py -x -k mpy-fonts/n-char.set u8g2/tools/font/bdf/freedoomr25n.bdf 0 tmp_mPyEZfont_u8g2_freedoomr25n_n.py
version = '0.33'

def height():
    return 26

def baseline():
    return 26

def max_width():
    return 19

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 58

_font =\
b'\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x00\xe0\x00'\
b'\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x7f'\
b'\xff\xc0\x7f\xff\xc0\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0'\
b'\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xc0'\
b'\x07\xc0\x07\xc0\x07\xc0\x07\xc0\x1e\x00\x1e\x00\x1e\x00\x00\x00'\
b'\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xc0\x7f\xc0\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x07\xc0\x07\xc0\x07\xc0\x07\xc0\x07\xc0\x00\x00\x00\x00\x13\x00'\
b'\x7f\xff\xc0\x7f\xff\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60'\
b'\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01'\
b'\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0'\
b'\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x7f'\
b'\xff\xc0\x7f\xff\xc0\x7f\xff\xc0\x00\x00\x00\x00\x00\x00\x13\x00'\
b'\x01\xf8\x00\x01\xf8\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00'\
b'\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38'\
b'\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00'\
b'\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00'\
b'\x38\x00\x00\x38\x00\x00\x38\x00\x00\x00\x00\x00\x00\x00\x13\x00'\
b'\x7f\xff\xc0\x7f\xff\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00'\
b'\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01'\
b'\xc0\x7f\xff\xc0\x7f\xff\xc0\x60\x00\x00\x60\x00\x00\x60\x00\x00'\
b'\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x7f'\
b'\xff\xc0\x7f\xff\xc0\x7f\xff\xc0\x00\x00\x00\x00\x00\x00\x13\x00'\
b'\x7f\xff\xc0\x7f\xff\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00'\
b'\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01'\
b'\xc0\x0f\xff\xc0\x0f\xff\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0'\
b'\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x7f'\
b'\xff\xc0\x7f\xff\xc0\x7f\xff\xc0\x00\x00\x00\x00\x00\x00\x13\x00'\
b'\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60'\
b'\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01'\
b'\xc0\x7f\xff\xc0\x7f\xff\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0'\
b'\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00'\
b'\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x00\x00\x00\x00\x00\x13\x00'\
b'\x7f\xff\xc0\x7f\xff\xc0\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60'\
b'\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00'\
b'\x00\x7f\xff\xc0\x7f\xff\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0'\
b'\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x7f'\
b'\xff\xc0\x7f\xff\xc0\x7f\xff\xc0\x00\x00\x00\x00\x00\x00\x13\x00'\
b'\x7f\xff\xc0\x7f\xff\xc0\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60'\
b'\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00'\
b'\x00\x7f\xff\xc0\x7f\xff\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0'\
b'\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x7f'\
b'\xff\xc0\x7f\xff\xc0\x7f\xff\xc0\x00\x00\x00\x00\x00\x00\x13\x00'\
b'\x3f\xff\xc0\x3f\xff\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00'\
b'\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01'\
b'\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0'\
b'\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00'\
b'\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x00\x00\x00\x00\x00\x13\x00'\
b'\x7f\xff\xc0\x7f\xff\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60'\
b'\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01'\
b'\xc0\x7f\xff\xc0\x7f\xff\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0'\
b'\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x7f'\
b'\xff\xc0\x7f\xff\xc0\x7f\xff\xc0\x00\x00\x00\x00\x00\x00\x13\x00'\
b'\x7f\xff\xc0\x7f\xff\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60'\
b'\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01\xc0\x60\x01'\
b'\xc0\x7f\xff\xc0\x7f\xff\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0'\
b'\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x7f'\
b'\xff\xc0\x7f\xff\xc0\x7f\xff\xc0\x00\x00\x00\x00\x00\x00\x0b\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x07\xc0\x07\xc0\x07\xc0\x07\xc0\x07\xc0\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x07\xc0\x07\xc0\x07\xc0\x07\xc0\x07\xc0'\
b'\x00\x00\x00\x00'

_index =\
b'\x00\x00\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x6c\x00\xbc\x00\xf2\x00\x28\x01'\
b'\x00\x00\x5e\x01\xae\x01\xfe\x01\x4e\x02\x9e\x02\xee\x02\x3e\x03'\
b'\x8e\x03\xde\x03\x2e\x04\x7e\x04\xb4\x04'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 58 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 26
    return _mvfont[doff + 2:next_offs], 26, width
 
