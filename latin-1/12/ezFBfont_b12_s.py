'''
    ezFBfont_b12_s : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original b12.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "(c) Copyright 2000-2003 /efont/ The Electronic Font Open Laboratory."

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: b12 Char set: b'\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
# Cmd: ['bdf2dict.py', 'bdf-sources/b12.bdf', '../latin-1/s-char.set']
# Date: 2024-06-04 14:20:09

version = '0.33'
name = '-Efont-Biwidth-Medium-R-Normal--12-120-75-75-P-60-ISO10646-1'
family = 'Biwidth'
weight = 'Medium'
size = 12

def height():
    return 12

def baseline():
    return 10

def max_width():
    return 6

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 160

def max_ch():
    return 255

_g = {
 160:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 161:[b'\x00\x00\x00\x10\x00\x10\x10\x10\x10\x10\x00\x00'],
 162:[b'\x00\x00\x00\x00\x108TPT8\x10\x00'],
 163:[b'\x00\x00\x00\x18$ p $X\x00\x00'],
 164:[b'\x00\x00\x00\x00\x00T(D(T\x00\x00'],
 165:[b'\x00\x00\x00D(|\x10|\x10\x10\x00\x00'],
 166:[b'\x00\x00\x00\x10\x10\x10\x00\x10\x10\x10\x00\x00'],
 167:[b'\x000H@0HH0\x08H0\x00'],
 168:[b'\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 169:[b'\x00\x00\x00x\x84\x94\xa4\x94\x84x\x00\x00'],
 170:[b'\x00\x18(\x18\x008\x00\x00\x00\x00\x00\x00'],
 171:[b'\x00\x00\x00\x00\x00\x14(P(\x14\x00\x00'],
 172:[b'\x00\x00\x00\x00\x00\x00|\x04\x04\x00\x00\x00'],
 173:[b'\x00\x00\x00\x00\x00\x008\x00\x00\x00\x00\x00'],
 174:[b'\x00\x00\x00x\x84\xb4\xa4\xa4\x84x\x00\x00'],
 175:[b'\x00\x00|\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 176:[b'\x00\x18$$\x18\x00\x00\x00\x00\x00\x00\x00'],
 177:[b'\x00\x00\x00\x10\x10|\x10\x10\x00|\x00\x00'],
 178:[b'\x10(\x08\x108\x00\x00\x00\x00\x00\x00\x00'],
 179:[b'0\x08\x10\x080\x00\x00\x00\x00\x00\x00\x00'],
 180:[b'\x00\x00\x08\x10 \x00\x00\x00\x00\x00\x00\x00'],
 181:[b'\x00\x00\x00\x00\x00DDDLt@@'],
 182:[b'\x00\x00<ttt4\x14\x14\x14\x00\x00'],
 183:[b'\x00\x00\x00\x00\x00\x18\x18\x00\x00\x00\x00\x00'],
 184:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x080'],
 185:[b'\x100\x10\x108\x00\x00\x00\x00\x00\x00\x00'],
 186:[b'\x10(\x10\x008\x00\x00\x00\x00\x00\x00\x00'],
 187:[b'\x00\x00\x00\x00\x00P(\x14(P\x00\x00'],
 188:[b' `  (\x18(<\x08\x08\x00\x00'],
 189:[b' `  (\x14\x04\x08\x10\x1c\x00\x00'],
 190:[b'`\x10 \x10h\x18(<\x08\x08\x00\x00'],
 191:[b'\x00\x00\x00\x10\x00\x10\x10 D8\x00\x00'],
 192:[b' \x10\x008DD|DDD\x00\x00'],
 193:[b'\x08\x10\x008DD|DDD\x00\x00'],
 194:[b'\x10(\x008DD|DDD\x00\x00'],
 195:[b'4X\x008DD|DDD\x00\x00'],
 196:[b'\x00(\x008DD|DDD\x00\x00'],
 197:[b'\x10(\x108DD|DDD\x00\x00'],
 198:[b'\x00\x00\x00<PPxPP\\\x00\x00'],
 199:[b'\x00\x00\x008D@@@D8\x080'],
 200:[b' \x10\x00|@@x@@|\x00\x00'],
 201:[b'\x08\x10\x00|@@x@@|\x00\x00'],
 202:[b'\x10(\x00|@@x@@|\x00\x00'],
 203:[b'\x00(\x00|@@x@@|\x00\x00'],
 204:[b' \x10\x008\x10\x10\x10\x10\x108\x00\x00'],
 205:[b'\x08\x10\x008\x10\x10\x10\x10\x108\x00\x00'],
 206:[b'\x10(\x008\x10\x10\x10\x10\x108\x00\x00'],
 207:[b'\x00(\x008\x10\x10\x10\x10\x108\x00\x00'],
 208:[b'\x00\x00\x008$$t$$8\x00\x00'],
 209:[b'4X\x00DDdTLDD\x00\x00'],
 210:[b' \x10\x008DDDDD8\x00\x00'],
 211:[b'\x08\x10\x008DDDDD8\x00\x00'],
 212:[b'\x10(\x008DDDDD8\x00\x00'],
 213:[b'4X\x008DDDDD8\x00\x00'],
 214:[b'\x00(\x008DDDDD8\x00\x00'],
 215:[b'\x00\x00\x00\x00D(\x10(D\x00\x00\x00'],
 216:[b'\x00\x00\x048LTTTd8@\x00'],
 217:[b' \x10\x00DDDDDD8\x00\x00'],
 218:[b'\x08\x10\x00DDDDDD8\x00\x00'],
 219:[b'\x10(\x00DDDDDD8\x00\x00'],
 220:[b'\x00(\x00DDDDDD8\x00\x00'],
 221:[b'\x08\x10\x00DD(\x10\x10\x10\x10\x00\x00'],
 222:[b'\x00\x00\x00 8$$$8 \x00\x00'],
 223:[b'\x00\x00\x008DHPHDX\x00\x00'],
 224:[b'\x00\x00 \x10\x008\x04<D<\x00\x00'],
 225:[b'\x00\x00\x08\x10\x008\x04<D<\x00\x00'],
 226:[b'\x00\x00\x10(\x008\x04<D<\x00\x00'],
 227:[b'\x00\x004X\x008\x04<D<\x00\x00'],
 228:[b'\x00\x00\x00(\x008\x04<D<\x00\x00'],
 229:[b'\x00\x00\x10(\x108\x04<D<\x00\x00'],
 230:[b'\x00\x00\x00\x00\x008\x148P<\x00\x00'],
 231:[b'\x00\x00\x00\x00\x008D@D8\x080'],
 232:[b'\x00\x00 \x10\x008Dx@8\x00\x00'],
 233:[b'\x00\x00\x08\x10\x008Dx@8\x00\x00'],
 234:[b'\x00\x00\x10(\x008Dx@8\x00\x00'],
 235:[b'\x00\x00\x00(\x008Dx@8\x00\x00'],
 236:[b'\x00\x00 \x10\x000\x10\x10\x108\x00\x00'],
 237:[b'\x00\x00\x08\x10\x000\x10\x10\x108\x00\x00'],
 238:[b'\x00\x00\x10(\x000\x10\x10\x108\x00\x00'],
 239:[b'\x00\x00\x00(\x000\x10\x10\x108\x00\x00'],
 240:[b'\x00(\x10(\x04<DDD8\x00\x00'],
 241:[b'\x00\x004X\x00XdDDD\x00\x00'],
 242:[b'\x00\x00 \x10\x008DDD8\x00\x00'],
 243:[b'\x00\x00\x08\x10\x008DDD8\x00\x00'],
 244:[b'\x00\x00\x10(\x008DDD8\x00\x00'],
 245:[b'\x00\x004X\x008DDD8\x00\x00'],
 246:[b'\x00\x00\x00(\x008DDD8\x00\x00'],
 247:[b'\x00\x00\x00\x00\x10\x00|\x00\x10\x00\x00\x00'],
 248:[b'\x00\x00\x00\x00\x00<LTdx\x00\x00'],
 249:[b'\x00\x00 \x10\x00DDDD8\x00\x00'],
 250:[b'\x00\x00\x08\x10\x00DDDD8\x00\x00'],
 251:[b'\x00\x00\x10(\x00DDDD8\x00\x00'],
 252:[b'\x00\x00\x00(\x00DDDD8\x00\x00'],
 253:[b'\x00\x00\x08\x10\x00DDD(\x10 @'],
 254:[b'\x00\x00\x00@@xDDDx@@'],
 255:[b'\x00\x00\x00(\x00DDD(\x10 @'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

