'''
    ezFBfont_spleen_8x16_n : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original spleen-8x16.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Copyright (c) 2018-2022, Frederic Cambus"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    COMMENT /*
    COMMENT  * Spleen 8x16 1.9.1
    COMMENT  * Copyright (c) 2018-2022, Frederic Cambus
    COMMENT  * https://www.cambus.net/
    COMMENT  *
    COMMENT  * Created:      2018-08-11
    COMMENT  * Last Updated: 2020-10-10
    COMMENT  *
    COMMENT  * Spleen is released under the BSD 2-Clause license.
    COMMENT  * See LICENSE file for details.
    COMMENT  *
    COMMENT  * SPDX-License-Identifier: BSD-2-Clause
    COMMENT  */
'''
# Code generated by bdf2dict.py
# Font: spleen-8x16 Char set: b' %()*+,-./0123456789:\xb0'
# Cmd: ['bdf2dict.py', 'bdf-sources/spleen-8x16.bdf', '../latin-1/n-char.set']
# Date: 2024-06-04 14:21:27

version = '0.33'
name = '-misc-spleen-medium-r-normal--16-160-72-72-C-80-ISO10646-1'
family = 'Spleen'
weight = 'Medium'
size = 16

def height():
    return 12

def baseline():
    return 11

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 176

_g = {
 32:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 37:[b'\x00\x06fl\x0c\x18\x1806f`\x00'],
 40:[b'\x0e\x1800````00\x18\x0e'],
 41:[b'p\x18\x0c\x0c\x06\x06\x06\x06\x0c\x0c\x18p'],
 42:[b'\x00\x00\x00f<\x18\xff\x18<f\x00\x00'],
 43:[b'\x00\x00\x00\x00\x18\x18~\x18\x18\x00\x00\x00'],
 44:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x180'],
 45:[b'\x00\x00\x00\x00\x00\x00~\x00\x00\x00\x00\x00'],
 46:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x18\x00'],
 47:[b'\x06\x06\x0c\x0c\x18\x1800``\xc0\xc0'],
 48:[b'\x00|\xc6\xc6\xce\xde\xf6\xe6\xc6\xc6|\x00'],
 49:[b'\x00\x188xX\x18\x18\x18\x18\x18~\x00'],
 50:[b'\x00|\xc6\x06\x06\x0c\x180`\xc6\xfe\x00'],
 51:[b'\x00|\xc6\x06\x06<\x06\x06\x06\xc6|\x00'],
 52:[b'\x00\xc0\xc0\xcc\xcc\xcc\xcc\xfe\x0c\x0c\x0c\x00'],
 53:[b'\x00\xfe\xc6\xc0\xc0\xfc\x06\x06\x06\xc6|\x00'],
 54:[b'\x00|\xc6\xc0\xc0\xfc\xc6\xc6\xc6\xc6|\x00'],
 55:[b'\x00\xfe\xc6\x06\x06\x0c\x180000\x00'],
 56:[b'\x00|\xc6\xc6\xc6|\xc6\xc6\xc6\xc6|\x00'],
 57:[b'\x00|\xc6\xc6\xc6\xc6~\x06\x06\xc6|\x00'],
 58:[b'\x00\x00\x00\x00\x18\x18\x00\x00\x00\x18\x18\x00'],
 176:[b'8ll8\x00\x00\x00\x00\x00\x00\x00\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

