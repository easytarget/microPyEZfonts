'''
    ezFBfont_tom_thumb_s : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original tom-thumb.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT """""MIT"""""

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: tom-thumb Char set: b'\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
# Cmd: ['bdf2dict.py', 'bdf-sources/tom-thumb.bdf', '../latin-1/s-char.set']
# Date: 2024-06-04 14:21:35

version = '0.33'
name = '-Raccoon-Fixed4x6-Medium-R-Normal--6-60-75-75-P-40-ISO10646-1'
family = 'Fixed4x6'
weight = 'Medium'
size = 6

def height():
    return 6

def baseline():
    return 5

def max_width():
    return 4

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 161

def max_ch():
    return 255

_g = {
 161:[b'@\x00@@@\x00'],
 162:[b'@\xe0\x80\xe0@\x00'],
 163:[b'`@\xe0@\xe0\x00'],
 164:[b'\xa0@\xe0@\xa0\x00'],
 165:[b'\xa0\xa0@\xe0@\x00'],
 166:[b'@@\x00@@\x00'],
 167:[b'`@\xa0@\xc0\x00'],
 168:[b'\xa0\x00\x00\x00\x00\x00'],
 169:[b'`\x80`\x00\x00\x00'],
 170:[b'`\xa0\xe0\x00\xe0\x00'],
 171:[b'@\x80@\x00\x00\x00'],
 172:[b'\x00\xe0 \x00\x00\x00'],
 173:[b'\x00\x00\xc0\x00\x00\x00'],
 174:[b'\xc0\xc0\xa0\x00\x00\x00'],
 175:[b'\xe0\x00\x00\x00\x00\x00'],
 176:[b'@\xa0@\x00\x00\x00'],
 177:[b'@\xe0@\x00\xe0\x00'],
 178:[b'\xc0@`\x00\x00\x00'],
 179:[b'\xe0`\xe0\x00\x00\x00'],
 180:[b' @\x00\x00\x00\x00'],
 181:[b'\xa0\xa0\xa0\xc0\x80\x00'],
 182:[b'`\xa0```\x00'],
 183:[b'\x00\xe0\xe0\xe0\x00\x00'],
 184:[b'\x00\x00@ \xc0\x00'],
 185:[b'@@@\x00\x00\x00'],
 186:[b'@\xa0@\x00\xe0\x00'],
 187:[b'@ @\x00\x00\x00'],
 188:[b'\x80\x80\x00` \x00'],
 189:[b'\x80\x80\x00\xc0`\x00'],
 190:[b'\xc0\xc0\x00` \x00'],
 191:[b'@\x00@\x80\xe0\x00'],
 192:[b'@ @\xe0\xa0\x00'],
 193:[b'@\x80@\xe0\xa0\x00'],
 194:[b'\xe0\x00@\xe0\xa0\x00'],
 195:[b'`\xc0@\xe0\xa0\x00'],
 196:[b'\xa0@\xa0\xe0\xa0\x00'],
 197:[b'\xc0\xc0\xa0\xe0\xa0\x00'],
 198:[b'`\xc0\xe0\xc0\xe0\x00'],
 199:[b'`\x80\x80` @'],
 200:[b'@ \xe0\xc0\xe0\x00'],
 201:[b'@\x80\xe0\xc0\xe0\x00'],
 202:[b'\xe0\x00\xe0\xc0\xe0\x00'],
 203:[b'\xa0\x00\xe0\xc0\xe0\x00'],
 204:[b'@ \xe0@\xe0\x00'],
 205:[b'@\x80\xe0@\xe0\x00'],
 206:[b'\xe0\x00\xe0@\xe0\x00'],
 207:[b'\xa0\x00\xe0@\xe0\x00'],
 208:[b'\xc0\xa0\xe0\xa0\xc0\x00'],
 209:[b'\xc0`\xa0\xe0\xa0\x00'],
 210:[b'@ \xe0\xa0\xe0\x00'],
 211:[b'@\x80\xe0\xa0\xe0\x00'],
 212:[b'\xe0\x00\xe0\xa0\xe0\x00'],
 213:[b'\xc0`\xe0\xa0\xe0\x00'],
 214:[b'\xa0\x00\xe0\xa0\xe0\x00'],
 215:[b'\x00\xa0@\xa0\x00\x00'],
 216:[b'`\xa0\xe0\xa0\xc0\x00'],
 217:[b'\x80@\xa0\xa0\xe0\x00'],
 218:[b' @\xa0\xa0\xe0\x00'],
 219:[b'\xe0\x00\xa0\xa0\xe0\x00'],
 220:[b'\xa0\x00\xa0\xa0\xe0\x00'],
 221:[b' @\xa0\xe0@\x00'],
 222:[b'\x80\xe0\xa0\xe0\x80\x00'],
 223:[b'`\xa0\xc0\xa0\xc0\x80'],
 224:[b'@ `\xa0\xe0\x00'],
 225:[b'@\x80`\xa0\xe0\x00'],
 226:[b'\xe0\x00`\xa0\xe0\x00'],
 227:[b'`\xc0`\xa0\xe0\x00'],
 228:[b'\xa0\x00`\xa0\xe0\x00'],
 229:[b'```\xa0\xe0\x00'],
 230:[b'\x00`\xe0\xe0\xc0\x00'],
 231:[b'\x00`\x80` @'],
 232:[b'@ `\xe0`\x00'],
 233:[b'@\x80`\xe0`\x00'],
 234:[b'\xe0\x00`\xe0`\x00'],
 235:[b'\xa0\x00`\xe0`\x00'],
 236:[b'@ @@@\x00'],
 237:[b'@\x80@@@\x00'],
 238:[b'\xe0\x00@@@\x00'],
 239:[b'\xa0\x00@@@\x00'],
 240:[b'`\xc0`\xa0`\x00'],
 241:[b'\xc0`\xc0\xa0\xa0\x00'],
 242:[b'@ @\xa0@\x00'],
 243:[b'@\x80@\xa0@\x00'],
 244:[b'\xe0\x00@\xa0@\x00'],
 245:[b'\xc0`@\xa0@\x00'],
 246:[b'\xa0\x00@\xa0@\x00'],
 247:[b'@\x00\xe0\x00@\x00'],
 248:[b'\x00`\xe0\xa0\xc0\x00'],
 249:[b'\x80@\xa0\xa0`\x00'],
 250:[b' @\xa0\xa0`\x00'],
 251:[b'\xe0\x00\xa0\xa0`\x00'],
 252:[b'\xa0\x00\xa0\xa0`\x00'],
 253:[b' @\xa0` @'],
 254:[b'\x00\x80\xc0\xa0\xc0\x80'],
 255:[b'\xa0\x00\xa0` @'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

