'''
    ezFBfont_b10_b_r : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original b10_b.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "(c) Copyright 2000-2003 /efont/ The Electronic Font Open Laboratory."

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: b10_b Char set: b' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'
# Cmd: ['bdf2dict.py', 'bdf-sources/b10_b.bdf', '../latin-1/r-char.set']
# Date: 2024-06-04 14:20:03

version = '0.33'
name = '-Efont-Biwidth-Bold-R-Normal--10-100-75-75-P-50-ISO10646-1'
family = 'Biwidth'
weight = 'Bold'
size = 10

def height():
    return 8

def baseline():
    return 7

def max_width():
    return 5

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 126

_g = {
 32:[b'\x00\x00\x00\x00\x00\x00\x00\x00'],
 33:[b'\x00````\x00`\x00'],
 34:[b'\x00\xd0\xd0\xd0\x00\x00\x00\x00'],
 35:[b'\xd0\xd0\xf8\xd0\xf8\xd0\xd0\x00'],
 36:[b'`\xf0\xa0\xf0h\xf0`\x00'],
 37:[b'\x00\xc0\xd0`\xd00\x00\x00'],
 38:[b'\xc0\xa0\xa0\xc0\xa0\xa0\xd0\x00'],
 39:[b'\x00```\x00\x00\x00\x00'],
 40:[b'\x00`\xc0\xc0\xc0\xc0`\x00'],
 41:[b'\x00\xc0````\xc0\x00'],
 42:[b'\x00\x00\xb0\xe0\xf0\xe0\xb0\x00'],
 43:[b'\x00\x00``\xf8``\x00'],
 44:[b'\x00\x00\x00\x00\x00p`\xc0'],
 45:[b'\x00\x00\x00\x00\xf0\x00\x00\x00'],
 46:[b'\x00\x00\x00\x00\x00`\xf0`'],
 47:[b'\x0000`\xc0\x80\x80\x00'],
 48:[b'\x00`\xd0\xd0\xd0\xd0`\x00'],
 49:[b'\x00`\xe0```\xf0\x00'],
 50:[b'\x00\xe0\xb00\xe0\x80\xf0\x00'],
 51:[b'\x00\xf0`\xe00\xb0\xe0\x00'],
 52:[b'\x00`\xe0\xa0\xf0``\x00'],
 53:[b'\x00\xf0\x80\xe00\xb0\xe0\x00'],
 54:[b'\x00\xe0\x80\xe0\xb0\xb0\xe0\x00'],
 55:[b'\x00\xf00``\xc0\xc0\x00'],
 56:[b'\x00\xe0\xb0\xe0\xb0\xb0\xe0\x00'],
 57:[b'\x00\xe0\xb0\xb0\xf00\xe0\x00'],
 58:[b'\x00\x00\xe0\xe0\x00\xe0\xe0\x00'],
 59:[b'\x00\x00pp\x00p`\xc0'],
 60:[b'\x000`\xc0\xc0`0\x00'],
 61:[b'\x00\x00\x00\xf0\x00\xf0\x00\x00'],
 62:[b'\x00\xc0`00`\xc0\x00'],
 63:[b'\x00`\xd00`\x00`\x00'],
 64:[b'p\xd8\xb8\xa8\xa8\xb0\xc0p'],
 65:[b'\x00\xe0\xb0\xb0\xf0\xb0\xb0\x00'],
 66:[b'\x00\xe0\xb0\xe0\xb0\xb0\xe0\x00'],
 67:[b'\x00\xe0\xb0\x80\x80\xb0\xe0\x00'],
 68:[b'\x00\xe0\xb0\xb0\xb0\xb0\xe0\x00'],
 69:[b'\x00\xf0\x80\xe0\x80\x80\xf0\x00'],
 70:[b'\x00\xf0\x80\xe0\x80\x80\x80\x00'],
 71:[b'\x00\xe0\xb0\x80\xb0\xb0\xe0\x00'],
 72:[b'\x00\xb0\xb0\xf0\xb0\xb0\xb0\x00'],
 73:[b'\x00\xf0````\xf0\x00'],
 74:[b'\x00\xf0```\xa0\xc0\x00'],
 75:[b'\x00\xb0\xa0\xc0\xa0\xa0\xb0\x00'],
 76:[b'\x00\x80\x80\x80\x80\x80\xf0\x00'],
 77:[b'\x00\xb0\xf0\xf0\xb0\xb0\xb0\x00'],
 78:[b'\x00\xb0\xd0\xf0\xb0\xb0\xb0\x00'],
 79:[b'\x00\xe0\xb0\xb0\xb0\xb0\xe0\x00'],
 80:[b'\x00\xe0\xb0\xb0\xe0\x80\x80\x00'],
 81:[b'\x00\xe0\xb0\xb0\xd0\xb0\xe00'],
 82:[b'\x00\xe0\xb0\xb0\xe0\xb0\xb0\x00'],
 83:[b'\x00\xe0\xb0\xc0`\xb0\xe0\x00'],
 84:[b'\x00\xf0`````\x00'],
 85:[b'\x00\xb0\xb0\xb0\xb0\xb0\xe0\x00'],
 86:[b'\x00\xb0\xb0\xb0\xb0\xe0\xe0\x00'],
 87:[b'\x00\xb0\xb0\xb0\xf0\xf0\xb0\x00'],
 88:[b'\x00\xb0\xb0\xe0\xe0\xb0\xb0\x00'],
 89:[b'\x00\x98\x98\xd0```\x00'],
 90:[b'\x00\xf00`\xc0\x80\xf0\x00'],
 91:[b'\x00\xf0\xc0\xc0\xc0\xc0\xf0\x00'],
 92:[b'\x00\x80\x80\xc0`00\x00'],
 93:[b'\x00\xf00000\xf0\x00'],
 94:[b'\x00`\xd0\x00\x00\x00\x00\x00'],
 95:[b'\x00\x00\x00\x00\x00\x00\x00\xf0'],
 96:[b'\x00\xc0`\x00\x00\x00\x00\x00'],
 97:[b'\x00\x00\x00\xf0\xb0\xb0\xf0\x00'],
 98:[b'\x00\x80\x80\xe0\xb0\xb0\xe0\x00'],
 99:[b'\x00\x00\x00p\xc0\xc0p\x00'],
 100:[b'\x0000\xf0\xb0\xb0\xf0\x00'],
 101:[b'\x00\x00\x00\xe0\xb0\xc0\xe0\x00'],
 102:[b'\x00`\xd0\xc0\xe0\xc0\xc0\x00'],
 103:[b'\x00\x00\x00\xe0\xb0\xf00\xe0'],
 104:[b'\x00\x80\x80\xe0\xb0\xb0\xb0\x00'],
 105:[b'\x00`\x00\xe0``\xf0\x00'],
 106:[b'\x000\x00000\xd0`'],
 107:[b'\x00\x80\x80\xb0\xe0\xb0\xb0\x00'],
 108:[b'\x00\xe0````\xf0\x00'],
 109:[b'\x00\x00\x00\xd0\xa8\xa8\xa8\x00'],
 110:[b'\x00\x00\x00\xe0\xb0\xb0\xb0\x00'],
 111:[b'\x00\x00\x00\xe0\xb0\xb0\xe0\x00'],
 112:[b'\x00\x00\x00\xe0\xb0\xe0\x80\x80'],
 113:[b'\x00\x00\x00\xf0\xb0\xf000'],
 114:[b'\x00\x00\x00\xa0\xd0\x80\x80\x00'],
 115:[b'\x00\x00\x00p\xe00\xe0\x00'],
 116:[b'\x00\xc0\xc0\xe0\xc0\xd0`\x00'],
 117:[b'\x00\x00\x00\xb0\xb0\xb0\xf0\x00'],
 118:[b'\x00\x00\x00\xd0\xd0\xd0`\x00'],
 119:[b'\x00\x00\x00\x98\xa8\xa8\xd0\x00'],
 120:[b'\x00\x00\x00\xb0\xe0\xe0\xb0\x00'],
 121:[b'\x00\x00\x00\xb0\xb0\xf0\xb0\xe0'],
 122:[b'\x00\x00\x00\xf0`\xc0\xf0\x00'],
 123:[b'p\xc0`\xc0`\xc0p\x00'],
 124:[b'\x00``````\x00'],
 125:[b'\xc0`\xc0p\xc0`\xc0\x00'],
 126:[b'\x00\xd0\xa0\x00\x00\x00\x00\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

