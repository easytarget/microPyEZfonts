'''
    ezFBfont_open_iconic_all_1x_u : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_all_1x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: open_iconic_all_1x Char set: b' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'
# Cmd: ['bdf2dict.py', 'bdf-sources/open_iconic_all_1x.bdf', '../latin-1/u-char.set']
# Date: 2024-06-04 14:21:09

version = '0.33'
name = '"open_iconic_all_1x"'
family = 'None'
weight = 'None'
size = None

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 95

_g = {
 64:[b'\x1f\x01\t\xfd\t\x01\x1f\x00'],
 65:[b'\x1f\x01A\xfdA\x01\x1f\x00'],
 66:[b'\x008\x0c\x06\x06\x06\x00\x00'],
 67:[b'\x00\x1c0```\x00\x00'],
 68:[b'\xff\x00~\x00\xff\x00~\x00'],
 69:[b'\xff\x00\xfc\x00\xff\x00\xfc\x00'],
 70:[b'\xff\x00?\x00\xff\x00?\x00'],
 71:[b'\x1c\\\xe3\xc3\x03@n,'],
 72:[b'\x10\x10\x10\x10\x10|8\x10'],
 73:[b'<f\xe7\xe7\x81\xc3f<'],
 74:[b'<n\xcf\x81\x81\xcfn<'],
 75:[b'<v\xf3\x81\x81\xf3v<'],
 76:[b'<f\xc3\x81\xe7\xe7f<'],
 77:[b'\x00 `\xff` \x00\x00'],
 78:[b'\x00\x04\x06\xff\x06\x04\x00\x00'],
 79:[b'\x18\x18\x18\x18\x18<\x18\x08'],
 80:[b'\x00\x00 \x7f\xff \x00\x00'],
 81:[b'\x00\x00\x06\xff\xfe\x04\x00\x00'],
 82:[b'\x108<\x18\x18\x18\x18\x18'],
 83:[b'\x108|\x10\x10\x10\x10\x10'],
 84:[b'\x00B\x81\xa5\xa5\xc3\x00\x00'],
 85:[b'\x08(*\xaa\xaa*(\x08'],
 86:[b'\x18<<\x18\x00\x18\x18\x00'],
 87:[b'<F\x87\x89\x91\xe1b<'],
 88:[b'\x86\x86\xb6\xb6\xb6\x80\xff\x00'],
 89:[b'\x18\x18$\xff~ZZ~'],
 90:[b'\x00\xfe\x82\x83\x83\x82\xfe\x00'],
 91:[b'\x00\xfe\xfe\xff\xff\xfe\xfe\x00'],
 92:[b'~$$fB\xff\xff\xff'],
 93:[b'\x18<<<~\xff\x00\x18'],
 94:[b'\x10\x18d88d\x18\x10'],
 95:[b'\xfcff~ccc\xfe'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

