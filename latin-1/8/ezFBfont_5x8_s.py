'''
    ezFBfont_5x8_s : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original 5x8.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Public domain font.  Share and enjoy."

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: 5x8 Char set: b'\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
# Cmd: ['bdf2dict.py', 'bdf-sources/5x8.bdf', '../latin-1/s-char.set']
# Date: 2024-06-04 14:19:41

version = '0.33'
name = '-Misc-Fixed-Medium-R-Normal--8-80-75-75-C-50-ISO10646-1'
family = 'Fixed'
weight = 'Medium'
size = 8

def height():
    return 8

def baseline():
    return 7

def max_width():
    return 5

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 160

def max_ch():
    return 255

_g = {
 160:[b'\x00\x00\x00\x00\x00\x00\x00\x00'],
 161:[b'\x00 \x00    \x00'],
 162:[b'\x00\x00 p\xa0\xa0p '],
 163:[b'\x00 P\xe0@P\xa0\x00'],
 164:[b'\x00\x00\x88pPp\x88\x00'],
 165:[b'\x00\x88P\xf8 \xf8 \x00'],
 166:[b'   \x00   \x00'],
 167:[b'p\x80\xe0\x90p\x10\xe0\x00'],
 168:[b'\x00P\x00\x00\x00\x00\x00\x00'],
 169:[b'\x00p\xa8\xc8\xc8\xa8p\x00'],
 170:[b'0P0\x00p\x00\x00\x00'],
 171:[b'\x00\x00\x00P\xa0P\x00\x00'],
 172:[b'\x00\x00\x00\x00p\x10\x10\x00'],
 173:[b'\x00\x00\x00\x00p\x00\x00\x00'],
 174:[b'\x00p\xe8\xd8\xe8\xd8p\x00'],
 175:[b'\x00p\x00\x00\x00\x00\x00\x00'],
 176:[b'\x00 P \x00\x00\x00\x00'],
 177:[b'\x00\x00 p \x00p\x00'],
 178:[b' P\x10 p\x00\x00\x00'],
 179:[b'`\x10`\x10`\x00\x00\x00'],
 180:[b'\x00 @\x00\x00\x00\x00\x00'],
 181:[b'\x00\x00\x00\x90\x90\x90\xe0\x80'],
 182:[b'\x00x\xe8\xe8h((\x00'],
 183:[b'\x00\x00\x00\x00 \x00\x00\x00'],
 184:[b'\x00\x00\x00\x00\x00\x00 @'],
 185:[b' `  p\x00\x00\x00'],
 186:[b' P \x00p\x00\x00\x00'],
 187:[b'\x00\x00\x00\xa0P\xa0\x00\x00'],
 188:[b'\x80\x80\x80\xa0`\xf0 \x00'],
 189:[b'\x80\x80\xa0\xd0\x10 p\x00'],
 190:[b'\x80@\x80`\xa0\xf0 \x00'],
 191:[b'\x00 \x00 @P \x00'],
 192:[b'@ `\x90\xf0\x90\x90\x00'],
 193:[b' @`\x90\xf0\x90\x90\x00'],
 194:[b'`\x90`\x90\xf0\x90\x90\x00'],
 195:[b'P\xa0`\x90\xf0\x90\x90\x00'],
 196:[b'\x90\x00`\x90\xf0\x90\x90\x00'],
 197:[b'`\x90`\x90\xf0\x90\x90\x00'],
 198:[b'\x00p\xa0\xa0\xf0\xa0\xb0\x00'],
 199:[b'\x00`\x90\x80\x80\x90`@'],
 200:[b'@ \xf0\x80\xe0\x80\xf0\x00'],
 201:[b' @\xf0\x80\xe0\x80\xf0\x00'],
 202:[b'`\x90\xf0\x80\xe0\x80\xf0\x00'],
 203:[b'\x90\x00\xf0\x80\xe0\x80\xf0\x00'],
 204:[b'@ p   p\x00'],
 205:[b'\x10 p   p\x00'],
 206:[b' Pp   p\x00'],
 207:[b'P\x00p   p\x00'],
 208:[b'\x00pH\xe8HHp\x00'],
 209:[b'P\xa0\x90\xd0\xb0\x90\x90\x00'],
 210:[b'@ `\x90\x90\x90`\x00'],
 211:[b' @`\x90\x90\x90`\x00'],
 212:[b'`\x90`\x90\x90\x90`\x00'],
 213:[b'P\xa0`\x90\x90\x90`\x00'],
 214:[b'\x90\x00`\x90\x90\x90`\x00'],
 215:[b'\x00\x00\x00\x00P P\x00'],
 216:[b'\x00p\xb0\xb0\xd0\xd0\xe0\x00'],
 217:[b'@ \x90\x90\x90\x90`\x00'],
 218:[b' @\x90\x90\x90\x90`\x00'],
 219:[b'`\x90\x90\x90\x90\x90`\x00'],
 220:[b'\x90\x00\x90\x90\x90\x90`\x00'],
 221:[b'\x10 \x88P   \x00'],
 222:[b'\x00\x80\xe0\x90\x90\xe0\x80\x00'],
 223:[b'\x00`\x90\xa0\xa0\x90\xa0\x00'],
 224:[b'@ \x00p\x90\x90p\x00'],
 225:[b' @\x00p\x90\x90p\x00'],
 226:[b' P\x00p\x90\x90p\x00'],
 227:[b'P\xa0\x00p\x90\x90p\x00'],
 228:[b'\x00P\x00p\x90\x90p\x00'],
 229:[b'`\x90`p\x90\x90p\x00'],
 230:[b'\x00\x00\x00\xf0h\xb0x\x00'],
 231:[b'\x00\x00\x000@@0 '],
 232:[b'@ \x00`\xb0\xc0`\x00'],
 233:[b' @\x00`\xb0\xc0`\x00'],
 234:[b'`\x90\x00`\xb0\xc0`\x00'],
 235:[b'\x00P\x00`\xb0\xc0`\x00'],
 236:[b'@ \x00`  p\x00'],
 237:[b'\x10 \x00`  p\x00'],
 238:[b' P\x00`  p\x00'],
 239:[b'\x00P\x00`  p\x00'],
 240:[b'\xa0@\xa0\x10p\x90`\x00'],
 241:[b'P\xa0\x00\xe0\x90\x90\x90\x00'],
 242:[b'@ \x00`\x90\x90`\x00'],
 243:[b' @\x00`\x90\x90`\x00'],
 244:[b'`\x90\x00`\x90\x90`\x00'],
 245:[b'P\xa0\x00`\x90\x90`\x00'],
 246:[b'\x00\x90\x00`\x90\x90`\x00'],
 247:[b'\x00\x00 \x00p\x00 \x00'],
 248:[b'\x00\x00\x00p\xb0\xd0\xe0\x00'],
 249:[b'@ \x00\x90\x90\x90p\x00'],
 250:[b' @\x00\x90\x90\x90p\x00'],
 251:[b'`\x90\x00\x90\x90\x90p\x00'],
 252:[b'\x00\x90\x00\x90\x90\x90p\x00'],
 253:[b' @\x00\x90\x90p\x90`'],
 254:[b'\x00\x80\x80\xe0\x90\xe0\x80\x80'],
 255:[b'\x00\x90\x00\x90\x90p\x90`'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

