'''
    ezFBfont_open_iconic_text_2x_e : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_text_2x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: open_iconic_text_2x Char set: b' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
# Cmd: ['bdf2dict.py', 'bdf-sources/open_iconic_text_2x.bdf', '../latin-1/e-char.set']
# Date: 2024-06-04 14:21:20

version = '0.33'
name = '"open_iconic_text_2x"'
family = 'None'
weight = 'None'
size = None

def height():
    return 16

def baseline():
    return 16

def max_width():
    return 16

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 95

_g = {
 64:[b'\xff\xff\xff\xff\x00\x00\x00\x00?\xfc?\xfc\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00?\xfc?\xfc\x00\x00\x00\x00'],
 65:[b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xf0\xff\xf0\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xf0\xff\xf0\x00\x00\x00\x00'],
 66:[b'\xff\xff\xff\xff\x00\x00\x00\x00\x0f\xff\x0f\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x0f\xff\x0f\xff\x00\x00\x00\x00'],
 67:[b'\xff\xf0\xff\xf8||<<<<<|?\xf8?\xfe<\x1e<\x0f<\x0f<\x0f<\x0f|\x1e\xff\xfe\xff\xf8'],
 68:[b'\x00\x00\x00\x00\x000\x00`0l`\xc6`\xc6\xc1\x83\xc1\x83c\x06c\x066\x0c\x06\x00\x0c\x00\x00\x00\x00\x00'],
 69:[b'xx\xfc\xfc\xcc\xcc\xcc\xcc\xff\xfc\x7f\xf8\x0c\xc0\x0c\xc0\x7f\xf8\xff\xfc\xcc\xcc\xcc\xcc\xfc\xfcxx\x00\x00\x00\x00'],
 70:[b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x07\x00\x03\x00\x01\x00\x00'],
 71:[b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xc0\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xf3\xff\xf3'],
 72:[b'\x00\x00\x00\x00\x0f\xff\x1f\xff<\xf3<c~\x07\xff\x0f\xff\x0f~\x07<c<\xf3\x1f\xff\x0f\xff\x00\x00\x00\x00'],
 73:[b'\x00\x00\x00\x00\xfc?\xfc?\xfc?\xfc?\xfc?\xfc?\xf8>\xf0<\xe08\xc00\x80 \x00\x00\x00\x00\x00\x00'],
 74:[b'\x00\x00\x00\x00\x00\x00\x04\x01\x0c\x03\x1c\x07<\x0f|\x1f\xfc?\xfc?\xfc?\xfc?\xfc?\xfc?\x00\x00\x00\x00'],
 75:[b'\x00\x00\x00\x00\x0c\x03<\x0fp\x1c`\x18\xc00\xc00\xfc?\xfc?\xfc?\xfc?\xfc?\xfc?\x00\x00\x00\x00'],
 76:[b'\x00\x00\x00\x00\xfc?\xfc?\xfc?\xfc?\xfc?\xfc?\x0c\x03\x0c\x03\x18\x068\x0e\xf0<\xc00\x00\x00\x00\x00'],
 77:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 78:[b'\xff\xfc\xff\xfc\x00\x00\x00\x00\xff\xc0\xff\xc0\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xcc\xc0\xcc\xc0\x00\x00\x00\x00'],
 79:[b'\xfc\xfc\xfc\xfc00000000?\xf0?\xf000000000\xfc\xfc\xfc\xfc\x00\x00\x00\x00'],
 80:[b'\x00\x00\x00\x00\x00\x00\x00\x00<<~~\xe7\xe7\xc3\xc3\xc3\xc3\xe7\xe7~~<<\x00\x00\x00\x00\x00\x00\x00\x00'],
 81:[b'\x00`\x00\xf0\x00\xf0\x00`\x00\x00\x07\x80\x0f\xc0\x0c\xc0\x00\xc0\x01\xc0\x01\x80\x03\x80\x03\x00\x030\x03\xf0\x01\xe0'],
 82:[b'\x0f\xfc\x0f\xfc\x01\xe0\x01\xe0\x03\xe0\x03\xc0\x07\xc0\x07\x80\x07\x80\x0f\x80\x0f\x00\x1f\x00\x1e\x00\x1e\x00\xff\xc0\xff\xc0'],
 83:[b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00?\xfc?\xfc\x00\x00\x00\x00'],
 84:[b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xf0\xff\xf0\x00\x00\x00\x00'],
 85:[b'\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x0f\xff\x0f\xff\x00\x00\x00\x00'],
 86:[b'\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0'],
 87:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 88:[b'\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\xff\xff\xff\xff\xff\xff\xff\xff\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0'],
 89:[b'\x03\xf0\x07\xf8\x0e\x1c\x0c\x0c\x00\x0c\x00\x0c\x00\x18\x008\x00p\x00\xe0\x00\xc0\x00\xc0\x00\x00\x00\x00\x00\xc0\x00\xc0'],
 90:[b'\xff\xff\xff\xff\xcf\xff\xc7\xff\xe3\xff\xe3\xff\xc7\x03\xcf\x03\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'],
 91:[b'\xff\xff\xff\xff\xc3\xc3\x83\xc1\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x0f\xf0\x0f\xf0'],
 92:[b'<0<0<0<0<0<0<0<0<0>p\x1f\xe0\x07\xc0\x00\x00\x00\x00\xff\xfc\xff\xfc'],
 93:[b'\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00'],
 94:[b'\xf0\x0f\xf0\x0f\xf3\xcf\xf3\xcf\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xf3\xcf\xf3\xcf\xf0\x0f\xf0\x0f\x00\x00\x00\x00'],
 95:[b'\xff\xff\xff\xff\x00\x00\x00\x00\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\x00\x00\x00\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

