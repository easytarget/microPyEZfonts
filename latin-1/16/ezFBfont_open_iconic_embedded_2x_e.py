'''
    ezFBfont_open_iconic_embedded_2x_e : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_embedded_2x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: open_iconic_embedded_2x Char set: b' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
# Cmd: ['bdf2dict.py', 'bdf-sources/open_iconic_embedded_2x.bdf', '../latin-1/e-char.set']
# Date: 2024-06-04 14:21:15

version = '0.33'
name = '"open_iconic_embedded_2x"'
family = 'None'
weight = 'None'
size = None

def height():
    return 16

def baseline():
    return 16

def max_width():
    return 16

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 80

_g = {
 64:[b'\x00\x00\x00\x00\xff\xfc\xff\xfc\xc0\x0c\xc0\x0c\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0c\xc0\x0c\xff\xfc\xff\xfc\x00\x00\x00\x00'],
 65:[b'\x03\xc0\x07\xe0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x1f\xf8\x1f\xf8?\xfc\x7f\xfe\xff\xff\xff\xff\x00\x00\x00\x00\x03\xc0\x01\x80'],
 66:[b'\x01\x80\x03\xc0;\xdc?\xfc?\xfc\x1c8x\x1e\xf8\x1f\xf8\x1fx\x1e\x1c8?\xfc?\xfc;\xdc\x03\xc0\x01\x80'],
 67:[b'\x01\xc0\x03\x80\x03\x80\x07\x00\x07\xf0\x0f\xe0\x00\xe0\x00\xc0\x01\xc0\x01\x80\x0f\xe0\x0f\xc0\x07\x80\x07\x00\x06\x00\x00\x00'],
 68:[b'\x01\x80\x03\xc0\x07\xe0\x1f\xf8?\xfc\x7f\xfe?\xfc?\xfc?\xfc?\xfc<<<<<<<<\x00\x00\x00\x00'],
 69:[b'\x00\x00\x00\x18\x00\x1c\x00\x0e\x00\x06\x01\x80\x03\xc0\x07\xe0\x0f\xe0\x1f\xc0?\x80\x7f\x00\xfe\x00\xfc\x00\xf8\x00\xf0\x00'],
 70:[b'\x00\x00\x02\x00\x02\x00\x07\x00\x07\x00\x070\x07\xb0\xfd\xff\xfd\xff=\xe0\x18\xc0\x18\xc0\x18\xc0\x00\x00\x00\x00\x00\x00'],
 71:[b'\x03\x00\x07\x80\x07\x80\x0f\x80\x0f\xc0\x0f\xc0\x1c\xe0\x1c\xe0<\xf0<\xf0\x7f\xf0\x7f\xf8|\xf8\xfc\xfc\xff\xfc\xff\xfc'],
 72:[b'\x00`\x01\xe0\x01\xc0\x03\xc0\x03\xc0\x03\xc1\x03\xff\x03\xfe\x07\xfe\x0f\xf8\x1f\x00>\x00|\x00\x98\x00\x90\x00`\x00'],
 73:[b'\x00\x00\x00\x00\xff\xfc\xff\xfc\xff\xfc\xff\xfc\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xfc\xff\xfc\xff\xfc\x00\x00\x00\x00'],
 74:[b'\x06\x00\x07\x00\x07\x80\x06\xe0\x16p\x1ep\x0e\xe0\x07\x80\x07\x80\x0e\xe0\x1ep\x16p\x06\xe0\x07\x80\x07\x00\x06\x00'],
 75:[b'\x07\xe0\x1f\xf8?<\x7f\x0e\x7f\x06\xff\x07\xff\x03\xff\x03\xff\x03\xff\x03\xff\x07\x7f\x06\x7f\x0e?<\x1f\xf8\x07\xe0'],
 76:[b'\xff\xfc\xff\xfc\xff\xfc\xff\xfc\xff\xfc\xff\xfc\xff\xfc\xff\xfc\x00\x00\x00\x00\xff\xfc\xff\xfc\xff\xcc\xff\xcc\xff\xfc\xff\xfc'],
 77:[b'\x00\xc0\x03\xc0\x0f\x00<00\xf0\x03\xc0\x0f\x00<00\xf0\x03\xc0\x0f\xc0\x0f\xc0\x00\x00\x00\x00\x07\x80\x07\x80'],
 78:[b'\x03\x00\x03\x00\x03\x00\x13 30c\x18\xe3\x1c\xc3\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xe0\x1c`\x188p\x1f\xe0\x0f\xc0'],
 79:[b'\x07\xe0\x1f\xfb<?p\x0f`\x1f\xe0?\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xe0\x00`\x00p\x00<8\x1f\xf8\x07\xe0'],
 80:[b'\x0f\xe0\x7f\xfc\xf0\x1e@\x00\x00\x00\x00\x00\x07\xc0\x1f\xf0\x08 \x00\x00\x00\x00\x00\x00\x03\x80\x03\x80\x03\x80\x03\x80'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

