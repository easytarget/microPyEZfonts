'''
    ezFBfont_open_iconic_thing_2x_r : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_thing_2x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: open_iconic_thing_2x Char set: b' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'
# Cmd: ['bdf2dict.py', 'bdf-sources/open_iconic_thing_2x.bdf', '../latin-1/r-char.set']
# Date: 2024-06-04 14:21:21

version = '0.33'
name = '"open_iconic_thing_2x"'
family = 'None'
weight = 'None'
size = None

def height():
    return 16

def baseline():
    return 16

def max_width():
    return 16

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 82

_g = {
 64:[b'\x01\x80\x03\xc0\x07\xe0\x06`\x0c0\x1c8\xff\xff\xff\xff?\xfc?\xfc3\xcc3\xcc3\xcc3\xcc?\xfc?\xfc'],
 65:[b'\x07\xe0\x0f\xf0\x0c0\x0c0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff'],
 66:[b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xff\xcc\xff\xff\xff\xff\xff\x00\x00\x00\x00'],
 67:[b'\x00x\x01\xfe\x01\xe6\x03\xc3\x03\xc3\x03\xe7\x07\xff\x0f\xfe\x1f\xfe\x1f\xf8?\xc0\x7f\xc0\xfc\x00\xfc\x00\xfc\x00\xfc\x00'],
 68:[b'\x03\xc0\x07\xe0\x0ep\x0c0\x000\x000\x000\x000?\xfc?\xfc?\xfc?\xfc?\xfc?\xfc?\xfc?\xfc'],
 69:[b'\x00\xf0\x01\xf8\x03\x9c\x07\x0c\x0e\x0c\x1c\x1c88vp\xee\xe0\xcd\xc0\xcf\x80\xcf`\xe0\xe0q\xc0?\x80\x1f\x00'],
 70:[b'\x06\x00\x0f\x00\x0f\x00\x06\x00\xff\xf0\xff\xf0\xff\xf0\xff\xf0\xff\xf6\xff\xff\xff\xff\xff\xf6\xf9\xf0\xf0\xf0\xf0\xf0\xf9\xf0'],
 71:[b'\x00\x02\x00\x07\x00\x1e\x00<\x00|\x01\xf8\x01\xf0\x00`\x0e`\x1f\x00\x1f\x00\x1f\x00?\x00>\x00|\x00x\x00'],
 72:[b'\x01\x00\x01\x80\x03\xc0\x07\xe0\x0f\xf0\x0f\xf0\x1f\xf8\x1f\xf8?\xfc?\xfc3\xfc3\xfc8\xfc\x18x\x0f\xf0\x07\xe0'],
 73:[b'\x00\x00\x00\x00?\xfc?\xfc0\x0c0\x0c0\x0c0\x0c0\x0c0\x0c\xfc?\xfc?\xff\xff\xff\xff\x00\x00\x00\x00'],
 74:[b'\x0f\xc0\x1f\xe08p`\x18\xe0\x1c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xe0\x18`\x188|\x1f\xfe\x0f\xdf\x00\x0f\x00\x06'],
 75:[b'?\xf0?\xf000000000000000000000?\xf0<\xf0<\xf0?\xf0'],
 76:[b'\x03\x00\x03\x00?\x00\x7f\x00\x7f\xf0?\xf8\x03\xf8\x03\xf0\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00'],
 77:[b'\x03\x80\x07\x80\x0f\xc0\x0f\xc0\xcf\xcc\xff\xfc?\xf0\x1f\xe0\xfc\xfc\xfc\xfc<\xf0<\xf0\xfc\xfc\xdc\xec\x0c\xc0\x00\x00'],
 78:[b'\x08\x00\x0c\x00\x0e\x00\x0e\x00\x1f\x00?\x00? \x7f0\xfe8\xfc8\xfc|\xf8\xfcp\xfcq\xfc3\xfc\x13\xf8'],
 79:[b'\x03\xc0\x07\xe0\x0ep\x0c0\x0c0\x0c0?\xfc?\xfc?\xfc?\xfc?\xfc?\xfc?\xfc?\xfc\x00\x00\x00\x00'],
 80:[b'\xff\xff\xff\xff\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xff\xff\xff\xff\x03\xc0\x03\xc0\x1f\xf8?\xfc'],
 81:[b'?\xf0?\xf0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x7f\xf8\xff\xfc\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x00\x00'],
 82:[b'\xff\xfc\xff\xfc\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xff\xfc\xfc\xfc\xfc\xfc\xff\xfc'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

