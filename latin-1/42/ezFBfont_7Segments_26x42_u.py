'''
    ezFBfont_7Segments_26x42_u : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original 7Segments_26x42.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Created with Fony 1.4.7"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    COMMENT Exported by Fony v1.4.7
'''
# Code generated by bdf2dict.py
# Font: 7Segments_26x42 Char set: b' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'
# Cmd: ['bdf2dict.py', 'bdf-sources/7Segments_26x42.bdf', '../latin-1/u-char.set']
# Date: 2024-06-04 14:19:45

version = '0.33'
name = '7Segments_26x42'
family = 'None'
weight = 'None'
size = None

def height():
    return 42

def baseline():
    return 42

def max_width():
    return 32

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 48

def max_ch():
    return 58

_g = {
 48:[b'\x7f\xff\xfe\x80\xff\xff\xfe\xc0?\xff\xfd\xc0\xcf\xff\xfd\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xe0\x00\x01\xc0@\x00\x00\x80@\x00\x00\x80\xe0\x00\x01\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xcf\xff\xfd\xc0?\xff\xfd\xc0\xff\xff\xfe\xc0\x7f\xff\xfe\x80',32],
 49:[b' \x00\x00\x000\x00\x00\x00p\x00\x00\x00p\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00p\x00\x00\x00 \x00\x00\x00 \x00\x00\x00p\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00p\x00\x00\x00p\x00\x00\x000\x00\x00\x00 \x00\x00\x00',32],
 50:[b'\x7f\xff\xfe\x80\xff\xff\xfe\xc0?\xff\xfd\xc0\x0f\xff\xfd\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x1f\xff\xfd\xc0?\xff\xfe\x80_\xff\xff\x00\xef\xff\xfe\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xcf\xff\xfc\x00?\xff\xfc\x00\xff\xff\xfe\x00\x7f\xff\xfe\x00',32],
 51:[b'\x7f\xff\xfe\x80\xff\xff\xfe\xc0?\xff\xfd\xc0\x0f\xff\xfd\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x0f\xff\xfd\xc0\x1f\xff\xfe\x80\x1f\xff\xfe\x80\x0f\xff\xfd\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x0f\xff\xfd\xc0?\xff\xfd\xc0\xff\xff\xfe\xc0\x7f\xff\xfe\x80',32],
 52:[b'\x00\x00\x00\x80\x00\x00\x00\xc0\x00\x00\x01\xc0\xc0\x00\x01\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xef\xff\xfd\xc0_\xff\xfe\x80?\xff\xfe\x80\x1f\xff\xfd\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x00\xc0\x00\x00\x00\x80',32],
 53:[b'\x7f\xff\xfe\x00\xff\xff\xfe\x00?\xff\xfc\x00\xcf\xff\xfc\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xef\xff\xfe\x00_\xff\xff\x00?\xff\xfe\x80\x1f\xff\xfd\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x0f\xff\xfd\xc0?\xff\xfd\xc0\xff\xff\xfe\xc0\x7f\xff\xfe\x80',32],
 54:[b'\x7f\xff\xfe\x00\xff\xff\xfe\x00?\xff\xfc\x00\xcf\xff\xfc\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xef\xff\xfe\x00_\xff\xff\x00_\xff\xfe\x80\xef\xff\xfd\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xcf\xff\xfd\xc0?\xff\xfd\xc0\xff\xff\xfe\xc0\x7f\xff\xfe\x80',32],
 55:[b'\x7f\xff\xfe\x80\xff\xff\xfe\xc0?\xff\xfd\xc0\x0f\xff\xfd\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x01\xc0\x00\x00\x00\x80\x00\x00\x00\x80\x00\x00\x01\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x00\xc0\x00\x00\x00\x80',32],
 56:[b'\x7f\xff\xfe\x80\xff\xff\xfe\xc0?\xff\xfd\xc0\xcf\xff\xfd\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xef\xff\xfd\xc0_\xff\xfe\x80_\xff\xfe\x80\xef\xff\xfd\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xcf\xff\xfd\xc0?\xff\xfd\xc0\xff\xff\xfe\xc0\x7f\xff\xfe\x80',32],
 57:[b'\x7f\xff\xfe\x80\xff\xff\xfe\xc0?\xff\xfd\xc0\xcf\xff\xfd\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xf0\x00\x03\xc0\xef\xff\xfd\xc0_\xff\xfe\x80?\xff\xfe\x80\x1f\xff\xfd\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x0f\xff\xfd\xc0?\xff\xfd\xc0\xff\xff\xfe\xc0\x7f\xff\xfe\x80',32],
 58:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x1f\x00\x1f\x00\x1f\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x1f\x00\x1f\x00\x1f\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',11],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), _g[c][1]

