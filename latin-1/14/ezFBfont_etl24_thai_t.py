'''
    ezFBfont_etl24_thai_t : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original etl24-thai.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Public domain"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    COMMENT 
    COMMENT ------ strikeout ascent (bl + 24)
    COMMENT ------ level  2 (bl + 19)
    COMMENT ------ level  1 (bl + 14)
    COMMENT ------ level  0 (bl)
    COMMENT ------ level -1 / strikeout descent (bl - 5)
    COMMENT 
    COMMENT 94.09.14 modified by Takahashi N. <ntakahas@etl.go.jp>
    COMMENT 2000/04/18 modified by Theppitak Karoonboonyanan
'''
# Code generated by bdf2dict.py
# Font: etl24-thai Char set: b' +-.0123456789:'
# Cmd: ['bdf2dict.py', 'bdf-sources/etl24-thai.bdf', '../latin-1/t-char.set']
# Date: 2024-06-04 14:20:56

version = '0.33'
name = '-etl-fixed-medium-r-normal--24-240-72-72-c-120-tis620-0'
family = 'Fixed'
weight = 'Medium'
size = 24

def height():
    return 14

def baseline():
    return 14

def max_width():
    return 15

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 58

_g = {
 32:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 43:[b'\x00\x00\x00\x00\x00\x00\x06\x00\x06\x00\x06\x00\x06\x00\x7f\xe0\x7f\xe0\x06\x00\x06\x00\x06\x00\x06\x00\x00\x00'],
 45:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xe0\x7f\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 46:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x0f\x00\x0f\x00\x06\x00'],
 48:[b'\x0f\x00\x1f\x809\xc00\xc01\xc03\xc06\xc0<\xc08\xc00\xc00\xc09\xc0\x1f\x80\x0f\x00'],
 49:[b'\x06\x00\x0e\x00\x1e\x006\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00\x06\x00?\xc0?\xc0'],
 50:[b'\x0f\x80\x1f\xc00\xe00`\x00`\x00\xc0\x01\x80\x03\x00\x06\x00\x0c\x00\x18\x000\x00?\xe0?\xe0'],
 51:[b'\x0f\x80\x1f\xc00\xe00`\x00`\x00\xc0\x07\x80\x07\xc0\x00`\x00`0`0\xe0\x1f\xc0\x0f\x80'],
 52:[b'\x03\x00\x03\x00\x06\x00\x06\x00\r\x80\r\x80\x19\x80\x19\x801\x80?\xe0?\xe0\x01\x80\x01\x80\x01\x80'],
 53:[b'?\xc0?\xc00\x000\x000\x00?\x80?\xc0\x00\xe0\x00`\x00`0`0\xe0\x1f\xc0\x0f\x80'],
 54:[b'\x0f\x80\x1f\xc08`0`0\x007\x80?\xc08\xe00`0`0`8\xe0\x1f\xc0\x0f\x80'],
 55:[b'?\xe0?\xe0\x00\xc0\x00\xc0\x01\x80\x01\x80\x03\x00\x03\x00\x06\x00\x06\x00\x0c\x00\x0c\x00\x18\x00\x18\x00'],
 56:[b'\x0f\x00\x1f\x800\xc00\xc00\xc0\x1f\x80\x1f\x809\xc0p\xe0````p\xe0?\xc0\x1f\x80'],
 57:[b'\x0f\x80\x1f\xc08\xe00`0`8\xe0\x1f\xe0\x0f`\x00`\x00`0`0\xe0\x1f\xc0\x0f\x80'],
 58:[b'\x00\x00\x00\x00\x00\x00\x06\x00\x0f\x00\x0f\x00\x06\x00\x00\x00\x00\x00\x00\x00\x06\x00\x0f\x00\x0f\x00\x06\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

