'''
    ezFBfont_etl16_thai_r : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original etl16-thai.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Public domain font.  Share and enjoy."

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    COMMENT 94.8.25 7-bit part (ASCII) taken from etl16-latin1.bdf
    COMMENT         8-bit part (Thai) created by Manop Wongsaisuwan
    COMMENT 2000/04/18 some glyphs modified by Theppitak Karoonboonyanan
'''
INFO: Bad glyph box for char# 93
# Code generated by bdf2dict.py
# Font: etl16-thai Char set: b' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'
# Cmd: ['bdf2dict.py', 'bdf-sources/etl16-thai.bdf', '../latin-1/r-char.set']
# Date: 2024-06-04 14:20:56

version = '0.33'
name = '-etl-fixed-medium-r-normal--16-160-72-72-m-80-tis620-0'
family = 'fixed'
weight = 'medium'
size = 16

def height():
    return 14

def baseline():
    return 12

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 33

def max_ch():
    return 126

_g = {
 33:[b'\x00\x00\x10\x10\x10\x10\x10\x10\x10\x00\x10\x10\x00\x00'],
 34:[b'f""D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 35:[b'\x00\x00\x12\x12\x12~$$~HHH\x00\x00'],
 36:[b'\x00\x00\x10|\x92\x90p\x1c\x12\x92|\x10\x00\x00'],
 37:[b'\x00\x00b\x94\x94h\x10\x10,RR\x8c\x00\x00'],
 38:[b'\x00\x008DDD8r\x8a\x84\x8cr\x00\x00'],
 39:[b'\x18\x08\x08\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 40:[b'\x00\x08\x10\x10      \x10\x10\x08\x00'],
 41:[b'\x00 \x10\x10\x08\x08\x08\x08\x08\x08\x10\x10 \x00'],
 42:[b'\x00\x00\x00\x00\x10\x92T8T\x92\x10\x00\x00\x00'],
 43:[b'\x00\x00\x00\x00\x10\x10\x10\xfe\x10\x10\x10\x00\x00\x00'],
 44:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x08\x08\x10'],
 45:[b'\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x00\x00\x00\x00'],
 46:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x18\x00\x00'],
 47:[b'\x00\x00\x02\x02\x04\x08\x08\x10\x10 @@\x00\x00'],
 48:[b'\x00\x00\x18$BBBBBB$\x18\x00\x00'],
 49:[b'\x00\x00\x100P\x10\x10\x10\x10\x10\x10|\x00\x00'],
 50:[b'\x00\x00<BB\x02\x0c\x10 @@~\x00\x00'],
 51:[b'\x00\x00<BB\x02\x1c\x02\x02BB<\x00\x00'],
 52:[b'\x00\x00\x04\x0c\x14$DD~\x04\x04\x04\x00\x00'],
 53:[b'\x00\x00~@@@|\x02\x02\x02B<\x00\x00'],
 54:[b'\x00\x00\x1c @@|BBBB<\x00\x00'],
 55:[b'\x00\x00~\x02\x02\x04\x04\x04\x08\x08\x08\x08\x00\x00'],
 56:[b'\x00\x00<BBB<BBBB<\x00\x00'],
 57:[b'\x00\x00<BBB>\x02\x02\x02\x048\x00\x00'],
 58:[b'\x00\x00\x00\x00\x18\x18\x00\x00\x00\x18\x18\x00\x00\x00'],
 59:[b'\x00\x00\x00\x00\x18\x18\x00\x00\x00\x18\x08\x08\x10\x00'],
 60:[b'\x00\x00\x00\x04\x08\x10 @ \x10\x08\x04\x00\x00'],
 61:[b'\x00\x00\x00\x00\x00~\x00\x00\x00~\x00\x00\x00\x00'],
 62:[b'\x00\x00\x00@ \x10\x08\x04\x08\x10 @\x00\x00'],
 63:[b'\x00\x00<BB\x02\x04\x08\x08\x00\x08\x08\x00\x00'],
 64:[b'\x00\x00\x1c"JVRRRN \x1e\x00\x00'],
 65:[b'\x00\x00\x18$$BB~BBBB\x00\x00'],
 66:[b'\x00\x00|BBB|BBBB|\x00\x00'],
 67:[b'\x00\x00<BB@@@@BB<\x00\x00'],
 68:[b'\x00\x00xDBBBBBBDx\x00\x00'],
 69:[b'\x00\x00~@@@|@@@@~\x00\x00'],
 70:[b'\x00\x00~@@@|@@@@@\x00\x00'],
 71:[b'\x00\x00<BB@@NBBF:\x00\x00'],
 72:[b'\x00\x00BBBB~BBBBB\x00\x00'],
 73:[b'\x00\x00|\x10\x10\x10\x10\x10\x10\x10\x10|\x00\x00'],
 74:[b'\x00\x00>\x08\x08\x08\x08\x08\x08\x88\x88p\x00\x00'],
 75:[b'\x00\x00BDHP``PHDB\x00\x00'],
 76:[b'\x00\x00@@@@@@@@@~\x00\x00'],
 77:[b'\x00\x00BBffZZBBBB\x00\x00'],
 78:[b'\x00\x00BbbRRJJFFB\x00\x00'],
 79:[b'\x00\x00<BBBBBBBB<\x00\x00'],
 80:[b'\x00\x00|BBB|@@@@@\x00\x00'],
 81:[b'\x00\x00x\x84\x84\x84\x84\x84\x84\xb4\xccx\x06\x00'],
 82:[b'\x00\x00|BBB|HDDBB\x00\x00'],
 83:[b'\x00\x00<BB@0\x0c\x02BB<\x00\x00'],
 84:[b'\x00\x00\xfe\x10\x10\x10\x10\x10\x10\x10\x10\x10\x00\x00'],
 85:[b'\x00\x00BBBBBBBBB<\x00\x00'],
 86:[b'\x00\x00\x82\x82\x82DDD((\x10\x10\x00\x00'],
 87:[b'\x00\x00BBBBZZffBB\x00\x00'],
 88:[b'\x00\x00BB$$\x18\x18$$BB\x00\x00'],
 89:[b'\x00\x00\x82\x82DD(\x10\x10\x10\x10\x10\x00\x00'],
 90:[b'\x00\x00~\x02\x02\x04\x08\x10 @@~\x00\x00'],
 91:[b'\x008          8\x00'],
 92:[b'\x00\x00@@ \x10\x10\x08\x08\x04\x02\x02\x00\x00'],
 93:[b'\x00p\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10p\x00'],
 94:[b'\x18$B\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 95:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00'],
 96:[b'\x18\x10\x10\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 97:[b'\x00\x00\x00\x00<B\x02>BBF:\x00\x00'],
 98:[b'\x00@@@\\bBBBBb\\\x00\x00'],
 99:[b'\x00\x00\x00\x00<B@@@@B<\x00\x00'],
 100:[b'\x00\x02\x02\x02:FBBBBF:\x00\x00'],
 101:[b'\x00\x00\x00\x00<BB~@@B<\x00\x00'],
 102:[b'\x00\x0c\x10\x10\x10|\x10\x10\x10\x10\x10\x10\x00\x00'],
 103:[b'\x00\x00\x00\x02:DDD8 <BB<'],
 104:[b'\x00@@@\\bBBBBBB\x00\x00'],
 105:[b'\x00\x10\x10\x000\x10\x10\x10\x10\x10\x10|\x00\x00'],
 106:[b'\x00\x04\x04\x00\x0c\x04\x04\x04\x04\x04\x04\x04H0'],
 107:[b'\x00\x00@@DHP`PHDB\x00\x00'],
 108:[b'\x00\x000\x10\x10\x10\x10\x10\x10\x10\x10|\x00\x00'],
 109:[b'\x00\x00\x00\x00\xec\x92\x92\x92\x92\x92\x92\x92\x00\x00'],
 110:[b'\x00\x00\x00\x00\\bBBBBBB\x00\x00'],
 111:[b'\x00\x00\x00\x00<BBBBBB<\x00\x00'],
 112:[b'\x00\x00\x00\x00\\bBBBBb\\@@'],
 113:[b'\x00\x00\x00\x00:FBBBBF:\x02\x02'],
 114:[b'\x00\x00\x00\x00\\bB@@@@@\x00\x00'],
 115:[b'\x00\x00\x00\x00<B@0\x0c\x02B<\x00\x00'],
 116:[b'\x00\x00\x10\x10|\x10\x10\x10\x10\x10\x10\x0c\x00\x00'],
 117:[b'\x00\x00\x00\x00BBBBBBF:\x00\x00'],
 118:[b'\x00\x00\x00\x00BBB$$$\x18\x18\x00\x00'],
 119:[b'\x00\x00\x00\x00\x82\x92\x92\x92\x92\x92\x92l\x00\x00'],
 120:[b'\x00\x00\x00\x00BB$\x18\x18$BB\x00\x00'],
 121:[b'\x00\x00\x00\x00BBBBB&\x1a\x02\x02<'],
 122:[b'\x00\x00\x00\x00~\x02\x04\x08\x10 @~\x00\x00'],
 123:[b'\x00\x18  \x10\x10  \x10\x10  \x18\x00'],
 124:[b'\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'],
 125:[b'\x000\x08\x08\x10\x10\x08\x08\x10\x10\x08\x080\x00'],
 126:[b'\x00b\x92\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

