'''
    ezFBfont_b16_b_u : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original b16_b.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "(c) Copyright 2000-2003 /efont/ The Electronic Font Open Laboratory."

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: b16_b Char set: b' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'
# Cmd: ['bdf2dict.py', 'bdf-sources/b16_b.bdf', '../latin-1/u-char.set']
# Date: 2024-06-04 14:20:44

version = '0.33'
name = '-Efont-Biwidth-Bold-R-Normal--16-160-75-75-P-80-ISO10646-1'
family = 'Biwidth'
weight = 'Bold'
size = 16

def height():
    return 14

def baseline():
    return 12

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 95

_g = {
 32:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 33:[b'\x00\x00\x18\x18\x18\x18\x18\x18\x18\x00\x18\x18\x00\x00'],
 34:[b'llll\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 35:[b'\x00\x00666\xfell\xfe\xd8\xd8\xd8\x00\x00'],
 36:[b'\x00\x00\x18~\xdb\xd8x\x1e\x1b\xdb~\x18\x00\x00'],
 37:[b'\x00\x00s\xda\xdat\x18\x186kk\xce\x00\x00'],
 38:[b'\x00\x00<fff<{\xcd\xc6\xce{\x00\x00'],
 39:[b'\x18\x18\x18\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 40:[b'\x00\x0c\x18\x18000000\x18\x18\x0c\x00'],
 41:[b'\x00`00\x18\x18\x18\x18\x18\x1800`\x00'],
 42:[b'\x00\x00\x00\x00\x18\xdbj<j\xdb\x18\x00\x00\x00'],
 43:[b'\x00\x00\x00\x00\x18\x18\x18\xff\x18\x18\x18\x00\x00\x00'],
 44:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x008\x18\x180'],
 45:[b'\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00'],
 46:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0088\x00\x00'],
 47:[b'\x00\x00\x06\x06\x0c\x18\x1800`\xc0\xc0\x00\x00'],
 48:[b'\x00\x008l\xc6\xc6\xc6\xc6\xc6\xc6l8\x00\x00'],
 49:[b'\x00\x00\x188h\x18\x18\x18\x18\x18\x18~\x00\x00'],
 50:[b'\x00\x00|\xc6\xc6\x06\x1c0`\xc0\xc0\xfe\x00\x00'],
 51:[b'\x00\x00|\xc6\xc6\x06<\x06\x06\xc6\xc6|\x00\x00'],
 52:[b'\x00\x00\x0c\x1c4l\xcc\xcc\xfe\x0c\x0c\x0c\x00\x00'],
 53:[b'\x00\x00\xfe\xc0\xc0\xc0\xfc\x06\x06\x06\xc6|\x00\x00'],
 54:[b'\x00\x00<`\xc0\xc0\xfc\xc6\xc6\xc6\xc6|\x00\x00'],
 55:[b'\x00\x00\xfe\x06\x06\x0c\x0c\x0c\x18\x18\x18\x18\x00\x00'],
 56:[b'\x00\x00|\xc6\xc6\xc6|\xc6\xc6\xc6\xc6|\x00\x00'],
 57:[b'\x00\x00|\xc6\xc6\xc6~\x06\x06\x06\x0cx\x00\x00'],
 58:[b'\x00\x00\x00\x0088\x00\x00\x0088\x00\x00\x00'],
 59:[b'\x00\x00\x00\x0088\x00\x00\x008\x18\x180\x00'],
 60:[b'\x00\x00\x00\x06\x0c\x180`0\x18\x0c\x06\x00\x00'],
 61:[b'\x00\x00\x00\x00\x00\xfe\x00\x00\x00\xfe\x00\x00\x00\x00'],
 62:[b'\x00\x00\x00\xc0`0\x18\x0c\x180`\xc0\x00\x00'],
 63:[b'\x00\x00|\xc6\xc6\x06\x0c\x18\x18\x00\x18\x18\x00\x00'],
 64:[b'\x00\x00<f\xda\xd6\xd6\xd6\xd6\xde`>\x00\x00'],
 65:[b'\x00\x008ll\xc6\xc6\xfe\xc6\xc6\xc6\xc6\x00\x00'],
 66:[b'\x00\x00\xfc\xc6\xc6\xc6\xfc\xc6\xc6\xc6\xc6\xfc\x00\x00'],
 67:[b'\x00\x00|\xc6\xc6\xc0\xc0\xc0\xc0\xc6\xc6|\x00\x00'],
 68:[b'\x00\x00\xf8\xcc\xc6\xc6\xc6\xc6\xc6\xc6\xcc\xf8\x00\x00'],
 69:[b'\x00\x00\xfe\xc0\xc0\xc0\xfc\xc0\xc0\xc0\xc0\xfe\x00\x00'],
 70:[b'\x00\x00\xfe\xc0\xc0\xc0\xfc\xc0\xc0\xc0\xc0\xc0\x00\x00'],
 71:[b'\x00\x00|\xc6\xc6\xc0\xc0\xde\xc6\xc6\xcez\x00\x00'],
 72:[b'\x00\x00\xc6\xc6\xc6\xc6\xfe\xc6\xc6\xc6\xc6\xc6\x00\x00'],
 73:[b'\x00\x00~\x18\x18\x18\x18\x18\x18\x18\x18~\x00\x00'],
 74:[b'\x00\x00?\x0c\x0c\x0c\x0c\x0c\x0c\xcc\xccx\x00\x00'],
 75:[b'\x00\x00\xc6\xcc\xd8\xd0\xe0\xe0\xd0\xd8\xcc\xc6\x00\x00'],
 76:[b'\x00\x00\xc0\xc0\xc0\xc0\xc0\xc0\xc0\xc0\xc0\xfe\x00\x00'],
 77:[b'\x00\x00\xc6\xc6\xee\xee\xda\xda\xc6\xc6\xc6\xc6\x00\x00'],
 78:[b'\x00\x00\xc6\xe6\xe6\xd6\xd6\xda\xda\xce\xce\xc6\x00\x00'],
 79:[b'\x00\x00|\xc6\xc6\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00'],
 80:[b'\x00\x00\xfc\xc6\xc6\xc6\xfc\xc0\xc0\xc0\xc0\xc0\x00\x00'],
 81:[b'\x00\x00|\xc6\xc6\xc6\xc6\xc6\xc6\xda\xee|\x07\x00'],
 82:[b'\x00\x00\xfc\xc6\xc6\xc6\xfc\xd8\xcc\xcc\xc6\xc6\x00\x00'],
 83:[b'\x00\x00|\xc6\xc6\xc0p\x1c\x06\xc6\xc6|\x00\x00'],
 84:[b'\x00\x00\xff\x18\x18\x18\x18\x18\x18\x18\x18\x18\x00\x00'],
 85:[b'\x00\x00\xc6\xc6\xc6\xc6\xc6\xc6\xc6\xc6\xc6|\x00\x00'],
 86:[b'\x00\x00\xc3\xc3\xc3fff44\x18\x18\x00\x00'],
 87:[b'\x00\x00\xc6\xc6\xc6\xc6\xda\xda\xee\xee\xc6\xc6\x00\x00'],
 88:[b'\x00\x00\xc6\xc6ll88ll\xc6\xc6\x00\x00'],
 89:[b'\x00\x00\xc3\xc3ff4\x18\x18\x18\x18\x18\x00\x00'],
 90:[b'\x00\x00\xfe\x06\x06\x0c\x180`\xc0\xc0\xfe\x00\x00'],
 91:[b'\x00\x1e\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x1e\x00'],
 92:[b'\x00\x00\xc0\xc0`00\x18\x18\x0c\x06\x06\x00\x00'],
 93:[b'\x00\xf00000000000\xf0\x00'],
 94:[b'8l\xc6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 95:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

