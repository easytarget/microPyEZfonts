'''
    ezFBfont_open_iconic_all_6x_n : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_all_6x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: open_iconic_all_6x Char set: b' %()*+,-./0123456789:\xb0'
# Cmd: ['bdf2dict.py', 'bdf-sources/open_iconic_all_6x.bdf', '../latin-1/n-char.set']
# Date: 2024-06-04 14:21:09

version = '0.33'
name = '"open_iconic_all_6x"'
family = 'None'
weight = 'None'
size = None

def height():
    return 48

def baseline():
    return 48

def max_width():
    return 48

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 176

def max_ch():
    return 176

_g = {
 176:[b'\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00p\x00\x00\x00\x00\x00\xf8\x00\x00\x00\x00\x01\xfc\x00\x00\x00\x00\x03\xfe\x00\x00\x00\x00\x07\xff\x00\x00\x00\x00\x0f\xfe\x00\x00\x00\x00\x1f\xfc\x00\x00\x00\x00?\xf8\x00\x00\x00\x00\x7f\xf0\x00\x00\x00\x00\xff\xe0\x00\x00\x00\x01\xff\xc0\x00\x00\x00\x03\xff\x80\x00\x00`\x07\xff\x00\x00\x00\xf0\x0f\xfe\x00\x00\x01\xf8\x1f\xfc\x00\x00\x03\xfc?\xf8\x00\x00\x07\xfe\x7f\xf0\x00\x00\x0f\xff\xff\xe0\x00\x00\x1f\xff\xff\xc0\x00\x00?\xff\xff\x80\x00\x00\x7f\xff\xff\x00\x00\x00\xff\xff\xfe\x00\x00\x01\xff\xff\xfc\x00\x00\x03\xff\x9f\xf8\x00\x00\x07\xff\x0f\xf0\x00\x00\x0f\xff\x07\xe0\x00\x00\x1f\xfe\x03\xc0\x00\x00?\xfc\x01\x80\x00\x00\x7f\xf8\x00\x00\x00\x00\xff\xf0\x00\x00\x00\x00\x7f\xe0\x00\x00\x00\x00?\xc0\x00\x00\x00\x00\x1f\x80\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

