'''
    ezFBfont_6x13O_n : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original 6x13O.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Public domain font.  Share and enjoy."

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: 6x13O Char set: b' %()*+,-./0123456789:\xb0'
# Cmd: ['bdf2dict.py', 'bdf-sources/6x13O.bdf', '../latin-1/n-char.set']
# Date: 2024-06-04 14:19:45

version = '0.33'
name = '-Misc-Fixed-Medium-O-SemiCondensed--13-120-75-75-C-60-ISO10646-1'
family = 'Fixed'
weight = 'Medium'
size = 13

def height():
    return 11

def baseline():
    return 10

def max_width():
    return 6

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 176

_g = {
 32:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 37:[b'\x00$T(\x08\x10 P\xa8\x90\x00'],
 40:[b'\x08\x10  @@@@  \x10'],
 41:[b' \x10\x10\x08\x08\x08\x08\x10\x10 @'],
 42:[b'\x00\x00\x10T|8|\xa8 \x00\x00'],
 43:[b'\x00\x00\x00\x10\x10x  \x00\x00\x00'],
 44:[b'\x00\x00\x00\x00\x00\x00\x00\x000 @'],
 45:[b'\x00\x00\x00\x00\x00x\x00\x00\x00\x00\x00'],
 46:[b'\x00\x00\x00\x00\x00\x00\x00\x00 p '],
 47:[b'\x00\x04\x04\x08\x10\x10 @\x80\x80\x00'],
 48:[b'\x00\x10(DDD\x88\x88P \x00'],
 49:[b'\x00\x100P\x10\x10   \xf8\x00'],
 50:[b'\x008DD\x08\x10 @\x80\xf8\x00'],
 51:[b'\x00|\x04\x08\x108\x04\x08\x88p\x00'],
 52:[b'\x00\x08\x08\x18((H\xf8\x10\x10\x00'],
 53:[b'\x00|@@Xd\x04\x08\x88p\x00'],
 54:[b'\x008D@@p\x88\x88\x88p\x00'],
 55:[b'\x00|\x04\x08\x08\x10  @@\x00'],
 56:[b'\x008DDDx\x88\x88\x88p\x00'],
 57:[b'\x008DDD8\x08\x08\x88p\x00'],
 58:[b'\x00\x00\x00\x108\x10\x00\x00 p '],
 176:[b'\x000HH0\x00\x00\x00\x00\x00\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

