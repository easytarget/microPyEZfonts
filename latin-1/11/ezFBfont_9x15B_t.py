'''
    ezFBfont_9x15B_t : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original 9x15B.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Public domain font.  Share and enjoy."

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: 9x15B Char set: b' +-.0123456789:'
# Cmd: ['bdf2dict.py', 'bdf-sources/9x15B.bdf', '../latin-1/t-char.set']
# Date: 2024-06-04 14:19:52

version = '0.33'
name = '-Misc-Fixed-Bold-R-Normal--15-140-75-75-C-90-ISO10646-1'
family = 'Fixed'
weight = 'Bold'
size = 15

def height():
    return 11

def baseline():
    return 10

def max_width():
    return 9

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 58

_g = {
 32:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 43:[b'\x00\x00\x00\x00\x18\x00\x18\x00\x18\x00\xff\x00\x18\x00\x18\x00\x18\x00\x00\x00\x00\x00'],
 45:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 46:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00<\x00\x18\x00'],
 48:[b'\x18\x00<\x00f\x00\xc3\x00\xc3\x00\xc3\x00\xc3\x00f\x00<\x00\x18\x00\x00\x00'],
 49:[b'\x18\x008\x00x\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18\x00\x18\x00~\x00\x00\x00'],
 50:[b'<\x00f\x00\xc3\x00\x03\x00\x06\x00\x0c\x00\x18\x000\x00`\x00\xff\x00\x00\x00'],
 51:[b'|\x00\xc6\x00\x03\x00\x06\x00\x1c\x00\x06\x00\x03\x00\x03\x00\xc6\x00|\x00\x00\x00'],
 52:[b'\x06\x00\x0e\x00\x1e\x006\x00f\x00\xc6\x00\xff\x00\x06\x00\x06\x00\x06\x00\x00\x00'],
 53:[b'\xfe\x00\xc0\x00\xc0\x00\xdc\x00\xe6\x00\x03\x00\x03\x00\xc3\x00f\x00<\x00\x00\x00'],
 54:[b'<\x00f\x00\xc2\x00\xc0\x00\xdc\x00\xe6\x00\xc3\x00\xc3\x00f\x00<\x00\x00\x00'],
 55:[b'\xff\x00\x03\x00\x03\x00\x06\x00\x0c\x00\x0c\x00\x18\x00\x18\x00\x18\x00\x18\x00\x00\x00'],
 56:[b'<\x00f\x00\xc3\x00f\x00<\x00f\x00\xc3\x00\xc3\x00f\x00<\x00\x00\x00'],
 57:[b'<\x00f\x00\xc3\x00\xc3\x00g\x00;\x00\x03\x00C\x00f\x00<\x00\x00\x00'],
 58:[b'\x00\x00\x00\x00\x00\x00\x18\x00<\x00\x18\x00\x00\x00\x00\x00\x18\x00<\x00\x18\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

