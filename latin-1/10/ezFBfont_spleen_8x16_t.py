'''
    ezFBfont_spleen_8x16_t : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original spleen-8x16.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Copyright (c) 2018-2022, Frederic Cambus"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    COMMENT /*
    COMMENT  * Spleen 8x16 1.9.1
    COMMENT  * Copyright (c) 2018-2022, Frederic Cambus
    COMMENT  * https://www.cambus.net/
    COMMENT  *
    COMMENT  * Created:      2018-08-11
    COMMENT  * Last Updated: 2020-10-10
    COMMENT  *
    COMMENT  * Spleen is released under the BSD 2-Clause license.
    COMMENT  * See LICENSE file for details.
    COMMENT  *
    COMMENT  * SPDX-License-Identifier: BSD-2-Clause
    COMMENT  */
'''
# Code generated by bdf2dict.py
# Font: spleen-8x16 Char set: b' +-.0123456789:'
# Cmd: ['bdf2dict.py', 'bdf-sources/spleen-8x16.bdf', '../latin-1/t-char.set']
# Date: 2024-06-04 14:21:27

version = '0.33'
name = '-misc-spleen-medium-r-normal--16-160-72-72-C-80-ISO10646-1'
family = 'Spleen'
weight = 'Medium'
size = 16

def height():
    return 10

def baseline():
    return 10

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 58

_g = {
 32:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 43:[b'\x00\x00\x00\x18\x18~\x18\x18\x00\x00'],
 45:[b'\x00\x00\x00\x00\x00~\x00\x00\x00\x00'],
 46:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x18\x18'],
 48:[b'|\xc6\xc6\xce\xde\xf6\xe6\xc6\xc6|'],
 49:[b'\x188xX\x18\x18\x18\x18\x18~'],
 50:[b'|\xc6\x06\x06\x0c\x180`\xc6\xfe'],
 51:[b'|\xc6\x06\x06<\x06\x06\x06\xc6|'],
 52:[b'\xc0\xc0\xcc\xcc\xcc\xcc\xfe\x0c\x0c\x0c'],
 53:[b'\xfe\xc6\xc0\xc0\xfc\x06\x06\x06\xc6|'],
 54:[b'|\xc6\xc0\xc0\xfc\xc6\xc6\xc6\xc6|'],
 55:[b'\xfe\xc6\x06\x06\x0c\x180000'],
 56:[b'|\xc6\xc6\xc6|\xc6\xc6\xc6\xc6|'],
 57:[b'|\xc6\xc6\xc6\xc6~\x06\x06\xc6|'],
 58:[b'\x00\x00\x00\x18\x18\x00\x00\x00\x18\x18'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

