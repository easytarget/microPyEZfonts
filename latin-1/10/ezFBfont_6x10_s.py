'''
    ezFBfont_6x10_s : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original 6x10.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Public domain terminal emulator font.  Share and enjoy."

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: 6x10 Char set: b'\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
# Cmd: ['bdf2dict.py', 'bdf-sources/6x10.bdf', '../latin-1/s-char.set']
# Date: 2024-06-04 14:19:41

version = '0.33'
name = '-Misc-Fixed-Medium-R-Normal--10-100-75-75-C-60-ISO10646-1'
family = 'Fixed'
weight = 'Medium'
size = 10

def height():
    return 10

def baseline():
    return 8

def max_width():
    return 6

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 160

def max_ch():
    return 255

_g = {
 160:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 161:[b'\x00 \x00     \x00\x00'],
 162:[b'\x00\x00 x\xa0\xa0\xa0x \x00'],
 163:[b'\x000H@\xe0@H\xb0\x00\x00'],
 164:[b'\x00\x00\x00\x88pPp\x88\x00\x00'],
 165:[b'\x00\x88\x88P \xf8   \x00'],
 166:[b'\x00   \x00   \x00\x00'],
 167:[b'\x00p\x80\xe0\x90H8\x08p\x00'],
 168:[b'P\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 169:[b'\x00p\x88\xa8\xc8\xa8\x88p\x00\x00'],
 170:[b'\x008HX(\x00x\x00\x00\x00'],
 171:[b'\x00\x00\x00$H\x90H$\x00\x00'],
 172:[b'\x00\x00\x00\x00x\x08\x00\x00\x00\x00'],
 173:[b'\x00\x00\x00\x00x\x00\x00\x00\x00\x00'],
 174:[b'\x00p\x88\xe8\xc8\xc8\x88p\x00\x00'],
 175:[b'\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 176:[b'\x00 P \x00\x00\x00\x00\x00\x00'],
 177:[b'\x00\x00  \xf8  \xf8\x00\x00'],
 178:[b'0H\x10 x\x00\x00\x00\x00\x00'],
 179:[b'p\x080\x08p\x00\x00\x00\x00\x00'],
 180:[b'\x10 \x00\x00\x00\x00\x00\x00\x00\x00'],
 181:[b'\x00\x00\x00\x88\x88\x88\xc8\xb0\x80\x00'],
 182:[b'\x00x\xe8\xe8h(((\x00\x00'],
 183:[b'\x00\x00\x00\x00 \x00\x00\x00\x00\x00'],
 184:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x10 '],
 185:[b' `  p\x00\x00\x00\x00\x00'],
 186:[b'\x000HH0\x00x\x00\x00\x00'],
 187:[b'\x00\x00\x00\x90H$H\x90\x00\x00'],
 188:[b'@\xc0@@\xe4\x0c\x14<\x04\x00'],
 189:[b'@\xc0@@\xe8\x14\x04\x08\x1c\x00'],
 190:[b'\xc0 @ \xc8\x18(x\x08\x00'],
 191:[b'\x00 \x00  @\x88p\x00\x00'],
 192:[b'@ p\x88\x88\xf8\x88\x88\x00\x00'],
 193:[b'\x10 p\x88\x88\xf8\x88\x88\x00\x00'],
 194:[b' Pp\x88\x88\xf8\x88\x88\x00\x00'],
 195:[b'H\xb0p\x88\x88\xf8\x88\x88\x00\x00'],
 196:[b'P\x00p\x88\x88\xf8\x88\x88\x00\x00'],
 197:[b' Pp\x88\x88\xf8\x88\x88\x00\x00'],
 198:[b'\x00<P\x90\x9c\xf0\x90\x9c\x00\x00'],
 199:[b'\x00p\x88\x80\x80\x80\x88p @'],
 200:[b'@\xf8\x80\x80\xf0\x80\x80\xf8\x00\x00'],
 201:[b'\x10\xf8\x80\x80\xf0\x80\x80\xf8\x00\x00'],
 202:[b' \xf8\x80\x80\xf0\x80\x80\xf8\x00\x00'],
 203:[b'P\xf8\x80\x80\xf0\x80\x80\xf8\x00\x00'],
 204:[b'@ p    p\x00\x00'],
 205:[b'\x10 p    p\x00\x00'],
 206:[b' Pp    p\x00\x00'],
 207:[b'P\x00p    p\x00\x00'],
 208:[b'\x00\xf0HH\xe8HH\xf0\x00\x00'],
 209:[b'(P\x88\xc8\xa8\x98\x88\x88\x00\x00'],
 210:[b'@ p\x88\x88\x88\x88p\x00\x00'],
 211:[b'\x10 p\x88\x88\x88\x88p\x00\x00'],
 212:[b' Pp\x88\x88\x88\x88p\x00\x00'],
 213:[b'(Pp\x88\x88\x88\x88p\x00\x00'],
 214:[b'P\x00p\x88\x88\x88\x88p\x00\x00'],
 215:[b'\x00\x00\x00\x88P P\x88\x00\x00'],
 216:[b'\x00p\x98\x98\xa8\xc8\xc8p\x00\x00'],
 217:[b'@ \x88\x88\x88\x88\x88p\x00\x00'],
 218:[b'\x10 \x88\x88\x88\x88\x88p\x00\x00'],
 219:[b' P\x00\x88\x88\x88\x88p\x00\x00'],
 220:[b'P\x00\x88\x88\x88\x88\x88p\x00\x00'],
 221:[b'\x10 \x88\x88P   \x00\x00'],
 222:[b'\x00\x80\xf0\x88\xf0\x80\x80\x80\x00\x00'],
 223:[b'\x00p\x88\x90\xa0\x90\x88\xb0\x00\x00'],
 224:[b'@ \x00p\x08x\x88x\x00\x00'],
 225:[b'\x10 \x00p\x08x\x88x\x00\x00'],
 226:[b' P\x00p\x08x\x88x\x00\x00'],
 227:[b'(P\x00p\x08x\x88x\x00\x00'],
 228:[b'\x00P\x00p\x08x\x88x\x00\x00'],
 229:[b' P p\x08x\x88x\x00\x00'],
 230:[b'\x00\x00\x00x\x14|\x90|\x00\x00'],
 231:[b'\x00\x00\x00p\x88\x80\x88p @'],
 232:[b'@ \x00p\x88\xf8\x80p\x00\x00'],
 233:[b'\x10 \x00p\x88\xf8\x80p\x00\x00'],
 234:[b' P\x00p\x88\xf8\x80p\x00\x00'],
 235:[b'\x00P\x00p\x88\xf8\x80p\x00\x00'],
 236:[b'@ \x00`   p\x00\x00'],
 237:[b' @\x00`   p\x00\x00'],
 238:[b' P\x00`   p\x00\x00'],
 239:[b'\x00P\x00`   p\x00\x00'],
 240:[b'\x00\xc00p\x88\x88\x88p\x00\x00'],
 241:[b'(P\x00\xb0\xc8\x88\x88\x88\x00\x00'],
 242:[b'@ \x00p\x88\x88\x88p\x00\x00'],
 243:[b'\x10 \x00p\x88\x88\x88p\x00\x00'],
 244:[b' P\x00p\x88\x88\x88p\x00\x00'],
 245:[b'(P\x00p\x88\x88\x88p\x00\x00'],
 246:[b'\x00P\x00p\x88\x88\x88p\x00\x00'],
 247:[b'\x00\x00 \x00\xf8\x00 \x00\x00\x00'],
 248:[b'\x00\x00\x00x\x98\xa8\xc8\xf0\x00\x00'],
 249:[b'@ \x00\x88\x88\x88\x98h\x00\x00'],
 250:[b'\x10 \x00\x88\x88\x88\x98h\x00\x00'],
 251:[b' P\x00\x88\x88\x88\x98h\x00\x00'],
 252:[b'\x00P\x00\x88\x88\x88\x98h\x00\x00'],
 253:[b'\x00\x10 \x88\x88\x98h\x08\x88p'],
 254:[b'\x00\x00\x80\xf0\x88\x88\x88\xf0\x80\x80'],
 255:[b'\x00P\x00\x88\x88\x98h\x08\x88p'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

