'''
    ezFBfont_etl16_thai_t : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original etl16-thai.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Public domain font.  Share and enjoy."

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    COMMENT 94.8.25 7-bit part (ASCII) taken from etl16-latin1.bdf
    COMMENT         8-bit part (Thai) created by Manop Wongsaisuwan
    COMMENT 2000/04/18 some glyphs modified by Theppitak Karoonboonyanan
'''
# Code generated by bdf2dict.py
# Font: etl16-thai Char set: b' +-.0123456789:'
# Cmd: ['bdf2dict.py', 'bdf-sources/etl16-thai.bdf', '../latin-1/t-char.set']
# Date: 2024-06-04 14:20:56

version = '0.33'
name = '-etl-fixed-medium-r-normal--16-160-72-72-m-80-tis620-0'
family = 'fixed'
weight = 'medium'
size = 16

def height():
    return 10

def baseline():
    return 10

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 43

def max_ch():
    return 58

_g = {
 43:[b'\x00\x00\x10\x10\x10\xfe\x10\x10\x10\x00'],
 45:[b'\x00\x00\x00\x00\x00~\x00\x00\x00\x00'],
 46:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x18\x18'],
 48:[b'\x18$BBBBBB$\x18'],
 49:[b'\x100P\x10\x10\x10\x10\x10\x10|'],
 50:[b'<BB\x02\x0c\x10 @@~'],
 51:[b'<BB\x02\x1c\x02\x02BB<'],
 52:[b'\x04\x0c\x14$DD~\x04\x04\x04'],
 53:[b'~@@@|\x02\x02\x02B<'],
 54:[b'\x1c @@|BBBB<'],
 55:[b'~\x02\x02\x04\x04\x04\x08\x08\x08\x08'],
 56:[b'<BBB<BBBB<'],
 57:[b'<BBB>\x02\x02\x02\x048'],
 58:[b'\x00\x00\x18\x18\x00\x00\x00\x18\x18\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), height(), max_width()

