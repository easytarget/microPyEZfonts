'''
    ezFBfont_open_iconic_all_2x_0x100_0x1FF_16 : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_all_2x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: open_iconic_all_2x
# Cmd: ['bdf2dict.py'], ['Symbols-bdf-sources/open_iconic_all_2x.bdf', '_', './0x100_0x1FF-char.set']
# Date: 2024-07-31 15:36:12
'''
    Original Copyright, Comments and Notices from source:

    COMMENT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"
'''
version = '0.33'
name = 'open_iconic_all_2x'
family = 'iconic'
weight = 'none'
size = None

def height():
    return 16

def baseline():
    return 16

def max_width():
    return 16

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 256

def max_ch():
    return 286

_g = {
  256:b'\x0c\xff\x0c\xff\x0c\x00\x0c\x00\x0c\xfc\x0c\xfc\x0c\x00\x0c\x00\x0c\xf0\x0c\xf0\x0c\x00\x0c\x00\x7f\x80?\x00\x1e\x00\x0c\x00',
  257:b'\xff\xff\xff\xff\xcc\x03\xcc\x03\xff\xff\xff\xff\xcc\x03\xcc\x03\xff\xff\xff\xff\xcc\x03\xcc\x03\xff\xff\xff\xff\x00\x00\x00\x00',
  258:b'\x00\x00\x00\x00\x01\x80\x01\x80\x01\x80\x03\xc0\x7f\xfe?\xfc\x1f\xf8\x0f\xf0\x07\xe0\x07\xe0\x0ep\x0c0\x08\x10\x00\x00',
  259:b'\x01\x80\x01\x800\x0c0\x0c\x03\xc0\x07\xe0\x0f\xf0\xcf\xf3\xcf\xf3\x0f\xf0\x07\xe0\x03\xc00\x0c0\x0c\x01\x80\x01\x80',
  260:b'\xff\xfc\xff\xfc\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xc0\x0c\xff\xfc\xfc\xfc\xfc\xfc\xff\xfc',
  261:b'\xfc\x00\xfe\x00\xe7\x00\xc3\x80\xc3\xc0\xe7\xe0\x7f\xf0?\xf8\x1f\xfc\x0f\xfe\x07\xfe\x03\xfc\x01\xf8\x00\xf0\x00`\x00\x00',
  262:b'\x00\x00\x00\x00\xf1\xc0\xf8\xe0\xccp\xce8\x7f\x1c?\x8e\x1f\x8e\x0f\x1c\x06\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  263:b'\x07\xe0\x1f\xf8<<p\x0ec\xc6\xe7\xe7\xces\xcc3\xcc3\xces\xe7\xe7c\xc6p\x0e<<\x1f\xf8\x07\xe0',
  264:b'\xff\xe0\xff\xc6\xc0\x0e\xc0\x1c\xc08\xc6p\xc7\xe0\xc3\xc4\xc1\x8c\xc0\x0c\xc0\x0c\xc0\x0c\xff\xfc\xff\xfc\x00\x00\x00\x00',
  265:b'\xff\xff\xff\xff\xcf\xff\xc7\xff\xe3\xff\xe3\xff\xc7\x03\xcf\x03\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff',
  266:b'\xff\xff\xff\xff\xc3\xc3\x83\xc1\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x0f\xf0\x0f\xf0',
  267:b'\xcf\xf0\xcf\xf0\xcf\xf8\xcf\xf8\xcf\xf8\xcf\xfc\xcf\xfc\xcf\xfc\x07\x80\x03\x80\x01\x80\x01\xc0\x00\xc0\x00\xc0\x00\x00\x00\x00',
  268:b'\x00\xc0\x00\xc0\x01\xc0\x01\x80\x03\x80\x07\x80\xcf\xfc\xcf\xfc\xcf\xfc\xcf\xf8\xcf\xf8\xcf\xf8\xcf\xf0\xcf\xf0\x00\x00\x00\x00',
  269:b'\x0f\xc0\x0f\xc0\x0f\x80\x1f\x808\x10` \xe0@\xc1\xcc\xc3\x8c\xc3\x0c\xc0\x0c\xe0\x1c`\x188p\x1f\xe0\x0f\xc0',
  270:b'\x00\x08\x00\x0c\xff\xfe\xff\xfe\x00\x0c\x00\x08\x00\x00\x00\x00\x10\x000\x00\x7f\xff\x7f\xff0\x00\x10\x00\x00\x00\x00\x00',
  271:b'\x07\x80\x0f\xc0\x7f\xf8\xff\xfc\x00\x00\x00\x003030303030303030?\xf0?\xf0',
  272:b'<0<0<0<0<0<0<0<0<0>p\x1f\xe0\x07\xc0\x00\x00\x00\x00\xff\xfc\xff\xfc',
  273:b'\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00',
  274:b'\xf0\x0f\xf0\x0f\xf3\xcf\xf3\xcf\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xf3\xcf\xf3\xcf\xf0\x0f\xf0\x0f\x00\x00\x00\x00',
  275:b'\xff\xff\xff\xff\x00\x00\x00\x00\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\xf3\xcf\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\x00\x00\x00\x00',
  276:b'\x00\x00\x00\x00\xff\xf0\xff\xf0\xff\xf3\xff\xf7\xff\xff\xff\xff\xff\xf7\xff\xf3\xff\xf0\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00',
  277:b'\x03\x00\x03\x00\x070\x0f<\xff\x0e\xff\x06\xff#\xff3\xff3\xff#\xff\x06\xff\x0e\x0f<\x070\x03\x00\x03\x00',
  278:b'\x00\xc0\x00\xc0\x01\xc0\x03\xc0?\xc0?\xc0?\xc8?\xcc?\xcc?\xc8?\xc0?\xc0\x03\xc0\x01\xc0\x00\xc0\x00\xc0',
  279:b'\x000\x000\x00p\x00\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x00\xf0\x00p\x000\x000',
  280:b'\x03\x00\x07\x80\x07\x80\x0f\x80\x0f\xc0\x0f\xc0\x1c\xe0\x1c\xe0<\xf0<\xf0\x7f\xf0\x7f\xf8|\xf8\xfc\xfc\xff\xfc\xff\xfc',
  281:b'\x0f\xe0\x7f\xfc\xf0\x1e@\x00\x00\x00\x00\x00\x07\xc0\x1f\xf0\x08 \x00\x00\x00\x00\x00\x00\x03\x80\x03\x80\x03\x80\x03\x80',
  282:b'\x00`\x01\xe0\x01\xc0\x03\xc0\x03\xc0\x03\xc1\x03\xff\x03\xfe\x07\xfe\x0f\xf8\x1f\x00>\x00|\x00\x98\x00\x90\x00`\x00',
  283:b' \x08p\x1c\xf8>|~>\xfc\x1f\xf8\x0f\xf0\x07\xe0\x0f\xe0\x1f\xf0?\xf8~|\xfc>x\x1e0\x0c\x00\x00',
  284:b'\xc0\x0c`\x1800\x18`\x18`\x0c\xc0\xff\xfc\xff\xfc\x03\x00\x03\x00\xff\xfc\xff\xfc\x03\x00\x03\x00\x03\x00\x03\x00',
  285:b'\x0f\xc0\x1f\xe08p`\x18\xe3\x1c\xc3\x0c\xcf\xcc\xcf\xcc\xc3\x0c\xe3\x18`\x188|\x1f\xfe\x0f\xdf\x00\x0f\x00\x06',
  286:b'\x0f\xc0\x1f\xe08p`\x18\xe0\x1c\xc0\x0c\xcf\xcc\xcf\xcc\xc0\x0c\xe0\x18`\x188|\x1f\xfe\x0f\xdf\x00\x0f\x00\x06',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 16, 16
