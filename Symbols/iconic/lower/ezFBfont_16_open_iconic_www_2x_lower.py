'''
    ezFBfont_16_open_iconic_www_2x_lower : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_www_2x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: open_iconic_www_2x
# Cmd: ['bdf2dict.py'], ['Symbols-bdf-sources/open_iconic_www_2x.bdf', '_', './lower-char.set']
# Date: 2024-06-18 20:28:56
'''
    Original Copyright, Comments and Notices from source:

    COMMENT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"
'''
version = '0.33'
name = 'open_iconic_www_2x'
family = 'iconic'
weight = 'none'
size = None

def height():
    return 16

def baseline():
    return 16

def max_width():
    return 16

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 83

_g = {
  64:b'\x03\xc0\x07\xe0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x07\xe0\x03\xc0\x00\x00\x00\x00\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x02@\x00\x00',
  65:b'\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0ep\x0c0\x08\x10\x00\x00',
  66:b'\x00\x00\x00\x00\xfc\x00\xfc\x00\x0f\xff\x07\xfe\x07\xfe\x07\xfe\x07\xfc\x03\xfc\x00\x00\x00\x00\x03\x0c\x03\x0c\x00\x00\x00\x00',
  67:b'\x01\xe0\x07\xf8\x07\xf8\x0f\xfc?\xfc\x7f\xfc\xff>\xfe\x1f\xfc\x0f\xf8\x07\x00\xc0\x01\xe0\x03\xf0\x07\xf8\x00\xc0\x00\xc0',
  68:b'\xcf\xc0\xcf\xc0\xcf\xfe\xcf\xfe\xcf\xfc\xcf\xf8\xcf\xf0\xcf\xf8\xc0\xfc\xc0\xfe\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00',
  69:b'\x0c<\x0c~<\xe7<\xc3\x00\x03\x00\x07\x0c\x0e\x1c\x1c88p0\xe0\x00\xc0\x00\xc3<\xe7<~0<0',
  70:b'\x00\x00\x00\x06\x00\x1e\x00|\x01\xfc\x07\xf8\x1f\xf8\x7f\xf0?\xf0\x07\xe0\x03\xe0\x01\xc0\x01\xc0\x01\x80\x00\x80\x00\x00',
  71:b'\x03\xc0\x0f\xf0\x1c8\x18\x180\x0c0\x0c0\x0c0\x0c\x18\x18\x1c8\x0f\xf0\x0f\xf0\x07\xe0\x03\xc0\x01\x80\x00\x00',
  72:b'\xf0\x00\xfe\x00\xff\x80\xff\xc0\x1f\xe0\x03\xf0\xe1\xf8\xf8\xfc\xfe|\xff>?\x1e\x0f\x9e\xc7\x9f\xe7\xcf\xf3\xcf\xf3\xcf',
  73:b'\x00\xc0\x00\xc0\x01\xc0\x01\x80\x03\x80\x07\x80\xcf\xfc\xcf\xfc\xcf\xfc\xcf\xf8\xcf\xf8\xcf\xf8\xcf\xf0\xcf\xf0\x00\x00\x00\x00',
  74:b'\x07\xe0\x1f\xf8<<p\x1e`>\xe0w\xc0\xe3\xc1\xc3\xc3\x83\xc7\x03\xee\x07|\x06x\x0e<<\x1f\xf8\x07\xe0',
  75:b'\xff\xff\xff\xff\xcc\x03\xcc\x03\xff\xff\xff\xff\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xc0\x03\xff\xff\xff\xff',
  76:b'\x01\xe0\x07\xf8\x07\xf8\x0f\xfc?\xfc\x7f\xfc\xfe\x1e\xfc\x0f\xfc\xcf\xfc\xcf\x00\xc0\x00\xc0\x03\xf0\x01\xe0\x00\xc0\x00\x00',
  77:b'\xf0\x7f\xf0?\xc0\x1f\xc0\x1f\xc0?\xc0s\xc0\xe1\xc1\xc0\xc1\x80\xc0\x00\xc0\x00\xc0\x00\xc0\x03\xc0\x03\xff\xff\xff\xff',
  78:b'\x07\xe0\x1f\xf8<||~x6\xf07\xe0?\xe0?\xc0\x7f\xc0\x7f\xf0\x1fx\x06|\x0e<<\x1f\xf8\x07\xe0',
  79:b'\x00<\x00~\x00g\x00\x03\x00\x03\x07\xc7\x0f\xce\x1c\x1c88s\xf0\xe3\xe0\xc0\x00\xc0\x00\xe6\x00~\x00<\x00',
  80:b'\xff\xff\xff\xff\xc0\x03\xc0\x03\xc7\x83\xcf\xc3\xcc\xc3\xcc\xc3\xcf\xc3\xc7\x83\xc3?\xc0?\xc0\x03\xc0\x03\xff\xff\xff\xff',
  81:b'<\x00?\x00\x07\xc0\x00\xe08p>8\x07\x9c\x01\xcc0\xc6<f\x0eg\x063c3\xf33\xf0\x00`\x00',
  82:b'\xcf\xf0\xcf\xf0\xcf\xf8\xcf\xf8\xcf\xf8\xcf\xfc\xcf\xfc\xcf\xfc\x07\x80\x03\x80\x01\x80\x01\xc0\x00\xc0\x00\xc0\x00\x00\x00\x00',
  83:b'\x00\x08\x00\x0c\xff\xfe\xff\xfe\x00\x0c\x00\x08\x00\x00\x00\x00\x10\x000\x00\x7f\xff\x7f\xff0\x00\x10\x00\x00\x00\x00\x00',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 16, 16
