'''
    ezFBfont_32_open_iconic_app_4x_lower : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_app_4x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: open_iconic_app_4x
# Cmd: ['bdf2dict.py'], ['Symbols-bdf-sources/open_iconic_app_4x.bdf', '_', './lower-char.set']
# Date: 2024-06-18 20:28:25
'''
    Original Copyright, Comments and Notices from source:

    COMMENT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"
'''
version = '0.33'
name = 'open_iconic_app_4x'
family = 'iconic'
weight = 'none'
size = None

def height():
    return 32

def baseline():
    return 32

def max_width():
    return 32

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 72

_g = {
  64:b'\x00\x0f\xf0\x00\x00\x7f\xfe\x00\x00\x7f\xff\x00\x00?\xff\x00\x00\x0f\xff\x00\x0c\x07\xfe\x00\x1f\x01\xfe\x18\x1f\x80\xfe\x18?\xc0|<\x7f\xf0\x1c>\x7f\xf0\x0c>\x7f\xe0\x00~\xff\x80\x00\x7f\xff\x00\x00\x7f\xfc\x00\x00\xff\xf8\x00\x00\xff\xf0\x00\x00\xff\xc0\x00\x01\xff\x80\x80\x01\xff\x03\x80\x01\xff\x07\x80\x00\x00\x0f\xc0\x00\x00?\xc0\x00\x00?\xc0\x00\x00\x1f\xe1\xff\xf8\x1f\xe1\xff\xf8\x0f\xe0\xff\xf0\x07\xf0\xff\xe0\x03\xf0\xff\xc0\x01\xf0\x7f\x00\x00x~\x00\x00\x08p\x00',
  65:b'\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0',
  66:b'\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xf0\xf0\xff\xf0\xf0\xf0\xff\xf0\xf0\xf0\xff\xf0\xf0\xf0\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0',
  67:b'\x00\x00\xff\x00\x00\x01\xff\x80\x00\x01\xff\x80\x00\x03\xff\xc0\x00\x03\xff\xc0\x00\x07\xff\xe0\x00\x07\xff\xe0\x00\x0f\xff\xf0\x1f\xff\xff\xff?\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xf9\xff\x81\xff\xf0\xfe\x00\x7f\xf0\xfc\x00?\xf9\xf8\x00\x1f\xff\xf8<\x1f\xff\xf0~\x0f\xff\xf0\xff\x0f\xff\xf0\xff\x0f\xff\xf0\xff\x0f\xff\xf0\xff\x0f\xff\xf0~\x0f\xff\xf8<\x1f\xff\xf8\x00\x1f\xff\xfc\x00?\xff\xfe\x00\x7f\xff\xff\x81\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff',
  68:b'\xff\xff\xf0\x00\xff\xff\xf0\x00\xff\xff\xf0\x00\xff\xff\xf0\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x0f\xff\xff\xff\x0f\xff\xff\xff\x0f\xff\xff\xff\x0f\xff\xff\xff\x0f\xff\xff\xff\x0f\xff\xff\xff\x0f\xff\xff\xff\x0f\xff\xff\xe0\x0f\xff\xff\xc0\x0f\xff\xff\x80\x0f\xff\xff\x00\x0f\xff\xff\x00\x0f\xff\xff\x00\x0f\xff\xff\x00\x0f\xff\xff\x00\x0f\xff\xff\x00\x00\x00\x07\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  69:b'\x00\x0f\xf0\x00\x00\x7f\xfe\x00\x01\xff\xff\x80\x03\xff\xff\xc0\x07\xf8\x1f\xe0\x0f\xc0\x03\xf0\x1f\x80\x01\xf8?\x00\x00\xfc>\x03\xc0||\x03\xc0>x\x03\xc0\x1ex\x03\xc0\x1e\xf8\x03\xc0\x1f\xf0\x03\xc0\x0f\xf0\x03\xc0\x0f\xf0\x03\xc0\x0f\xf0\x03\xe0\x0f\xf0\x01\xf0\x0f\xf0\x00\xf0\x0f\xf8\x00`\x1fx\x00\x00\x1ex\x00\x00\x1e|\x00\x00>>\x00\x00|?\x00\x00\xfc\x1f\x80\x01\xf8\x0f\xc0\x03\xf0\x07\xf8\x1f\xe0\x03\xff\xff\xc0\x01\xff\xff\x80\x00\x7f\xfe\x00\x00\x0f\xf0\x00',
  70:b'\x00\x0f\xf0\x00\x00\x7f\xfe\x00\x01\xff\xff\x80\x03\xff\xff\xc0\x07\xf8\x1f\xe0\x0f\xc0\x03\xf0\x1f\x80\x01\xf8?\x00\x00\xfc>\x00\x01||\x00\x0e>x\x00~\x1ex\x03\xfe\x1e\xf8\x0f\xfc\x1f\xf0\x0f\xfc\x0f\xf0\x1e|\x0f\xf0\x1c8\x0f\xf0\x1c8\x0f\xf0>x\x0f\xf0?\xf0\x0f\xf8?\xf0\x1fx\x7f\xc0\x1ex~\x00\x1e|p\x00>>\x80\x00|?\x00\x00\xfc\x1f\x80\x01\xf8\x0f\xc0\x03\xf0\x07\xf8\x1f\xe0\x03\xff\xff\xc0\x01\xff\xff\x80\x00\x7f\xfe\x00\x00\x0f\xf0\x00',
  71:b'\x00\x01\x80\x00\x00\x07\xe0\x00\x00?\xfc\x00\x00\xff\xff\x00\x07\xff\xff\xe0\x1f\xf8\xff\xf8\x7f\xe0\xff\xfe\xff\x00\xff\xff\xfc\x00\xff\xff\xf0\x00\xff\xff\xf0\x00\xff\xff\xf0\x00\xff\xff\xf8\x00\xff\xffx\x00\xff\xfex\x00\xff\xfex\x00\xff\xfe|\x00\xff\xfe<\x00\xff\xfc>\x00\xff\xfc\x1e\x00\xff\xf8\x1f\x00\xff\xf8\x0f\x00\xff\xf0\x0f\x80\xff\xf0\x07\xc0\xff\xe0\x03\xe0\xff\xc0\x03\xf0\xff\xc0\x01\xf8\xff\x80\x00\xfe\xff\x00\x00\x7f\xfe\x00\x00?\xfc\x00\x00\x0f\xf0\x00\x00\x03\xc0\x00',
  72:b'\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00?\x80\x00\x00\xff\xe0\x00\x03\xff\xc0\x00\x07\xff\xc0\xc0\x0f\xe0\x01\x80\x1f\x80\x03\x00>\x00\x0e\x00<\x00\x1c\x00|\x008\x00x\x00p \xf8\x01\xf0\xe0\xf0\x03\xe0\xf0\xf0\x07\xc0\xf0\xf0\x0f\x80\xf0\xf0\x0f\x00\xf0\xf0\x06\x00\xf0\xf0\x00\x00\xf0\xf8\x00\x01\xf0x\x00\x01\xe0|\x00\x03\xe0<\x00\x03\xc0>\x00\x07\xc0\x1f\x80\x1f\x80\x0f\xe0\x7f\x00\x07\xff\xfe\x00\x03\xff\xfc\x00\x00\xff\xf0\x00\x00?\xc0\x00',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 32, 32
