'''
    ezFBfont_open_iconic_gui_2x_0x40_0x79_16 : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_gui_2x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: open_iconic_gui_2x
# Cmd: ['bdf2dict.py'], ['Symbols-bdf-sources/open_iconic_gui_2x.bdf', '_', './0x40_0x79-char.set']
# Date: 2024-07-31 15:36:27
'''
    Original Copyright, Comments and Notices from source:

    COMMENT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"
'''
version = '0.33'
name = 'open_iconic_gui_2x'
family = 'iconic'
weight = 'none'
size = None

def height():
    return 16

def baseline():
    return 16

def max_width():
    return 16

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 93

_g = {
  64:b'\x03\xff\x03\xff\x00\x03\x00\x03\x00\x83\x00\xc3\xff\xe3\xff\xe3\x00\xc3\x00\x83\x00\x03\x00\x03\x03\xff\x03\xff\x00\x00\x00\x00',
  65:b'\x03\xff\x03\xff\x00\x03\x00\x03\x10\x030\x03\x7f\xf3\x7f\xf30\x03\x10\x03\x00\x03\x00\x03\x03\xff\x03\xff\x00\x00\x00\x00',
  66:b'\x00\x00\x00\x00\x0f\xc0\x1f\xe0!\xf0\x00x\x00|\x00<\x00<\x00<\x00~\x00<\x00\x18\x00\x00\x00\x00\x00\x00',
  67:b'\x00\x00\x00\x00\x03\xf0\x07\xf8\x0f\x84\x1e\x00>\x00<\x00<\x00<\x00~\x00<\x00\x18\x00\x00\x00\x00\x00\x00\x00',
  68:b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x07\xe0\x03\xc0\x01\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff',
  69:b'\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0O\xc0\xcf\xc1\xcf\xc1\xcf\xc0\xcf\xc0O\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f',
  70:b'\xf0\x03\xf0\x03\xf0\x03\xf0\x03\xf0\x03\xf2\x03\xf3\x03\xf3\x83\xf3\x83\xf3\x03\xf2\x03\xf0\x03\xf0\x03\xf0\x03\xf0\x03\xf0\x03',
  71:b'\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x80\x03\xc0\x07\xe0\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff',
  72:b'0\x000\x02\xff\xfc\xff\xfc0\x1c0,0L0\x8c1\x0c2\x0c4\x0c8\x0c?\xff?\xff\x00\x0c\x00\x0c',
  73:b'\x07\xe0\x1f\xf8<<p\x0ea\x86\xe1\x87\xcc3\xce3\xc7\x83\xc3\xc3\xe3\xc7a\x86p\x0e<<\x1f\xf8\x07\xe0',
  74:b'\x00\x00\x01\x80\x03\xc0\x07\xe0\x0f\xf0\x1f\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xf8\x0f\xf0\x07\xe0\x03\xc0\x01\x80\x00\x00',
  75:b'\xff\xff\xff\xff\x00\x00\x00\x00\x07\xe0\x03\xc0\x01\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff',
  76:b'\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc8\x0f\xcc\x0f\xce\x0f\xce\x0f\xcc\x0f\xc8\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f',
  77:b'\xf0\x03\xf0\x03\xf0\x03\xf0\x03\xf0\x03\xf0\x13\xf03\xf0s\xf0s\xf03\xf0\x13\xf0\x03\xf0\x03\xf0\x03\xf0\x03\xf0\x03',
  78:b'\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x80\x03\xc0\x07\xe0\x00\x00\x00\x00\xff\xff\xff\xff',
  79:b'\xfe\x00\xfc\x00\xf8\x00\xf8\x00\xfc\x00\xce\x00\x86\x00\x00\x00\x00\x00\x00a\x00s\x00?\x00\x1f\x00\x1f\x00?\x00\x7f',
  80:b'\x00\x00a\x00s\x00?\x00\x1f\x00\x1f\x00?\x00\x7f\x00\x00\xfe\x00\xfc\x00\xf8\x00\xf8\x00\xfc\x00\xce\x00\x86\x00\x00',
  81:b'\xff\x00\xff\x00\xff\x00\xff\x00\xff0\xff0\xff0\xff0\x003\x003\x0f\xf3\x0f\xf3\x00\x03\x00\x03\x00\xff\x00\xff',
  82:b'\xcf\xff\xcf\xff\x00\x00\x00\x00\xcf\xff\xcf\xff\x00\x00\x00\x00\xcf\xff\xcf\xff\x00\x00\x00\x00\xcf\xff\xcf\xff\x00\x00\x00\x00',
  83:b'\xfc\xff\xfc\xff\xfc\x00\xfc\x00\xfc\xfc\xfc\xfc\x00\x00\x00\x00\xfc\xff\xfc\xff\xfc\x00\xfc\x00\xfc\xfc\xfc\xfc\x00\x00\x00\x00',
  84:b'\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff',
  85:b'\x00\x00\x03\x00\x07\x80\x03\x00\x03\x00#\x10\x7f\xf8\x7f\xf8#\x10\x03\x00\x03\x00\x07\x80\x03\x00\x00\x00\x00\x00\x00\x00',
  86:b'\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x00\x00\x00\x00\xff\xff\xff\xff\xc0\x03\xc0\x03\xcf\xf3\xcf\xf3\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0',
  87:b'\x00\x7f\x00?\x00\x1f\x00\x1f\x00?\x00s\x00\xe1\x01\xc0\x83\x80\x87\x00\xce\x00\xfc\x00\xf8\x00\xf8\x00\xfc\x00\xfe\x00',
  88:b'\x00\x00\x03\x00\x07\x80\x0f\xc0\x1f\xe0?\xf0\x03\x00\x03\x00\x03\x00\x03\x00?\xf0\x1f\xe0\x0f\xc0\x07\x80\x03\x00\x00\x00',
  89:b'\x00\x00\x00\x00\x04 \x0c0\x1c8<<\x7f\xfe\x7f\xfe<<\x1c8\x0c0\x04 \x00\x00\x00\x00\x00\x00\x00\x00',
  90:b'\x0c\xf0\x0c\xf0\x0c\x00\x0c\x00\x0c\xfc\x0c\xfc\x0c\x00\x0c\x00\x0c\xff\x0c\xff\x0c\x00\x0c\x00\x7f\x80?\x00\x1e\x00\x0c\x00',
  91:b'\x0c\xff\x0c\xff\x0c\x00\x0c\x00\x0c\xfc\x0c\xfc\x0c\x00\x0c\x00\x0c\xf0\x0c\xf0\x0c\x00\x0c\x00\x7f\x80?\x00\x1e\x00\x0c\x00',
  92:b'\x0f\xc0\x1f\xe08p`\x18\xe3\x1c\xc3\x0c\xcf\xcc\xcf\xcc\xc3\x0c\xe3\x18`\x188|\x1f\xfe\x0f\xdf\x00\x0f\x00\x06',
  93:b'\x0f\xc0\x1f\xe08p`\x18\xe0\x1c\xc0\x0c\xcf\xcc\xcf\xcc\xc0\x0c\xe0\x18`\x188|\x1f\xfe\x0f\xdf\x00\x0f\x00\x06',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 16, 16
