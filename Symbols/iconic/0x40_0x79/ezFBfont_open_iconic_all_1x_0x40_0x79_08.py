'''
    ezFBfont_open_iconic_all_1x_0x40_0x79_08 : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_all_1x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: open_iconic_all_1x
# Cmd: ['bdf2dict.py'], ['Symbols-bdf-sources/open_iconic_all_1x.bdf', '_', './0x40_0x79-char.set']
# Date: 2024-07-31 15:36:12
'''
    Original Copyright, Comments and Notices from source:

    COMMENT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"
'''
version = '0.33'
name = 'open_iconic_all_1x'
family = 'iconic'
weight = 'none'
size = None

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 127

_g = {
  64:b'\x1f\x01\t\xfd\t\x01\x1f\x00',
  65:b'\x1f\x01A\xfdA\x01\x1f\x00',
  66:b'\x008\x0c\x06\x06\x06\x00\x00',
  67:b'\x00\x1c0```\x00\x00',
  68:b'\xff\x00~\x00\xff\x00~\x00',
  69:b'\xff\x00\xfc\x00\xff\x00\xfc\x00',
  70:b'\xff\x00?\x00\xff\x00?\x00',
  71:b'\x1c\\\xe3\xc3\x03@n,',
  72:b'\x10\x10\x10\x10\x10|8\x10',
  73:b'<f\xe7\xe7\x81\xc3f<',
  74:b'<n\xcf\x81\x81\xcfn<',
  75:b'<v\xf3\x81\x81\xf3v<',
  76:b'<f\xc3\x81\xe7\xe7f<',
  77:b'\x00 `\xff` \x00\x00',
  78:b'\x00\x04\x06\xff\x06\x04\x00\x00',
  79:b'\x18\x18\x18\x18\x18<\x18\x08',
  80:b'\x00\x00 \x7f\xff \x00\x00',
  81:b'\x00\x00\x06\xff\xfe\x04\x00\x00',
  82:b'\x108<\x18\x18\x18\x18\x18',
  83:b'\x108|\x10\x10\x10\x10\x10',
  84:b'\x00B\x81\xa5\xa5\xc3\x00\x00',
  85:b'\x08(*\xaa\xaa*(\x08',
  86:b'\x18<<\x18\x00\x18\x18\x00',
  87:b'<F\x87\x89\x91\xe1b<',
  88:b'\x86\x86\xb6\xb6\xb6\x80\xff\x00',
  89:b'\x18\x18$\xff~ZZ~',
  90:b'\x00\xfe\x82\x83\x83\x82\xfe\x00',
  91:b'\x00\xfe\xfe\xff\xff\xfe\xfe\x00',
  92:b'~$$fB\xff\xff\xff',
  93:b'\x18<<<~\xff\x00\x18',
  94:b'\x10\x18d88d\x18\x10',
  95:b'\xfcff~ccc\xfe',
  96:b'\x00\x10\x10<x\x10\x10\x00',
  97:b'\xf2\xf2\xf2\xfe\xfe\xfe\x80\xfe',
  98:b'<<<<<<$\x00',
  99:b'\xff\x00\xe7\xff\xff\xff\xff\xff',
  100:b'<$\xff\xff\xff\x00\xff\xff',
  101:b'\x18$  x @~',
  102:b'\xff\xa1\xff\x81\x81\x81\x81\xff',
  103:b'\x01\x06\x0e\x0c0pp\xe0',
  104:b'\x108\xfe|\xeel\xee\x00',
  105:b'\x02\x1a\xfa\xfaz" \x00',
  106:b'\xfe\x82\x82\xfe\xaa\xfa\xaa\xfe',
  107:b'\xfe\xfe\x00\xfe\xaa\xfe\xae\xfe',
  108:b'\x0c\x1e\xff\xb3\xed\xed\xf3\xff',
  109:b'\x00\x00~<\x18\x00\x00\x00',
  110:b'\x00\x04\x0c\x1c\x1c\x0c\x04\x00',
  111:b'\x00 0880 \x00',
  112:b'\x00\x00\x00\x18<~\x00\x00',
  113:b'\x00\xe0?\x1e\x1e\x00\x12\x00',
  114:b'\xf8\xc0\xdf\xdf\x1f\x1f\x00\x00',
  115:b'\x00\x02\x07N\xfcx0\x00',
  116:b'\x00B\xe7~<\x18\x00\x00',
  117:b'\x00\x0c\x1800\x18\x0c\x00',
  118:b' p8\x1c\x1c8p ',
  119:b'\x00\x00\x18<fB\x00\x00',
  120:b'<~\xfb\xf3\xc7\xff~<',
  121:b'<~\xdb\xe7\xe7\xdb~<',
  122:b'\x10\xba\x82\xfe\xfe\xfe\xfe\xfe',
  123:b'<B\x81\x81\x89\x81B<',
  124:b'\x00\x1c>~\xff\xff\x7f\x00',
  125:b'\x1c>~\xe3\xeb\x08\x1c\x08',
  126:b'\x1c>~\xf7\xe3\x08\x1c\x08',
  127:b'p\xe0\xdc>~\xff\xff\x7f',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 8, 8
