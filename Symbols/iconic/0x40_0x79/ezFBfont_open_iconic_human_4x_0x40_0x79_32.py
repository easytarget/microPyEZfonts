'''
    ezFBfont_open_iconic_human_4x_0x40_0x79_32 : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_human_4x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: open_iconic_human_4x
# Cmd: ['bdf2dict.py'], ['Symbols-bdf-sources/open_iconic_human_4x.bdf', '_', './0x40_0x79-char.set']
# Date: 2024-07-31 15:36:30
'''
    Original Copyright, Comments and Notices from source:

    COMMENT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"
'''
version = '0.33'
name = 'open_iconic_human_4x'
family = 'iconic'
weight = 'none'
size = None

def height():
    return 32

def baseline():
    return 32

def max_width():
    return 32

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 68

_g = {
  64:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xe0\x00\x00?\xfc\x00\x00\xff\xff\x00\x01\xff\xff\x80\x03\xf8\x1f\xc0\x07\xe0\x07\xe0\x0f\xc0\x03\xf0\x1f\x80\x01\xf8?\x83\x81\xfc?\x07\x00\xfc\x7f\x0f\x00\xfe\xff\x0f\x90\xff\xff\x0f\xf0\xff\x7f\x0f\xf0\xfe?\x07\xe0\xfc?\x83\xc1\xfc\x1f\x80\x01\xf8\x0f\xc0\x03\xf0\x07\xe0\x07\xe0\x03\xf8\x1f\xc0\x01\xff\xff\x80\x00\xff\xff\x00\x00?\xfc\x00\x00\x07\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
  65:b'\x00\x0e\x00\xf0\x00\x0f\x03\xfc\x00\x0f\x87\xfe\x00\x07\xcf\xff\x00\x03\xff\xff\x00\x01\xff\xff\x00\x03\xff\xff\x00\x07\xff\xff\x00\x0f\xff\xff\x00\x1f\x9f\xfe\x00?\x0f\xfc\x00~\x07\xf8\x00|\x03\xf0\x00\xf8\x01\xf0\x01\xf0\x01\xf8\x03\xe0\x03\xfc\x07\xc0\x07\xfe\x0f\x80\x0f\x9f\x1f\x00\x1f\x0f>\x00>\x06|\x00|\x00\xfc\x00\xf8\x00\xfc\x01\xf0\x00\xfe\x03\xe0\x00\xff\x07\xc0\x00\xff\x8f\x80\x00\xff\xff\x00\x00\xff\xfe\x00\x00\xff\xfc\x00\x00\xff\xf8\x00\x00\xff\xf0\x00\x00\xff\xe0\x00\x00',
  66:b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xe0\x07\xe0\x1f\xf8\x1f\xf8?\xfc?\xfc\x7f\xfe\x7f\xfe\x7f\xfe\x7f\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xfe\x7f\xff\xff\xfe?\xff\xff\xfc\x1f\xff\xff\xf8\x0f\xff\xff\xf0\x07\xff\xff\xe0\x03\xff\xff\xc0\x01\xff\xff\x80\x00\xff\xff\x00\x00\x7f\xfe\x00\x00?\xfc\x00\x00\x1f\xf8\x00\x00\x0f\xf0\x00\x00\x07\xe0\x00\x00\x03\xc0\x00\x00\x01\x80\x00\x00\x00\x00\x00',
  67:b'\x00\x00\x0f\x00\x00\x00\x1f\x80\x00\x00?\xc0\x00\x00\x7f\xe0\x00\xf0?\xe0\x01\xf8?\xf0\x03\xfc\x1f\xf0\x07\xfe\x1f\xf0\x07\xfe\x0f\xf0\x0f\xff\x0f\xf0\x0f\xff\x0f\xf0\x0f\xff\x0f\xe0\x0f\xff\x0f\xe0\x0f\xff\x0f\xc0\x0f\xff\x0f\x80\x07\xfe\x0f\x00\x07\xfe\x00\x00\x03\xfc\x00\x0c\x01\xf8\x00\x1e\x00\xf0\x00\x7f\x00\x00\x01\xff0\x00\xc1\xffx\x01\xe0\xff\xfe\x07\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\x00\xff\xff\xf0\x00\xff\xff\xf0\x00\xff\xff\xf0\x00',
  68:b'\x00\x03\xc0\x00\x00\x0f\xf0\x00\x00\x1f\xf8\x00\x00?\xfc\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00?\xfc\x00\x00\x1f\xf8\x00\x00\x0f\xf0\x00\x00\x03\xc0\x00\x07\x00\x00\xe0\x1f\x80\x01\xf8?\xe0\x07\xfc\x7f\xf8\x1f\xfe\x7f\xff\xff\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 32, 32
