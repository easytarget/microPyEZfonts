'''
    ezFBfont_08_open_iconic_all_1x_mid : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_all_1x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: open_iconic_all_1x
# Cmd: ['bdf2dict.py'], ['Symbols-bdf-sources/open_iconic_all_1x.bdf', '_', './mid-char.set']
# Date: 2024-06-18 20:28:21
'''
    Original Copyright, Comments and Notices from source:

    COMMENT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"
'''
version = '0.33'
name = 'open_iconic_all_1x'
family = 'iconic'
weight = 'none'
size = None

def height():
    return 8

def baseline():
    return 8

def max_width():
    return 8

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 128

def max_ch():
    return 191

_g = {
  128:b'\x00\x04J\x89\x91R \x00',
  129:b'\x18~~\xe7\xe7~~\x18',
  130:b'\xff\xff\x00\x18\x00\x00\x00\xff',
  131:b'\x83\x83\x83\x8b\x8b\x83\x83\x83',
  132:b'\xc1\xc1\xc1\xd1\xd1\xc1\xc1\xc1',
  133:b'\xff\x00\x00\x00\x18\x00\xff\xff',
  134:b'\xee\xaa\xfe(\xfe\xaa\xee\x00',
  135:b'\xff\xff\xff\xff\xff\xff\x01\x00',
  136:b'<B\x85\x99\x99\xa1B<',
  137:b'<r\xf1\xf1\xf1\xf1r<',
  138:b'\xff\x00\xf8\x00\x00\xff\x00\xfd',
  139:b'\x00\xff\x00\xff\xff\xaf\xff\x00',
  140:b'A\xfeFJRb\x7f\x02',
  141:b'<B\x81\xa5\x99\x99B<',
  142:b'\x18\x18\x18<\x18\x00\x00\xff',
  143:b'\xff\x00\x00\x18<\x18\x18\x18',
  144:b'\x00?m\xf3\xf3m?\x00',
  145:b'\x00<B\x99\xbd<\x18\x00',
  146:b'\xe0\xe8\xac\xe0\xbe\xfe\x86\xfe',
  147:b'\x10|Dp\x1cD|\x10',
  148:b'\x00\xe7\xe7\xe7\xc6\x84\x00\x00',
  149:b'\x00\x00!c\xe7\xe7\xe7\x00',
  150:b'\x00c\xc6\x84\xe7\xe7\xe7\x00',
  151:b'\x00\xe7\xe7\xe7!c\xc6\x00',
  152:b'\x00\x18<~~^n<',
  153:b'\x00\x18<~\xff\x00\xff\xff',
  154:b'\x00\x18<\x00\x00<\x18\x00',
  155:b'\x00\x00\x00\xdb\xdb\x00\x00\x00',
  156:b'\x00\xff~\x99\xe7\xff\xff\x00',
  157:b'\x18f\x81\xbd\x99\xe7\xff\xff',
  158:b'\x1e @\xf8@\xf8 \x1e',
  159:b'\xfe\x00\xf8\x00\xff\x00\xa8\x00',
  160:b'\xff\x00\x18\x00\x00\x00\xff\xff',
  161:b'\x83\x83\x83\xa3\xa3\x83\x83\x83',
  162:b'\xc1\xc1\xc1\xc5\xc5\xc1\xc1\xc1',
  163:b'\xff\xff\x00\x00\x00\x18\x00\xff',
  164:b'\xc7\x87\x87\x88\x80\x80\x81\xff',
  165:b'\x00<f\xd3\xdbf<\x00',
  166:b'\x17\x0f\x17"E\xc8\xf0\xe0',
  167:b'\xe0\xe8\xec\xe0\xfe\xfe\xfe\xfe',
  168:b' 0pt\xe6\xee\xce^',
  169:b'\xb8\xbe\xbc\xbc\x8e\x80\x80\x80',
  170:b'\x18\x10<\x08\x0880\x00',
  171:b'\xe0\xff\x00\xff\xff\xff\xff\xff',
  172:b'\xee\xee\xeeD|\xe0\xe0\xe0',
  173:b'\xe0\xe0\xe0\x00\x00\x07\x07\x07',
  174:b'\x00ppp\x0e\x0e\x0e\x00',
  175:b'<f\xc7\x87\x8f\xc3b<',
  176:b'\x00\x02\x048@\x80\x00\xff',
  177:b'\xaa\x00\xaa\x00\xaa\x00\xaa\x00',
  178:b'\xdb\xdb\x00\xdb\xdb\x00\xdb\xdb',
  179:b'\xe7\xe7\xe7\x00\x00\xe7\xe7\xe7',
  180:b'\xfe\xfe\xfe\xfe\x00\xfe\xfa\xfe',
  181:b'\xeeDD|DD\xee\x00',
  182:b'<fBB\xc3\xc3\xc3\x00',
  183:b'\x00f\xff\xff~<\x18\x00',
  184:b'\x18<~~~ff\x00',
  185:b'\xff\x81\x81\x81\xe3\xf1\xf9\xff',
  186:b'\xff\xff\x81\x81\x81\xc3\xff\xff',
  187:b'\x00\x00f\x99\x99f\x00\x00',
  188:b'\x0c\x0c\x008\x08\x10\x10\x1c',
  189:b'>\x1c\x18\x1800p\xf8',
  190:b'\xff\x00\xff\x00\xff\x00~\x00',
  191:b'\xff\x00\xff\x00\xff\x00\xfc\x00',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 8, 8
