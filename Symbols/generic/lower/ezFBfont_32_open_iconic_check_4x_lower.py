'''
    ezFBfont_32_open_iconic_check_4x_lower : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_check_4x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: open_iconic_check_4x
# Cmd: [bdf2dict.py], ['Symbols-bdf-sources/open_iconic_check_4x.bdf', '_', './lower-char.set']
# Date: 2024-06-13 11:38:26

version = '0.33'
name = '"open_iconic_check_4x"'
family = 'None'
weight = 'None'
size = None

def height():
    return 32

def baseline():
    return 32

def max_width():
    return 32

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 68

_g = {
 64:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\xe0\x00\x00\x01\xf0\x00\x00\x03\xf8\x00\x00\x07\xfc\x00\x00\x0f\xfe\x00\x00\x1f\xfe\x00\x00?\xfc\x04\x00\x7f\xf8\x0e\x00\xff\xf0\x1f\x01\xff\xe0?\x83\xff\xc0\x7f\xc7\xff\x80\xff\xef\xff\x00\x7f\xff\xfe\x00?\xff\xfc\x00\x1f\xff\xf8\x00\x0f\xff\xf0\x00\x07\xff\xe0\x00\x03\xff\xc0\x00\x01\xff\x80\x00\x00\xff\x00\x00\x00~\x00\x00\x00<\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 65:[b'\x00\x0f\xf0\x00\x00\x7f\xfe\x00\x01\xff\xff\x80\x03\xff\xff\xc0\x07\xff\xff\xe0\x0f\xff\xff\xf0\x1f\xff\xff\xf8?\xff\xff\xfc?\xff\xfe|\x7f\xff\xfc>\x7f\xff\xf8>\x7f\xff\xf0~\xff\xff\xe0\xff\xff\xff\xc1\xff\xff\x9f\x83\xff\xff\x0f\x07\xff\xff\x06\x0f\xff\xff\x80\x1f\xff\xff\xc0?\xff\xff\xe0\x7f\xff\x7f\xf0\xff\xfe\x7f\xf9\xff\xfe\x7f\xff\xff\xfe?\xff\xff\xfc?\xff\xff\xfc\x1f\xff\xff\xf8\x0f\xff\xff\xf0\x07\xff\xff\xe0\x03\xff\xff\xc0\x01\xff\xff\x80\x00\x7f\xfe\x00\x00\x0f\xf0\x00'],
 66:[b'\x00\x0f\xf0\x00\x00\x7f\xfe\x00\x01\xff\xff\x80\x03\xff\xff\xc0\x07\xff\xff\xe0\x0f\xff\xff\xf0\x1f\xff\xff\xf8?\xff\xff\xfc?\x9f\xf9\xfc\x7f\x0f\xf0\xfe\x7f\x07\xe0\xfe\x7f\x83\xc1\xfe\xff\xc1\x83\xff\xff\xe0\x07\xff\xff\xf0\x0f\xff\xff\xf8\x1f\xff\xff\xf8\x1f\xff\xff\xf0\x0f\xff\xff\xe0\x07\xff\xff\xc1\x83\xff\x7f\x83\xc1\xfe\x7f\x07\xe0\xfe\x7f\x0f\xf0\xfe?\x9f\xf9\xfc?\xff\xff\xfc\x1f\xff\xff\xf8\x0f\xff\xff\xf0\x07\xff\xff\xe0\x03\xff\xff\xc0\x01\xff\xff\x80\x00\x7f\xfe\x00\x00\x0f\xf0\x00'],
 67:[b'\xff\xff\xfc\x00\xff\xff\xf8\x18\xff\xff\xf0<\xff\xff\xe0~\xf0\x00\x00\xfe\xf0\x00\x01\xfc\xf0\x00\x03\xf8\xf0\x00\x07\xf0\xf0\x00\x0f\xe0\xf0\x18\x1f\xc0\xf0<?\x80\xf0~\x7f\x00\xf0\x7f\xfe\x00\xf0?\xfc\x00\xf0\x1f\xf8\x10\xf0\x0f\xf00\xf0\x07\xe0p\xf0\x03\xc0\xf0\xf0\x01\x80\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 68:[b'\x04\x00\x00@\x0e\x00\x00\xe0\x1f\x00\x01\xf0?\x80\x03\xf8\x7f\xc0\x07\xfc\xff\xe0\x0f\xfe\x7f\xf0\x1f\xfe?\xf8?\xfc\x1f\xfc\x7f\xf8\x0f\xfe\xff\xf0\x07\xff\xff\xe0\x03\xff\xff\xc0\x01\xff\xff\x80\x00\xff\xff\x00\x00\x7f\xfe\x00\x00?\xfc\x00\x00\x7f\xfc\x00\x00\xff\xfe\x00\x01\xff\xff\x00\x03\xff\xff\x80\x07\xff\xff\xc0\x0f\xff\xff\xe0\x1f\xfe\x7f\xf0?\xfc?\xf8\x7f\xf8\x1f\xfc\xff\xf0\x0f\xfe\x7f\xe0\x07\xfe?\xc0\x03\xfc\x1f\x80\x01\xf8\x0f\x00\x00\xf0\x06\x00\x00`\x00\x00\x00\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 32, 32

