'''
    ezFBfont_32_open_iconic_mime_4x_lower : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_mime_4x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: open_iconic_mime_4x
# Cmd: [bdf2dict.py], ['Symbols-bdf-sources/open_iconic_mime_4x.bdf', '_', './lower-char.set']
# Date: 2024-06-13 11:38:43

version = '0.33'
name = '"open_iconic_mime_4x"'
family = 'None'
weight = 'None'
size = None

def height():
    return 32

def baseline():
    return 32

def max_width():
    return 32

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 77

_g = {
 64:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x10\x1c\x00\x008\x1e\x00\x00x>\x00\x00||\x00\x00>x\x00\x00\x1ex \x04\x1e\xf8p\x0e\x1f\xf0x\x1e\x0f\xf0\xf0\x0f\x0f\xf0\xf0\x0f\x0f\xf0\xf0\x0f\x0f\xf0\xf0\x0f\x0f\xf0\xf8\x1f\x0f\xf0x\x1e\x0fxp\x0e\x1ex \x04\x1e|\x00\x00><\x00\x00<>\x00\x00|\x1e\x00\x00x\x0c\x00\x000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 65:[b'?\xff\x00\xe0\x7f\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x18\xf0\xff\xff<\xf0\xff\xff~\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xf8\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf8\x00\x00\x00\x7f\xff\xff\xf0\x7f\xff\xff\xf0?\xff\xff\xf0\x0f\xff\xff\xf0'],
 66:[b'\xff\xf0\x00\x00\xff\xf0\x80\x00\xff\xf0\xc0\x00\xff\xf0\xe0\x00\xff\xf0\xf0\x00\xff\xf0\xf8\x00\xff\xf0\xfc\x00\xff\xf0\xfe\x00\xf0\xf0\xff\x00\xf0\xf0\xff\x80\xf0\xf0\xff\xc0\xf0\xf0\xff\xe0\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0'],
 67:[b'\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xfe'],
 68:[b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf1\x80\x01\x8f\xf3\xc0\x03\xcf\xf7\xe0\x07\xef\xff\xf0\x07\xff\xff\xf8\x03\xff\xff\xfc\x01\xff\xff\xfe\x00\xff\xff\xff\x00\x7f\xff\xff\x80?\xff\xff\xc0\x1f\xff\xff\xe0\x0f\xff\xff\xf0\x0f\xff\xff\xf8\x0f\xff\xff\xfc\x0f\xff\xff\xfe\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'],
 69:[b'\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\xff\x00\x0f\xf0\xff\x00\x0f\xf0\xff\x00\x0f\xf0\xff\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\xff\x0f\xf0\x00\xff\x0f\xf0\x00\xff\x0f\xf0\x00\xff\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\xf0\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 70:[b'\x7f\xff\xff\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xf0\xf0\x00\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 71:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x0f\xff\xff\xff\x1f\xff\xff\xff?\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff?\xff\xff\xff\x1f\xff\xff\xff\x0f\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\x7f\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 72:[b'\x00\x06\x00\x00\x00\x0f\x00\x00\x00\x0f\x00\x00\x00\x0f\x00\x00\xf0\xff\xf0\xf0\xf0\xff\xf0\xf0\xf0\xff\xf0\xf0\xf0\xff\xf0\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0'],
 73:[b'\xff\xf0\x00\x00\xff\xf0\x80\x00\xff\xf0\xc0\x00\xff\xf0\xe0\x00\xff\xf0\xf0\x00\xff\xf0\xf8\x00\xff\xf0\xfc\x00\xff\xf0\xfe\x00\xff\xf0\xff\x00\xff\xf0\xff\x80\xff\xf0\xff\xc0\xff\xf0\xff\xe0\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0'],
 74:[b'\x00\x00\x00\x08\x00\x00\x00\x1c\x00\x00\x00>\x00\x00\x00\x7f\x00\x00\x00\xfe\x00\x00\x01\xfc\x00\x00\x03\xf8\x00\x00\x07\xf0\x00\x00\x0f\xe0\x00\x18\x1f\xc0\x00<?\x80\x00~\x7f\x00\x00\xff\xfe\x00\x01\xff\xfc\x00\x03\xff\xf8\x00\x07\xff\xf0\x00\x0f\xe7\xe0\x00\x1f\xc3\xc0\x00?\xc1\x80\x00\x7f\x80\x00\x00\xff\x00\x00\x00~\x00\x00\x00<\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'],
 75:[b'\x00?\x00\x00\x00\xff\x00\x00\x03\xff\x00\x00\x07\xff\x00\x00\x07\xff\x08\x00\x03\xff\x0f\x00\x01\xff\x0f\xc0\x00\xff\x0f\xe0\x00\x7f\x0f\xf0\x00?\x0f\xf8\x18\x1f\x0f\xfc<\x0f\x0f\xfc~\x07\x0f\xfe\x7f\x03\x0f\xfe\x7f\x81\x0f\xff\xff\xc0\x0f\xff\xff\xe0\x0f\xff\xff\xf0\x0f\xff\xff\xf8\x1f\xff\xff\xf0?\xff\xff\xe0\x7f\xff\x7f\xc0\xff\xff\x7f\x81\xff\xfe\x7f\x03\xff\xfe>\x07\xff\xfc\x1c\x0f\xff\xfc\x08\x1f\xff\xf8\x00?\xff\xf0\x00\x7f\xff\xe0\x00?\xff\xc0\x00\x0f\xff\x00\x00\x03\xfc\x00'],
 76:[b'\x00?\xff\xfc\x00\x7f\xff\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xf9\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\xff\xff\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xff\xff\xf0\x00\xff\xff\xf0\x00\xff\xff\xf0\x00\xff\xff\xf0\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xf0\xff\xff\xf0\xf9\xff\xff\xf0\xff\xff\xff\xf0\xff\xff\xff\xf0\x7f\xff\xff\xe0?\xff\xff\xc0'],
 77:[b'\x00?\xc0\x00\x00\x7f\xe0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00?\xff\xff\xc0\x7f\xff\xff\xe0\xff\xff\xff\xf0\xff\xff\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x9f\x9f\x00\x0f\xff\xff\x00\x0f\xff\xff\x00\x0f\xff\xff\x00\x0f\xff\xff\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 32, 32

