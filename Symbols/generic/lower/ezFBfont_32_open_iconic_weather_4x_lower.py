'''
    ezFBfont_32_open_iconic_weather_4x_lower : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_weather_4x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: open_iconic_weather_4x
# Cmd: [bdf2dict.py], ['Symbols-bdf-sources/open_iconic_weather_4x.bdf', './lower-char.set', 'True']
# Date: 2024-06-11 17:21:43

version = '0.33'
name = '"open_iconic_weather_4x"'
family = 'None'
weight = 'None'
size = None

def height():
    return 32

def baseline():
    return 32

def max_width():
    return 32

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 69

_g = {
 64:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xf8\x00\x00\x07\xfe\x00\x00\x1f\xff\x80\x00?\xff\xc0\x00\x7f\xff\xc0\x00\x7f\xff\xe0\x00\xff\xff\xe0\x00\xff\xff\xf0\x07\xff\xff\xf0\x1f\xff\xff\xf0?\xff\xff\xf0\x7f\xff\xff\xf0\x7f\xff\xff\xf8\xff\xff\xff\xfc\xff\xff\xff\xfe\xff\xff\xff\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\x7f\xff\xff\xfe?\xff\xff\xfe\x1f\xff\xff\xfc\x07\xff\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 65:[b'\x01\xf8\x00\x00\x07\xfe\x00\x00\x1f\xff\x80\x00?\xff\xc0\x00?\xfc\x00\x00\x7f\xf0\x00\x00\x7f\xc0\x00\x00\xff\x80\x00\x00\xff\x01\xf8\x00\xfe\x07\xfe\x00\xfc\x1f\xff\x80\xf8?\xff\xc0\xf8\x7f\xff\xc0@\x7f\xff\xe0\x00\xff\xff\xe0\x00\xff\xff\xf0\x07\xff\xff\xf0\x1f\xff\xff\xf0?\xff\xff\xf0\x7f\xff\xff\xf0\x7f\xff\xff\xf8\xff\xff\xff\xfc\xff\xff\xff\xfe\xff\xff\xff\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\x7f\xff\xff\xfe?\xff\xff\xfe\x1f\xff\xff\xfc\x07\xff\xff\xf0'],
 66:[b'\x00 \x00\x00\x00\xc0\x00\x00\x03\xc0\x00\x00\x07\xc0\x00\x00\x0f\xc0\x00\x00\x1f\xc0\x00\x00\x1f\xc0\x00\x00?\xc0\x00\x00\x7f\xc0\x00\x00\x7f\xe0\x00\x00\x7f\xe0\x00\x00\xff\xe0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xf8\x00\x00\xff\xfc\x00\x00\xff\xfe\x00\x00\xff\xff\x00\x00\xff\xff\x80\x00\x7f\xff\xe0\x00\x7f\xff\xfc\x02\x7f\xff\xff\xfe?\xff\xff\xfc?\xff\xff\xfc\x1f\xff\xff\xf8\x0f\xff\xff\xf0\x07\xff\xff\xe0\x03\xff\xff\xc0\x01\xff\xff\x80\x00\x7f\xfe\x00\x00\x0f\xf0\x00\x00\x00\x00\x00'],
 67:[b'\x00\x01\xf8\x00\x00\x07\xfe\x00\x00\x1f\xff\x80\x00?\xff\xc0\x00\x7f\xff\xc0\x00\x7f\xff\xe0\x00\xff\xff\xe0\x00\xff\xff\xf0\x07\xff\xff\xf0\x1f\xff\xff\xf0?\xff\xff\xf0\x7f\xff\xff\xf0\x7f\xff\xff\xf8\xff\xff\xff\xfc\xff\xff\xff\xfe\xff\xff\xff\xff\xff\xf0\xff\xff\xff\xc0?\xff\xff\x80\x1f\xff\x7f\x80\x1f\xff`\x06\x00\xfe\x00\x0f\x00>\x00\x0f\x00\x1c\x00\x0f\x00\x00\x06\x0f\x06\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x0f\x0f\x0f\x00\x06\x06\x06\x00'],
 68:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x80\x00\x00\x01\x80\x00\x00\x01\x80\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x07\xe0\x00\x00\x07\xe0\x00\x00\x07\xe0\x00\x00\x0f\xf0\x00\x7f\xff\xff\xfe?\xff\xff\xfc\x1f\xff\xff\xf8\x0f\xff\xff\xf0\x03\xff\xff\xc0\x01\xff\xff\x80\x00\xff\xff\x00\x00\x7f\xfe\x00\x00?\xfc\x00\x00?\xfc\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00~~\x00\x00\xfc?\x00\x00\xf8\x1f\x00\x00\xf0\x0f\x00\x01\xc0\x03\x80\x01\x80\x01\x80\x01\x00\x00\x80\x00\x00\x00\x00'],
 69:[b'\x00\x01\x80\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x01\x80\x00\x06\x00\x00`\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x06\x00\x00`\x00\x07\xe0\x00\x00\x1f\xf8\x00\x00?\xfc\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00\xff\xff\x00`\xff\xff\x06\xf0\xff\xff\x0f\xf0\xff\xff\x0f`\xff\xff\x06\x00\xff\xff\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00?\xfc\x00\x00\x1f\xf8\x00\x00\x07\xe0\x00\x06\x00\x00`\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x06\x00\x00`\x00\x01\x80\x00\x00\x03\xc0\x00\x00\x03\xc0\x00\x00\x01\x80\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 32, 32

