'''
    ezFBfont_32_open_iconic_other_4x_lower : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original open_iconic_other_4x.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "https://github.com/iconic/open-iconic, SIL OPEN FONT LICENSE"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: open_iconic_other_4x
# Cmd: [bdf2dict.py], ['Symbols-bdf-sources/open_iconic_other_4x.bdf', './lower-char.set', 'True']
# Date: 2024-06-11 17:21:29

version = '0.33'
name = '"open_iconic_other_4x"'
family = 'None'
weight = 'None'
size = None

def height():
    return 32

def baseline():
    return 32

def max_width():
    return 32

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 64

def max_ch():
    return 71

_g = {
 64:[b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x07\x00\x00\x00\x07\x00\x00\x00\x0f\x00\x00\x00\x0f\x00\x00\x00\x1f\x00\x00\x00?\x00\x00\x00?\x00\x00\x00\x7f\x00\x00\x00\x7f\xff\x00\x00\xff\xfe\x00\x01\xff\xfc\x00\x01\xff\xfc\x00\x03\xff\xf8\x00\x03\xff\xf8\x00\x07\xff\xf0\x00\x0f\xff\xe0\x00\x00\x0f\xe0\x00\x00\x0f\xc0\x00\x00\x0f\xc0\x00\x00\x0f\x80\x00\x00\x0f\x00\x00\x00\x0f\x00\x00\x00\x0e\x00\x00\x00\x0e\x00\x00\x00\x0c\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00'],
 65:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xf0\x00\x00\x7f\xfe\x00\x01\xff\xff\x80\x03\xff\xff\xc0\x07\xf8\x1f\xe0\x0f\xc0\x03\xf0\x1f\x80\x01\xf8?\x00\x00\xfc>\x00\x00||\x1c8>x>|\x1ex\x7f\xfe\x1e\xf8\x7f\xfe\x1f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x7f\xfe\x00\x00\x7f\xfe\x00\x00?\xfc\x00\x00\x1f\xf8\x00\x00\x07\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 66:[b'\x0f\x00\x0f\x00?\xc0?\xc0\x7f\xe0\x7f\xe0\x7f\xe0\x7f\xe0\xff\xf0\xff\xf0\xff\xf0\xff\xf0\xff\xf0\xff\xf0\xff\xf0\xff\xf0\x7f\xe0\x7f\xe0\x7f\xe0\x7f\xe0?\xc0?\xc0\x0f\x00\x0f\x00\x0f\x00\x0f\x00\x0f\x00\x0f\x00\x0f\x00\x0f\x00\x0f\x00\x1f\x00\x0f\xff\xfe\x00\x0f\xff\xfe\x00\x0f\xff\xfc\x00\x0f\xff\xf0\x00\x0f\x80\x00\x00?\xc0\x00\x00\x7f\xe0\x00\x00\x7f\xe0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\xff\xf0\x00\x00\x7f\xe0\x00\x00\x7f\xe0\x00\x00?\xc0\x00\x00\x0f\x00\x00\x00'],
 67:[b'\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 68:[b'\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff\xff\x0f\xf0\xff'],
 69:[b'\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff\xff\xf0\x0f\xff'],
 70:[b'\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\x00\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\x00\xf0\xf0\x00\xf0\xf0\xf0\x00\xf0\xf0\xf0\x00\xf0\xf0\xf0\x00\xf0\xf0\xf0\x00\xf0\xf0\xf0\x00\xf0\xf0\xf0\x00\xf0\xf0\xf0\x00\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0'],
 71:[b'\x00\x0f\xf0\x00\x00\x7f\xfe\x00\x01\xff\xff\x80\x03\xff\xff\xc0\x07\xf8\x1f\xe0\x0f\xc0\x03\xf0\x1f\x80\x01\xf8?\x00\x00\xfc>\x07\xe0||\x1f\xf8>x?\xfc\x1ex\x7f\xfe\x1e\xf8|>\x1f\xf0\xf8\x1f\x0f\xf0\xf0\x0f\x0f\xf0\xf0\x0f\x0f\xf0\xf0\x0f\x0f\xf0\xf0\x0f\x0f\xf0\xf8\x1f\x0f\xf8|>\x1fx\x7f\xfe\x1ex?\xfc\x1e|\x1f\xf8>>\x07\xe0|?\x00\x00\xfc\x1f\x80\x01\xf8\x0f\xc0\x03\xf0\x07\xf8\x1f\xe0\x03\xff\xff\xc0\x01\xff\xff\x80\x00\x7f\xfe\x00\x00\x0f\xf0\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 32, 32

