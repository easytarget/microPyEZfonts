'''
    ezFBfont_06_m2icon_5_lower : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original m2icon_5.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "public domain"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    COMMENT http://code.google.com/p/u8glib/
'''
# Code generated by bdf2dict.py
# Font: m2icon_5
# Cmd: [bdf2dict.py], ['Symbols-bdf-sources/m2icon_5.bdf', './lower-char.set', 'True']
# Date: 2024-06-11 17:20:52

version = '0.33'
name = 'm2icon5'
family = ''
weight = 'medium'
size = None

def height():
    return 6

def baseline():
    return 5

def max_width():
    return 10

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 65

def max_ch():
    return 104

_g = {
 65:[b'\x1c\x00\xfe\x00\x82\x00\x82\x00\xfe\x00\x00\x00',b'9'],
 66:[b'p\xd0\x90\x90\xf0\x00',b'8'],
 67:[b'\x00\xd8pp\xd8\x00',b'6'],
 68:[b'\x06\x0c\xd8p \x00',b'8'],
 69:[b'\x00\xf0\x90\x90\xf0\x00',b'5'],
 70:[b'\x00\xf0\x90\xd0\xf0\x00',b'5'],
 71:[b'\x00\xf0\xf0\xf0\xf0\x00',b'5'],
 72:[b'\xf8\x88\x88\x88\xf8\x00',b'6'],
 73:[b'\xf8\x88\xa8\x88\xf8\x00',b'6'],
 74:[b'\xf8\xf8\xf8\xf8\xf8\x00',b'6'],
 75:[b'\x00\xe0\xb0\xf0p\x00',b'5'],
 76:[b'\x00\xe0\xb0\xf0p\x00',b'5'],
 77:[b'\x00\xe0\xf0\xf0p\x00',b'5'],
 78:[b'\xf0\x98\x98\xf8x\x00',b'6'],
 79:[b'\xf0\x98\xd8\xf8x\x00',b'6'],
 80:[b'\xf0\xf8\xf8\xf8x\x00',b'6'],
 81:[b'\x00`\x90\x90`\x00',b'5'],
 82:[b'\x00`\x90\xd0`\x00',b'5'],
 83:[b'\x00`\xf0\xf0`\x00',b'5'],
 97:[b' @\xfe@ \x00',b'8'],
 98:[b' p\xa8  \x00',b'6'],
 102:[b'\x1c\x00\xfe\x00\x82\x00\xbf\x80\xff\x00\x00\x00',b'10'],
 103:[b'\x80\x80\x80\x80\x80\x80',b'2'],
 104:[b'  \xf8  \x00',b'6'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 6, int(_g[c][1])

