'''
    ezFBfont_battery24_0x0_0x39_24 : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original battery24.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: battery24
# Cmd: ['bdf2dict.py'], ['Symbols-bdf-sources/battery24.bdf', '_', './0x0_0x39-char.set']
# Date: 2024-07-31 15:36:08
'''
    Original Copyright, Comments and Notices from source:

    COPYRIGHT Exported by Fony v1.4.7

    COMMENT "Created with Fony 1.4.7"
'''
version = '0.33'
name = 'battery24'
family = 'generic'
weight = 'none'
size = None

def height():
    return 24

def baseline():
    return 24

def max_width():
    return 20

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 48

def max_ch():
    return 63

_g = {
  48:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xe0\x00p\xff\xff\xf0\x7f\xff\xe0',
  49:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xdf\xff\xb0\xdf\xff\xb0\xcf\xff0\xe0\x00p\xff\xff\xf0\x7f\xff\xe0',
  50:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xdf\xff\xb0\xdf\xff\xb0\xdf\xff\xb0\xc0\x000\xdf\xff\xb0\xdf\xff\xb0\xcf\xff0\xe0\x00p\xff\xff\xf0\x7f\xff\xe0',
  51:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xdf\xff\xb0\xdf\xff\xb0\xdf\xff\xb0\xc0\x000\xdf\xff\xb0\xdf\xff\xb0\xdf\xff\xb0\xc0\x000\xdf\xff\xb0\xdf\xff\xb0\xcf\xff0\xe0\x00p\xff\xff\xf0\x7f\xff\xe0',
  52:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xcf\xff0\xdf\xff\xb0\xdf\xff\xb0\xc0\x000\xdf\xff\xb0\xdf\xff\xb0\xdf\xff\xb0\xc0\x000\xdf\xff\xb0\xdf\xff\xb0\xdf\xff\xb0\xc0\x000\xdf\xff\xb0\xdf\xff\xb0\xcf\xff0\xe0\x00p\xff\xff\xf0\x7f\xff\xe0',
  53:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0',
  54:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0',
  55:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0',
  56:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0',
  57:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0',
  58:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0',
  59:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0\x000\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0',
  60:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\xff\xff\xf0\x7f\xff\xe0',
  61:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc1\x980\xc1\x980\xc1\x980\xc1\x980\xc3\xfc0\xc3\xfc0\xc3\xfc0\xc3\xfc0\xc3\xfc0\xc1\xf80\xc0\xf00\xc0`0\xc0`0\xc0\x000\xe0\x00p\xff\xff\xf0\x7f\xff\xe0',
  62:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0\x000\xc0`0\xc0`0\xc1\xf80\xc1\xf80\xc0`0\xc0`0\xc0\x000\xc0\x000\xc0\x000\xc0\x000\xc1\xf80\xc1\xf80\xc0\x000\xc0\x000\xe0\x00p\xff\xff\xf0\x7f\xff\xe0',
  63:b'\x01\xf8\x00\x01\xf8\x00\x01\xf8\x00\x7f\xff\xe0\xff\xff\xf0\xe0\x00p\xc0 0\xc0`0\xc0\xc00\xc0\x800\xc1\x8e0\xc3\xbe0\xc3\xfc0\xc7\xdc0\xc7\x180\xc0\x180\xc000\xc000\xc0`0\xc0\xc00\xc0\x800\xe0\x00p\xff\xff\xf0\x7f\xff\xe0',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 24, 20
