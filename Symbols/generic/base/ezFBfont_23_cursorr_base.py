'''
    ezFBfont_23_cursorr_base : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original cursorr.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "These "glyphs" are unencumbered"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    None found
'''
# Code generated by bdf2dict.py
# Font: cursorr
# Cmd: [bdf2dict.py], ['Symbols-bdf-sources/cursorr.bdf', './base-char.set', 'True']
# Date: 2024-06-11 17:20:50

version = '0.33'
name = 'cursor'
family = 'None'
weight = 'None'
size = None

def height():
    return 23

def baseline():
    return 7

def max_width():
    return 17

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 2

def max_ch():
    return 47

_g = {
 2:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x1e\x00\x00|\x00\x01\xfc\x00\x07\xf8\x00\x1f\xf8\x00\x01\xf0\x00\x03\xf0\x00\x07`\x00\x0e`\x00\x1c@\x008@\x00p\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00'],
 3:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x1f\x00\x00\x7f\x00\x01\xfe\x00\x07\xfe\x00\x1f\xfc\x00?\xfc\x00?\xf8\x00\x07\xf8\x00\x0f\xf0\x00\x1f\xf0\x00>\xe0\x00|\xe0\x00\xf8@\x00p\x00\x00 \x00\x00\x00\x00\x00'],
 22:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x80\x00\x01\x80\x00\x03\xc0\x00\x03\xc0\x00\x07\xe0\x00\x07\xe0\x00\x0f\xf0\x00\x0f\xf0\x00\x19\x98\x00\x11\x88\x00\x01\x80\x00\x01\x80\x00\x01\x80\x00\x01\x80\x00\x00\x00\x00\x00\x00\x00'],
 23:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xc0\x00\x03\xc0\x00\x07\xe0\x00\x07\xe0\x00\x0f\xf0\x00\x0f\xf0\x00\x1f\xf8\x00\x1f\xf8\x00?\xfc\x00?\xfc\x00?\xfc\x00;\xdc\x00\x03\xc0\x00\x03\xc0\x00\x03\xc0\x00\x03\xc0\x00\x00\x00\x00'],
 30:[b'\x02\x80\x00\x02\x80\x00\x02\x80\x00\x02\x80\x00\x02\x80\x00\x02\x80\x00\xfe\xff\x00\x00\x00\x00\xfe\xff\x00\x02\x80\x00\x02\x80\x00\x02\x80\x00\x02\x80\x00\x02\x80\x00\x02\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 31:[b'\x07\xc0\x00\x07\xc0\x00\x07\xc0\x00\x07\xc0\x00\x07\xc0\x00\xff\xff\x00\xff\xff\x00\xff\xff\x00\xff\xff\x00\xff\xff\x00\x07\xc0\x00\x07\xc0\x00\x07\xc0\x00\x07\xc0\x00\x07\xc0\x00\x07\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 34:[b'\x01\x00\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\xfe\xff\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 35:[b'\x03\x80\x00\x03\x80\x00\x03\x80\x00\x03\x80\x00\x03\x80\x00\x03\x80\x00\xff\xff\x00\xff\xff\x00\xff\xff\x00\x03\x80\x00\x03\x80\x00\x03\x80\x00\x03\x80\x00\x03\x80\x00\x03\x80\x00\x03\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'],
 44:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x06\x00\x00\x1e\x00\x00|\x00\x01\xfc\x00\x07\xf8\x00\x1f\xf8\x00\x00\xf0\x00\x01p\x00\x02`\x00\x04`\x00\x08@\x00\x10@\x00 \x00\x00@\x00\x00\x00\x00\x00'],
 45:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x0f\x00\x00?\x00\x00\xfe\x00\x03\xfc\x00\x0f\xfc\x00?\xf8\x00?\xf8\x00\x03\xf0\x00\x07\xf0\x00\x0e\xe0\x00\x1c\xe0\x008\xc0\x00p\xc0\x00`\x00\x00@\x00\x00'],
 46:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x06\x00\x00\x1e\x00\x00|\x00\x01\xfc\x00\x008\x00\x00X\x00\x00\x90\x00\x01\x10\x00\x02\x00\x00\x04\x00\x00\x08\x00\x00\x10\x00\x00 \x00\x00@\x00\x00\x00\x00\x00'],
 47:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x0f\x00\x00>\x00\x00\xfe\x00\x03\xfc\x00\x03\xfc\x00\x00\xf8\x00\x01\xf8\x00\x03\xb0\x00\x07 \x00\x0e\x00\x00\x1c\x00\x008\x00\x00p\x00\x00`\x00\x00\x00\x00\x00'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 23, 17

