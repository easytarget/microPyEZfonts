'''
    ezFBfont_37_7_Seg_41x21_base : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original 7_Seg_41x21.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

    Original Copyright information from source:
    COPYRIGHT "Created with Fony 1.4.0.2"

    Original Comments and Notices from source:
    (may include copyright and trademark info):
    COMMENT Exported by Fony v1.4.0.2
'''
# Code generated by bdf2dict.py
# Font: 7_Seg_41x21
# Cmd: [bdf2dict.py], ['Symbols-bdf-sources/7_Seg_41x21.bdf', '_', './base-char.set']
# Date: 2024-06-13 11:38:04

version = '0.33'
name = '7_Seg_41x21'
family = 'None'
weight = 'None'
size = None

def height():
    return 37

def baseline():
    return 38

def max_width():
    return 21

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 43

def max_ch():
    return 58

_g = {
 43:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x1c\x00\x1c\x00\xff\x80\xff\x80\xff\x80\x1c\x00\x1c\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',b'13'],
 44:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xe0\xe0',b'7'],
 45:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x80\xff\x80\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',b'13'],
 46:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xe0\xe0',b'7'],
 48:[b'\x7f\xfc\x00\xbf\xfa\x00\xdf\xf6\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xc0\x06\x00\x80\x02\x00\x00\x00\x00\x80\x02\x00\xc0\x06\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xdf\xf6\x00\xbf\xfa\x00\x7f\xfc\x00',b'21'],
 49:[b'\x00\x02\x00\x00\x06\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x06\x00\x00\x02\x00\x00\x00\x00\x00\x02\x00\x00\x06\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x06\x00\x00\x02\x00',b'21'],
 50:[b'\xff\xfc\x00\x7f\xfa\x00?\xf6\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x06\x00?\xfa\x00\x7f\xfc\x00\xbf\xf8\x00\xc0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xdf\xf8\x00\xbf\xfc\x00\x7f\xfe\x00',b'21'],
 51:[b'\xff\xfc\x00\x7f\xfa\x00?\xf6\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x06\x00?\xfa\x00\x7f\xfc\x00?\xfa\x00\x00\x06\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00?\xf6\x00\x7f\xfa\x00\xff\xfc\x00',b'21'],
 52:[b'\x80\x02\x00\xc0\x06\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xc0\x06\x00\xbf\xfa\x00\x7f\xfc\x00?\xfa\x00\x00\x06\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x06\x00\x00\x02\x00',b'21'],
 53:[b'\x7f\xfe\x00\xbf\xfc\x00\xdf\xf8\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xc0\x00\x00\xbf\xf8\x00\x7f\xfc\x00?\xfa\x00\x00\x06\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00?\xf6\x00\x7f\xfa\x00\xff\xfc\x00',b'21'],
 54:[b'\x7f\xfe\x00\xbf\xfc\x00\xdf\xf8\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xc0\x00\x00\xbf\xf8\x00\x7f\xfc\x00\xbf\xfa\x00\xc0\x06\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xdf\xf6\x00\xbf\xfa\x00\x7f\xfc\x00',b'21'],
 55:[b'\xff\xfc\x00\x7f\xfa\x00?\xf6\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x06\x00\x00\x02\x00\x00\x00\x00\x00\x02\x00\x00\x06\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x06\x00\x00\x02\x00',b'21'],
 56:[b'\x7f\xfc\x00\xbf\xfa\x00\xdf\xf6\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xc0\x06\x00\xbf\xfa\x00\x7f\xfc\x00\xbf\xfa\x00\xc0\x06\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xdf\xf6\x00\xbf\xfa\x00\x7f\xfc\x00',b'21'],
 57:[b'\x7f\xfc\x00\xbf\xfa\x00\xdf\xf6\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xe0\x0e\x00\xc0\x06\x00\xbf\xfa\x00\x7f\xfc\x00?\xfa\x00\x00\x06\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00?\xf6\x00\x7f\xfa\x00\xff\xfc\x00',b'21'],
 58:[b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xe0\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xe0\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',b'7'],
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c][0]), 37, int(_g[c][1])

