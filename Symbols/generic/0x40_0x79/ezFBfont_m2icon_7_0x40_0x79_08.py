'''
    ezFBfont_m2icon_7_0x40_0x79_08 : generated as part of the microPyEZfonts repository
      https://github.com/easytarget/microPyEZfonts

    This font definition can be used with the "ezFBfont" class provided there.
    It can also be used with the "writer" class from Peter Hinches micropython
      font-to-py tool: https://github.com/peterhinch/micropython-font-to-py

    Original m2icon_7.bdf font file was sourced from the U8G2 project:
      https://github.com/olikraus/u8g2

'''
# Code generated by bdf2dict.py
# Font: m2icon_7
# Cmd: ['bdf2dict.py'], ['Symbols-bdf-sources/m2icon_7.bdf', '_', './0x40_0x79-char.set']
# Date: 2024-07-31 15:36:11
'''
    Original Copyright, Comments and Notices from source:

    COPYRIGHT 
    COPYRIGHT This font is copyrighted by its author, who reserves all rights under
    COPYRIGHT national and international copyright laws.
    COPYRIGHT 
    COPYRIGHT Produced with bdfedit, a tcl/tk font editing program
    COPYRIGHT written by Thomas A. Fine
    COPYRIGHT Email to my last name at head.cfa.harvard.edu
    COPYRIGHT http://hea-www.harvard.edu/~fine/

    COMMENT "public domain"
'''
version = '0.33'
name = 'm2icon_7'
family = ''
weight = 'medium'
size = None

def height():
    return 8

def baseline():
    return 7

def max_width():
    return 12

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 65

def max_ch():
    return 104

_g = {
  65:b'\x0f\x00\xff\x80\x80\x80\x80\x80\x80\x80\x80\x80\xff\x80\x00\x00\n',
  66:b'8h\xe8\x88\x88\x88\xf8\x00\x06',
  67:b'\x00\x00\xd8pp\xd8\x00\x00\x06',
  68:b'\x00\x00\x03\x00\x06\x00\x0c\x00\xd8\x00p\x00 \x00\x00\x00\t',
  69:b'\x00\xfc\x84\x84\x84\x84\xfc\x00\x07',
  70:b'\x00\xfc\x84\xb4\xb4\x84\xfc\x00\x07',
  71:b'\x00\xfc\xfc\xfc\xfc\xfc\xfc\x00\x07',
  72:b'\xfe\x00\x82\x00\x82\x00\x82\x00\x82\x00\x82\x00\xfe\x00\x00\x00\t',
  73:b'\xfe\x00\x82\x00\xba\x00\xba\x00\xba\x00\x82\x00\xfe\x00\x00\x00\t',
  74:b'\xfe\x00\xfe\x00\xfe\x00\xfe\x00\xfe\x00\xfe\x00\xfe\x00\x00\x00\t',
  75:b'\x00\xf8\x8c\x8c\x8c\xfc|\x00\x07',
  76:b'\x00\xf8\x8c\xac\x8c\xfc|\x00\x07',
  77:b'\x00\xf8\xfc\xfc\xfc\xfc|\x00\x08',
  78:b'\xfc\x00\x86\x00\x86\x00\x86\x00\x86\x00\xfe\x00~\x00\x00\x00\t',
  79:b'\xfc\x00\x86\x00\xb6\x00\xb6\x00\x86\x00\xfe\x00~\x00\x00\x00\t',
  80:b'\xfc\x00\xfe\x00\xfe\x00\xfe\x00\xfe\x00\xfe\x00~\x00\x00\x00\t',
  81:b'\x00x\xcc\x84\x84\xccx\x00\x07',
  82:b'\x00x\xcc\xb4\xb4\xccx\x00\x07',
  83:b'\x00x\xfc\xfc\xfc\xfcx\x00\x07',
  97:b'\x10\x000\x00_\x00\x81\x00_\x000\x00\x10\x00\x00\x00\t',
  98:b'\x10(D\xee((8\x00\x08',
  102:b'\x0f\x00\xff\x80\x80\x80\x9f\xf0\xa0 \xc0@\xff\x80\x00\x00\x0c',
  103:b'\x80\x80\x80\x80\x80\x80\x80\x80\x02',
  104:b'\x10\x00\x00\x00\x10\x00\xba\x00\x10\x00\x00\x00\x10\x00\x00\x00\x0c',
}

def get_ch(ch):
    c = ord(ch)
    if c not in _g.keys():
        return None, 0, 0
    return memoryview(_g[c]), 8, int(_g[c][-1])
